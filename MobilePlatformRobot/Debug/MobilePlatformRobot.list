
MobilePlatformRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006478  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006608  08006608  00007608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d4  080066d4  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080066d4  080066d4  000076d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066dc  080066dc  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066dc  080066dc  000076dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080066e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000005c  08006740  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08006740  000083a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f928  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f72  00000000  00000000  000179b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00019928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5d  00000000  00000000  0001a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a79  00000000  00000000  0001b305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dcf  00000000  00000000  00041d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f23c6  00000000  00000000  00052b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144f13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004418  00000000  00000000  00144f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00149370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065f0 	.word	0x080065f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080065f0 	.word	0x080065f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
	//__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
	//while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter

	htim3.Instance->ARR = us - 1; /* auto-reload register */
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	1e5a      	subs	r2, r3, #1
 8000d5a:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <delay_us+0x68>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	htim3.Instance->EGR = 1;      /* re-initialize timer  */
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <delay_us+0x68>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2201      	movs	r2, #1
 8000d66:	615a      	str	r2, [r3, #20]
	htim3.Instance->SR &= ~1;     /* reset flag           */
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <delay_us+0x68>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <delay_us+0x68>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 0201 	bic.w	r2, r2, #1
 8000d76:	611a      	str	r2, [r3, #16]
	htim3.Instance->CR1 |= 1;     /* enable counter       */
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <delay_us+0x68>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <delay_us+0x68>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0201 	orr.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
	while((htim3.Instance->SR & 0x0001) != 1);
 8000d88:	bf00      	nop
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <delay_us+0x68>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d1f8      	bne.n	8000d8a <delay_us+0x3e>
	htim3.Instance->SR &= ~(0x0001);
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <delay_us+0x68>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <delay_us+0x68>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0201 	bic.w	r2, r2, #1
 8000da6:	611a      	str	r2, [r3, #16]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	20000110 	.word	0x20000110

08000db8 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);// pull the TRIG pin HIGH
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2140      	movs	r1, #64	@ 0x40
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc4:	f001 f87e 	bl	8001ec4 <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8000dc8:	200a      	movs	r0, #10
 8000dca:	f7ff ffbf 	bl	8000d4c <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2140      	movs	r1, #64	@ 0x40
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd6:	f001 f875 	bl	8001ec4 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000dda:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <HCSR04_Read+0x38>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <HCSR04_Read+0x38>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f042 0202 	orr.w	r2, r2, #2
 8000de8:	60da      	str	r2, [r3, #12]
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000078 	.word	0x20000078
 8000df4:	00000000 	.word	0x00000000

08000df8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0b8      	sub	sp, #224	@ 0xe0
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	uint16_t data_len = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
	char message[200], number[8];


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7f1b      	ldrb	r3, [r3, #28]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	f040 80a4 	bne.w	8000f58 <HAL_TIM_IC_CaptureCallback+0x160>
	{
		if(uhCaptureIndex == 0)
 8000e10:	4b55      	ldr	r3, [pc, #340]	@ (8000f68 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10a      	bne.n	8000e2e <HAL_TIM_IC_CaptureCallback+0x36>
		{
			/* Get the 1st Input Capture value */
			uwIC2Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f003 fad0 	bl	80043c0 <HAL_TIM_ReadCapturedValue>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4a52      	ldr	r2, [pc, #328]	@ (8000f6c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000e24:	6013      	str	r3, [r2, #0]
			uhCaptureIndex = 1;
 8000e26:	4b50      	ldr	r3, [pc, #320]	@ (8000f68 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	801a      	strh	r2, [r3, #0]


			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000e2c:	e094      	b.n	8000f58 <HAL_TIM_IC_CaptureCallback+0x160>
		else if(uhCaptureIndex == 1)
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f68 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	f040 8090 	bne.w	8000f58 <HAL_TIM_IC_CaptureCallback+0x160>
			uwIC2Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f003 fac0 	bl	80043c0 <HAL_TIM_ReadCapturedValue>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4a4b      	ldr	r2, [pc, #300]	@ (8000f70 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e44:	6013      	str	r3, [r2, #0]
			if (uwIC2Value2 > uwIC2Value1)
 8000e46:	4b4a      	ldr	r3, [pc, #296]	@ (8000f70 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b48      	ldr	r3, [pc, #288]	@ (8000f6c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <HAL_TIM_IC_CaptureCallback+0x6a>
				uwDiffCapture = (uwIC2Value2 - uwIC2Value1);
 8000e52:	4b47      	ldr	r3, [pc, #284]	@ (8000f70 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b45      	ldr	r3, [pc, #276]	@ (8000f6c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	4a45      	ldr	r2, [pc, #276]	@ (8000f74 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e011      	b.n	8000e86 <HAL_TIM_IC_CaptureCallback+0x8e>
			else if (uwIC2Value2 < uwIC2Value1)
 8000e62:	4b43      	ldr	r3, [pc, #268]	@ (8000f70 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4b41      	ldr	r3, [pc, #260]	@ (8000f6c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d209      	bcs.n	8000e82 <HAL_TIM_IC_CaptureCallback+0x8a>
				uwDiffCapture = ((0xFFFF - uwIC2Value1) + uwIC2Value2) + 1;
 8000e6e:	4b40      	ldr	r3, [pc, #256]	@ (8000f70 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b3e      	ldr	r3, [pc, #248]	@ (8000f6c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f74 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e001      	b.n	8000e86 <HAL_TIM_IC_CaptureCallback+0x8e>
				Error_Handler();
 8000e82:	f000 fb0b 	bl	800149c <Error_Handler>
			memset(message, 0, 200);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	22c8      	movs	r2, #200	@ 0xc8
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f004 ff1e 	bl	8005cd0 <memset>
			Distance = uwDiffCapture * 0.034/2;
 8000e94:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fb33 	bl	8000504 <__aeabi_ui2d>
 8000e9e:	a330      	add	r3, pc, #192	@ (adr r3, 8000f60 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	f7ff fba8 	bl	80005f8 <__aeabi_dmul>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eb8:	f7ff fcc8 	bl	800084c <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fdaa 	bl	8000a1c <__aeabi_d2uiz>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000ece:	701a      	strb	r2, [r3, #0]
			memset(number, 0, 8);
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 fef9 	bl	8005cd0 <memset>
			itoa(Distance, memset, 10);
 8000ede:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	220a      	movs	r2, #10
 8000ee4:	4925      	ldr	r1, [pc, #148]	@ (8000f7c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 fe8d 	bl	8005c06 <itoa>
			strcat(message, number);
 8000eec:	f107 020c 	add.w	r2, r7, #12
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f004 fef2 	bl	8005ce0 <strcat>
			strcat(message, " cm\n");
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff f965 	bl	80001d0 <strlen>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a1b      	ldr	r2, [pc, #108]	@ (8000f80 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000f12:	6810      	ldr	r0, [r2, #0]
 8000f14:	6018      	str	r0, [r3, #0]
 8000f16:	7912      	ldrb	r2, [r2, #4]
 8000f18:	711a      	strb	r2, [r3, #4]
			data_len = sprintf(Data,"Distance = %u \r\n", Distance);
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4918      	ldr	r1, [pc, #96]	@ (8000f84 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000f22:	4819      	ldr	r0, [pc, #100]	@ (8000f88 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000f24:	f004 feb4 	bl	8005c90 <siprintf>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
			HAL_UART_Transmit(&huart2,(uint8_t*)&message, strlen(message), 100);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f94c 	bl	80001d0 <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f107 0114 	add.w	r1, r7, #20
 8000f40:	2364      	movs	r3, #100	@ 0x64
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000f44:	f004 f8f0 	bl	8005128 <HAL_UART_Transmit>
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0202 	bic.w	r2, r2, #2
 8000f56:	60da      	str	r2, [r3, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	37e0      	adds	r7, #224	@ 0xe0
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	b020c49c 	.word	0xb020c49c
 8000f64:	3fa16872 	.word	0x3fa16872
 8000f68:	200001f0 	.word	0x200001f0
 8000f6c:	200001e4 	.word	0x200001e4
 8000f70:	200001e8 	.word	0x200001e8
 8000f74:	200001ec 	.word	0x200001ec
 8000f78:	200001f2 	.word	0x200001f2
 8000f7c:	08005cd1 	.word	0x08005cd1
 8000f80:	08006608 	.word	0x08006608
 8000f84:	08006610 	.word	0x08006610
 8000f88:	200001f4 	.word	0x200001f4
 8000f8c:	2000015c 	.word	0x2000015c
 8000f90:	20000078 	.word	0x20000078

08000f94 <Set_PWM_Pulse>:

void Set_PWM_Pulse(TIM_HandleTypeDef *htim,uint32_t channel, uint32_t pulse)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
	switch (channel)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b14      	cmp	r3, #20
 8000fa4:	d84a      	bhi.n	800103c <Set_PWM_Pulse+0xa8>
 8000fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fac <Set_PWM_Pulse+0x18>)
 8000fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fac:	08001001 	.word	0x08001001
 8000fb0:	0800103d 	.word	0x0800103d
 8000fb4:	0800103d 	.word	0x0800103d
 8000fb8:	0800103d 	.word	0x0800103d
 8000fbc:	0800100b 	.word	0x0800100b
 8000fc0:	0800103d 	.word	0x0800103d
 8000fc4:	0800103d 	.word	0x0800103d
 8000fc8:	0800103d 	.word	0x0800103d
 8000fcc:	08001015 	.word	0x08001015
 8000fd0:	0800103d 	.word	0x0800103d
 8000fd4:	0800103d 	.word	0x0800103d
 8000fd8:	0800103d 	.word	0x0800103d
 8000fdc:	0800101f 	.word	0x0800101f
 8000fe0:	0800103d 	.word	0x0800103d
 8000fe4:	0800103d 	.word	0x0800103d
 8000fe8:	0800103d 	.word	0x0800103d
 8000fec:	08001029 	.word	0x08001029
 8000ff0:	0800103d 	.word	0x0800103d
 8000ff4:	0800103d 	.word	0x0800103d
 8000ff8:	0800103d 	.word	0x0800103d
 8000ffc:	08001033 	.word	0x08001033
	{
		case TIM_CHANNEL_1:
			htim->Instance->CCR1 = pulse;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001008:	e019      	b.n	800103e <Set_PWM_Pulse+0xaa>
		case TIM_CHANNEL_2:
			htim->Instance->CCR2 = pulse;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001012:	e014      	b.n	800103e <Set_PWM_Pulse+0xaa>
		case TIM_CHANNEL_3:
			htim->Instance->CCR3 = pulse;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 800101c:	e00f      	b.n	800103e <Set_PWM_Pulse+0xaa>
		case TIM_CHANNEL_4:
			htim->Instance->CCR4 = pulse;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001026:	e00a      	b.n	800103e <Set_PWM_Pulse+0xaa>
		case TIM_CHANNEL_5:
			htim->Instance->CCR5 = pulse;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	659a      	str	r2, [r3, #88]	@ 0x58
			break;
 8001030:	e005      	b.n	800103e <Set_PWM_Pulse+0xaa>
		case TIM_CHANNEL_6:
			htim->Instance->CCR6 = pulse;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	65da      	str	r2, [r3, #92]	@ 0x5c
			break;
 800103a:	e000      	b.n	800103e <Set_PWM_Pulse+0xaa>
		default:
		    break;
 800103c:	bf00      	nop
	}
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001052:	f000 fc06 	bl	8001862 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001056:	f000 f851 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105a:	f000 f9ef 	bl	800143c <MX_GPIO_Init>
  MX_TIM1_Init();
 800105e:	f000 f89f 	bl	80011a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001062:	f000 f8f7 	bl	8001254 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001066:	f000 f96b 	bl	8001340 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800106a:	f000 f9b7 	bl	80013dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /*Start PWM for TIM2 channel 1 for motor*/
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1)!= HAL_OK)
 800106e:	2100      	movs	r1, #0
 8001070:	481e      	ldr	r0, [pc, #120]	@ (80010ec <main+0xa0>)
 8001072:	f002 fb81 	bl	8003778 <HAL_TIM_PWM_Start>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <main+0x34>
  {
	  /* Starting Error */
	  Error_Handler();
 800107c:	f000 fa0e 	bl	800149c <Error_Handler>
  }

  /*Start the Input Capture in interrupt mode for sensor*/
   if(HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8001080:	2100      	movs	r1, #0
 8001082:	481b      	ldr	r0, [pc, #108]	@ (80010f0 <main+0xa4>)
 8001084:	f002 fcd6 	bl	8003a34 <HAL_TIM_IC_Start_IT>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <main+0x46>
   {
 	  /* Starting Error */
 	  Error_Handler();
 800108e:	f000 fa05 	bl	800149c <Error_Handler>
   }

   /*Timer configured at 1MHz */
   if(HAL_TIM_Base_Start(&htim1)  != HAL_OK)
 8001092:	4817      	ldr	r0, [pc, #92]	@ (80010f0 <main+0xa4>)
 8001094:	f002 faa6 	bl	80035e4 <HAL_TIM_Base_Start>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <main+0x56>
   {
	   /* Starting Error */
	   Error_Handler();
 800109e:	f000 f9fd 	bl	800149c <Error_Handler>
   }

   uint8_t TX_Buffer[] = "Hello World!\r\n";
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <main+0xa8>)
 80010a4:	463c      	mov	r4, r7
 80010a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a8:	c407      	stmia	r4!, {r0, r1, r2}
 80010aa:	8023      	strh	r3, [r4, #0]
 80010ac:	3402      	adds	r4, #2
 80010ae:	0c1b      	lsrs	r3, r3, #16
 80010b0:	7023      	strb	r3, [r4, #0]



   HAL_UART_Transmit(&huart2,TX_Buffer,sizeof(TX_Buffer),1000); // "Hello World!"
 80010b2:	4639      	mov	r1, r7
 80010b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b8:	220f      	movs	r2, #15
 80010ba:	480f      	ldr	r0, [pc, #60]	@ (80010f8 <main+0xac>)
 80010bc:	f004 f834 	bl	8005128 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//IN1
 80010c0:	2200      	movs	r2, #0
 80010c2:	2110      	movs	r1, #16
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c8:	f000 fefc 	bl	8001ec4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);//IN2
 80010cc:	2201      	movs	r2, #1
 80010ce:	2120      	movs	r1, #32
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d4:	f000 fef6 	bl	8001ec4 <HAL_GPIO_WritePin>
	  Set_PWM_Pulse(&htim2, TIM_CHANNEL_1,624);
 80010d8:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80010dc:	2100      	movs	r1, #0
 80010de:	4803      	ldr	r0, [pc, #12]	@ (80010ec <main+0xa0>)
 80010e0:	f7ff ff58 	bl	8000f94 <Set_PWM_Pulse>

	  HCSR04_Read();
 80010e4:	f7ff fe68 	bl	8000db8 <HCSR04_Read>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//IN1
 80010e8:	bf00      	nop
 80010ea:	e7e9      	b.n	80010c0 <main+0x74>
 80010ec:	200000c4 	.word	0x200000c4
 80010f0:	20000078 	.word	0x20000078
 80010f4:	08006624 	.word	0x08006624
 80010f8:	2000015c 	.word	0x2000015c

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b096      	sub	sp, #88	@ 0x58
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	2244      	movs	r2, #68	@ 0x44
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f004 fde0 	bl	8005cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800111e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001122:	f000 fef5 	bl	8001f10 <HAL_PWREx_ControlVoltageScaling>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800112c:	f000 f9b6 	bl	800149c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001130:	2302      	movs	r3, #2
 8001132:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001134:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001138:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113a:	2310      	movs	r3, #16
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001142:	2302      	movs	r3, #2
 8001144:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001146:	2301      	movs	r3, #1
 8001148:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800114a:	230a      	movs	r3, #10
 800114c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800114e:	2307      	movs	r3, #7
 8001150:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001152:	2302      	movs	r3, #2
 8001154:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001156:	2302      	movs	r3, #2
 8001158:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4618      	mov	r0, r3
 8001160:	f000 ff2c 	bl	8001fbc <HAL_RCC_OscConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800116a:	f000 f997 	bl	800149c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001172:	2303      	movs	r3, #3
 8001174:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001182:	463b      	mov	r3, r7
 8001184:	2104      	movs	r1, #4
 8001186:	4618      	mov	r0, r3
 8001188:	f001 faf4 	bl	8002774 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001192:	f000 f983 	bl	800149c <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3758      	adds	r7, #88	@ 0x58
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011be:	4b23      	ldr	r3, [pc, #140]	@ (800124c <MX_TIM1_Init+0xac>)
 80011c0:	4a23      	ldr	r2, [pc, #140]	@ (8001250 <MX_TIM1_Init+0xb0>)
 80011c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80 - 1;
 80011c4:	4b21      	ldr	r3, [pc, #132]	@ (800124c <MX_TIM1_Init+0xac>)
 80011c6:	224f      	movs	r2, #79	@ 0x4f
 80011c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b20      	ldr	r3, [pc, #128]	@ (800124c <MX_TIM1_Init+0xac>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <MX_TIM1_Init+0xac>)
 80011d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <MX_TIM1_Init+0xac>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011de:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <MX_TIM1_Init+0xac>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b19      	ldr	r3, [pc, #100]	@ (800124c <MX_TIM1_Init+0xac>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011ea:	4818      	ldr	r0, [pc, #96]	@ (800124c <MX_TIM1_Init+0xac>)
 80011ec:	f002 fbca 	bl	8003984 <HAL_TIM_IC_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011f6:	f000 f951 	bl	800149c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	480f      	ldr	r0, [pc, #60]	@ (800124c <MX_TIM1_Init+0xac>)
 800120e:	f003 fe97 	bl	8004f40 <HAL_TIMEx_MasterConfigSynchronization>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001218:	f000 f940 	bl	800149c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001220:	2301      	movs	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <MX_TIM1_Init+0xac>)
 8001234:	f002 fe4a 	bl	8003ecc <HAL_TIM_IC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800123e:	f000 f92d 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000078 	.word	0x20000078
 8001250:	40012c00 	.word	0x40012c00

08001254 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	@ 0x38
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001274:	463b      	mov	r3, r7
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001286:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <MX_TIM2_Init+0xe8>)
 8001288:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800128c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 800128e:	4b2b      	ldr	r3, [pc, #172]	@ (800133c <MX_TIM2_Init+0xe8>)
 8001290:	227f      	movs	r2, #127	@ 0x7f
 8001292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b29      	ldr	r3, [pc, #164]	@ (800133c <MX_TIM2_Init+0xe8>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 800129a:	4b28      	ldr	r3, [pc, #160]	@ (800133c <MX_TIM2_Init+0xe8>)
 800129c:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80012a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <MX_TIM2_Init+0xe8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <MX_TIM2_Init+0xe8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ae:	4823      	ldr	r0, [pc, #140]	@ (800133c <MX_TIM2_Init+0xe8>)
 80012b0:	f002 f940 	bl	8003534 <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012ba:	f000 f8ef 	bl	800149c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c8:	4619      	mov	r1, r3
 80012ca:	481c      	ldr	r0, [pc, #112]	@ (800133c <MX_TIM2_Init+0xe8>)
 80012cc:	f002 ffae 	bl	800422c <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012d6:	f000 f8e1 	bl	800149c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012da:	4818      	ldr	r0, [pc, #96]	@ (800133c <MX_TIM2_Init+0xe8>)
 80012dc:	f002 f9ea 	bl	80036b4 <HAL_TIM_PWM_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012e6:	f000 f8d9 	bl	800149c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	@ (800133c <MX_TIM2_Init+0xe8>)
 80012fa:	f003 fe21 	bl	8004f40 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001304:	f000 f8ca 	bl	800149c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	@ 0x60
 800130a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	@ (800133c <MX_TIM2_Init+0xe8>)
 8001320:	f002 fe70 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800132a:	f000 f8b7 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800132e:	4803      	ldr	r0, [pc, #12]	@ (800133c <MX_TIM2_Init+0xe8>)
 8001330:	f000 f95c 	bl	80015ec <HAL_TIM_MspPostInit>

}
 8001334:	bf00      	nop
 8001336:	3738      	adds	r7, #56	@ 0x38
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000c4 	.word	0x200000c4

08001340 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800135e:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <MX_TIM3_Init+0x94>)
 8001360:	4a1d      	ldr	r2, [pc, #116]	@ (80013d8 <MX_TIM3_Init+0x98>)
 8001362:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80 - 1;
 8001364:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <MX_TIM3_Init+0x94>)
 8001366:	224f      	movs	r2, #79	@ 0x4f
 8001368:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <MX_TIM3_Init+0x94>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8001370:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <MX_TIM3_Init+0x94>)
 8001372:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001376:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <MX_TIM3_Init+0x94>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <MX_TIM3_Init+0x94>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001384:	4813      	ldr	r0, [pc, #76]	@ (80013d4 <MX_TIM3_Init+0x94>)
 8001386:	f002 f8d5 	bl	8003534 <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001390:	f000 f884 	bl	800149c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001398:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <MX_TIM3_Init+0x94>)
 80013a2:	f002 ff43 	bl	800422c <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013ac:	f000 f876 	bl	800149c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_TIM3_Init+0x94>)
 80013be:	f003 fdbf 	bl	8004f40 <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013c8:	f000 f868 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000110 	.word	0x20000110
 80013d8:	40000400 	.word	0x40000400

080013dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e0:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 80013e2:	4a15      	ldr	r2, [pc, #84]	@ (8001438 <MX_USART2_UART_Init+0x5c>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 8001420:	f003 fe34 	bl	800508c <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800142a:	f000 f837 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000015c 	.word	0x2000015c
 8001438:	40004400 	.word	0x40004400

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_GPIO_Init+0x5c>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <MX_GPIO_Init+0x5c>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_GPIO_Init+0x5c>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2170      	movs	r1, #112	@ 0x70
 800146c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001470:	f000 fd28 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001474:	2370      	movs	r3, #112	@ 0x70
 8001476:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4619      	mov	r1, r3
 8001488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148c:	f000 fb70 	bl	8001b70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001490:	bf00      	nop
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000

0800149c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a0:	b672      	cpsid	i
}
 80014a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <Error_Handler+0x8>

080014a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_MspInit+0x44>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b2:	4a0e      	ldr	r2, [pc, #56]	@ (80014ec <HAL_MspInit+0x44>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_MspInit+0x44>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_MspInit+0x44>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <HAL_MspInit+0x44>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_MspInit+0x44>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000

080014f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1c      	ldr	r2, [pc, #112]	@ (8001580 <HAL_TIM_IC_MspInit+0x90>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d131      	bne.n	8001576 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <HAL_TIM_IC_MspInit+0x94>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001516:	4a1b      	ldr	r2, [pc, #108]	@ (8001584 <HAL_TIM_IC_MspInit+0x94>)
 8001518:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800151c:	6613      	str	r3, [r2, #96]	@ 0x60
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_TIM_IC_MspInit+0x94>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <HAL_TIM_IC_MspInit+0x94>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	4a15      	ldr	r2, [pc, #84]	@ (8001584 <HAL_TIM_IC_MspInit+0x94>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001536:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <HAL_TIM_IC_MspInit+0x94>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001542:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001554:	2301      	movs	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001562:	f000 fb05 	bl	8001b70 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	201b      	movs	r0, #27
 800156c:	f000 fac9 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001570:	201b      	movs	r0, #27
 8001572:	f000 fae2 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	@ 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40012c00 	.word	0x40012c00
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001598:	d10c      	bne.n	80015b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_TIM_Base_MspInit+0x5c>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159e:	4a11      	ldr	r2, [pc, #68]	@ (80015e4 <HAL_TIM_Base_MspInit+0x5c>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <HAL_TIM_Base_MspInit+0x5c>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015b2:	e010      	b.n	80015d6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <HAL_TIM_Base_MspInit+0x60>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d10b      	bne.n	80015d6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <HAL_TIM_Base_MspInit+0x5c>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c2:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <HAL_TIM_Base_MspInit+0x5c>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_TIM_Base_MspInit+0x5c>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40000400 	.word	0x40000400

080015ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800160c:	d11c      	bne.n	8001648 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <HAL_TIM_MspPostInit+0x64>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <HAL_TIM_MspPostInit+0x64>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <HAL_TIM_MspPostInit+0x64>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001626:	2301      	movs	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001636:	2301      	movs	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	4619      	mov	r1, r3
 8001640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001644:	f000 fa94 	bl	8001b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0ac      	sub	sp, #176	@ 0xb0
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2288      	movs	r2, #136	@ 0x88
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f004 fb2b 	bl	8005cd0 <memset>
  if(huart->Instance==USART2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a21      	ldr	r2, [pc, #132]	@ (8001704 <HAL_UART_MspInit+0xb0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d13b      	bne.n	80016fc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001684:	2302      	movs	r3, #2
 8001686:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001688:	2300      	movs	r3, #0
 800168a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4618      	mov	r0, r3
 8001692:	f001 fa93 	bl	8002bbc <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800169c:	f7ff fefe 	bl	800149c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_UART_MspInit+0xb4>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a4:	4a18      	ldr	r2, [pc, #96]	@ (8001708 <HAL_UART_MspInit+0xb4>)
 80016a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <HAL_UART_MspInit+0xb4>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <HAL_UART_MspInit+0xb4>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016bc:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <HAL_UART_MspInit+0xb4>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c4:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <HAL_UART_MspInit+0xb4>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016d0:	230c      	movs	r3, #12
 80016d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e8:	2307      	movs	r3, #7
 80016ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f8:	f000 fa3a 	bl	8001b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	37b0      	adds	r7, #176	@ 0xb0
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40004400 	.word	0x40004400
 8001708:	40021000 	.word	0x40021000

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <MemManage_Handler+0x4>

08001724 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <UsageFault_Handler+0x4>

08001734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001762:	f000 f8d3 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <TIM1_CC_IRQHandler+0x10>)
 8001772:	f002 faa9 	bl	8003cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000078 	.word	0x20000078

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	@ (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f004 faa6 	bl	8005d00 <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20018000 	.word	0x20018000
 80017e0:	00000400 	.word	0x00000400
 80017e4:	20000258 	.word	0x20000258
 80017e8:	200003a8 	.word	0x200003a8

080017ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001848 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001814:	f7ff ffea 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <LoopForever+0x6>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	@ (8001850 <LoopForever+0xa>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	@ (8001854 <LoopForever+0xe>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	@ (800185c <LoopForever+0x16>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183e:	f004 fa65 	bl	8005d0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001842:	f7ff fc03 	bl	800104c <main>

08001846 <LoopForever>:

LoopForever:
    b LoopForever
 8001846:	e7fe      	b.n	8001846 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001848:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001854:	080066e4 	.word	0x080066e4
  ldr r2, =_sbss
 8001858:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800185c:	200003a8 	.word	0x200003a8

08001860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC1_2_IRQHandler>

08001862 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f93d 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f80e 	bl	8001894 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	e001      	b.n	8001888 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001884:	f7ff fe10 	bl	80014a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001888:	79fb      	ldrb	r3, [r7, #7]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018a0:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <HAL_InitTick+0x6c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d023      	beq.n	80018f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018a8:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <HAL_InitTick+0x70>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <HAL_InitTick+0x6c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f949 	bl	8001b56 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d809      	bhi.n	80018e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f000 f913 	bl	8001b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <HAL_InitTick+0x74>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e007      	b.n	80018f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	e004      	b.n	80018f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	e001      	b.n	80018f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008
 8001930:	2000025c 	.word	0x2000025c

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	2000025c 	.word	0x2000025c

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	@ (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	@ (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	@ (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	@ 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	@ 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff29 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff3e 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff8e 	bl	8001a40 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5d 	bl	80019ec <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff31 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa2 	bl	8001aa8 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7e:	e17f      	b.n	8001e80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8171 	beq.w	8001e7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d005      	beq.n	8001bb0 <HAL_GPIO_Init+0x40>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d130      	bne.n	8001c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001be6:	2201      	movs	r2, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 0201 	and.w	r2, r3, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d118      	bne.n	8001c50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c24:	2201      	movs	r2, #1
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	f003 0201 	and.w	r2, r3, #1
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d017      	beq.n	8001c8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d123      	bne.n	8001ce0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	6939      	ldr	r1, [r7, #16]
 8001cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80ac 	beq.w	8001e7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea0 <HAL_GPIO_Init+0x330>)
 8001d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d26:	4a5e      	ldr	r2, [pc, #376]	@ (8001ea0 <HAL_GPIO_Init+0x330>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea0 <HAL_GPIO_Init+0x330>)
 8001d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d3a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ea4 <HAL_GPIO_Init+0x334>)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	220f      	movs	r2, #15
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d64:	d025      	beq.n	8001db2 <HAL_GPIO_Init+0x242>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4f      	ldr	r2, [pc, #316]	@ (8001ea8 <HAL_GPIO_Init+0x338>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d01f      	beq.n	8001dae <HAL_GPIO_Init+0x23e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4e      	ldr	r2, [pc, #312]	@ (8001eac <HAL_GPIO_Init+0x33c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d019      	beq.n	8001daa <HAL_GPIO_Init+0x23a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4d      	ldr	r2, [pc, #308]	@ (8001eb0 <HAL_GPIO_Init+0x340>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0x236>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb4 <HAL_GPIO_Init+0x344>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00d      	beq.n	8001da2 <HAL_GPIO_Init+0x232>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4b      	ldr	r2, [pc, #300]	@ (8001eb8 <HAL_GPIO_Init+0x348>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d007      	beq.n	8001d9e <HAL_GPIO_Init+0x22e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4a      	ldr	r2, [pc, #296]	@ (8001ebc <HAL_GPIO_Init+0x34c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_GPIO_Init+0x22a>
 8001d96:	2306      	movs	r3, #6
 8001d98:	e00c      	b.n	8001db4 <HAL_GPIO_Init+0x244>
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	e00a      	b.n	8001db4 <HAL_GPIO_Init+0x244>
 8001d9e:	2305      	movs	r3, #5
 8001da0:	e008      	b.n	8001db4 <HAL_GPIO_Init+0x244>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x244>
 8001da6:	2303      	movs	r3, #3
 8001da8:	e004      	b.n	8001db4 <HAL_GPIO_Init+0x244>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_Init+0x244>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x244>
 8001db2:	2300      	movs	r3, #0
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	f002 0203 	and.w	r2, r2, #3
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	4093      	lsls	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc4:	4937      	ldr	r1, [pc, #220]	@ (8001ea4 <HAL_GPIO_Init+0x334>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec0 <HAL_GPIO_Init+0x350>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001df6:	4a32      	ldr	r2, [pc, #200]	@ (8001ec0 <HAL_GPIO_Init+0x350>)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dfc:	4b30      	ldr	r3, [pc, #192]	@ (8001ec0 <HAL_GPIO_Init+0x350>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e20:	4a27      	ldr	r2, [pc, #156]	@ (8001ec0 <HAL_GPIO_Init+0x350>)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e26:	4b26      	ldr	r3, [pc, #152]	@ (8001ec0 <HAL_GPIO_Init+0x350>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec0 <HAL_GPIO_Init+0x350>)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <HAL_GPIO_Init+0x350>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e74:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <HAL_GPIO_Init+0x350>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f47f ae78 	bne.w	8001b80 <HAL_GPIO_Init+0x10>
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	48000400 	.word	0x48000400
 8001eac:	48000800 	.word	0x48000800
 8001eb0:	48000c00 	.word	0x48000c00
 8001eb4:	48001000 	.word	0x48001000
 8001eb8:	48001400 	.word	0x48001400
 8001ebc:	48001800 	.word	0x48001800
 8001ec0:	40010400 	.word	0x40010400

08001ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ee0:	e002      	b.n	8001ee8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ef8:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <HAL_PWREx_GetVoltageRange+0x18>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40007000 	.word	0x40007000

08001f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f1e:	d130      	bne.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f20:	4b23      	ldr	r3, [pc, #140]	@ (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f2c:	d038      	beq.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2e:	4b20      	ldr	r3, [pc, #128]	@ (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f36:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2232      	movs	r2, #50	@ 0x32
 8001f44:	fb02 f303 	mul.w	r3, r2, r3
 8001f48:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0c9b      	lsrs	r3, r3, #18
 8001f50:	3301      	adds	r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f54:	e002      	b.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f5c:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f68:	d102      	bne.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f2      	bne.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f7c:	d110      	bne.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e00f      	b.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8e:	d007      	beq.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f90:	4b07      	ldr	r3, [pc, #28]	@ (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f98:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	431bde83 	.word	0x431bde83

08001fbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e3ca      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fce:	4b97      	ldr	r3, [pc, #604]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd8:	4b94      	ldr	r3, [pc, #592]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80e4 	beq.w	80021b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <HAL_RCC_OscConfig+0x4a>
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	f040 808b 	bne.w	8002114 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b01      	cmp	r3, #1
 8002002:	f040 8087 	bne.w	8002114 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002006:	4b89      	ldr	r3, [pc, #548]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_RCC_OscConfig+0x62>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e3a2      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1a      	ldr	r2, [r3, #32]
 8002022:	4b82      	ldr	r3, [pc, #520]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d004      	beq.n	8002038 <HAL_RCC_OscConfig+0x7c>
 800202e:	4b7f      	ldr	r3, [pc, #508]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002036:	e005      	b.n	8002044 <HAL_RCC_OscConfig+0x88>
 8002038:	4b7c      	ldr	r3, [pc, #496]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002044:	4293      	cmp	r3, r2
 8002046:	d223      	bcs.n	8002090 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fd55 	bl	8002afc <RCC_SetFlashLatencyFromMSIRange>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e383      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205c:	4b73      	ldr	r3, [pc, #460]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a72      	ldr	r2, [pc, #456]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b70      	ldr	r3, [pc, #448]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	496d      	ldr	r1, [pc, #436]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800207a:	4b6c      	ldr	r3, [pc, #432]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	4968      	ldr	r1, [pc, #416]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
 800208e:	e025      	b.n	80020dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002090:	4b66      	ldr	r3, [pc, #408]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a65      	ldr	r2, [pc, #404]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002096:	f043 0308 	orr.w	r3, r3, #8
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b63      	ldr	r3, [pc, #396]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4960      	ldr	r1, [pc, #384]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ae:	4b5f      	ldr	r3, [pc, #380]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	495b      	ldr	r1, [pc, #364]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d109      	bne.n	80020dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fd15 	bl	8002afc <RCC_SetFlashLatencyFromMSIRange>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e343      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020dc:	f000 fc4a 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b52      	ldr	r3, [pc, #328]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	4950      	ldr	r1, [pc, #320]	@ (8002230 <HAL_RCC_OscConfig+0x274>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002234 <HAL_RCC_OscConfig+0x278>)
 80020fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002238 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fbc7 	bl	8001894 <HAL_InitTick>
 8002106:	4603      	mov	r3, r0
 8002108:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d052      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	e327      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d032      	beq.n	8002182 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800211c:	4b43      	ldr	r3, [pc, #268]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a42      	ldr	r2, [pc, #264]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002128:	f7ff fc04 	bl	8001934 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002130:	f7ff fc00 	bl	8001934 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e310      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002142:	4b3a      	ldr	r3, [pc, #232]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800214e:	4b37      	ldr	r3, [pc, #220]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a36      	ldr	r2, [pc, #216]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002154:	f043 0308 	orr.w	r3, r3, #8
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b34      	ldr	r3, [pc, #208]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4931      	ldr	r1, [pc, #196]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216c:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	492c      	ldr	r1, [pc, #176]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
 8002180:	e01a      	b.n	80021b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002182:	4b2a      	ldr	r3, [pc, #168]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a29      	ldr	r2, [pc, #164]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800218e:	f7ff fbd1 	bl	8001934 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002196:	f7ff fbcd 	bl	8001934 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e2dd      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021a8:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x1da>
 80021b4:	e000      	b.n	80021b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d074      	beq.n	80022ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d005      	beq.n	80021d6 <HAL_RCC_OscConfig+0x21a>
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b0c      	cmp	r3, #12
 80021ce:	d10e      	bne.n	80021ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d10b      	bne.n	80021ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d064      	beq.n	80022ac <HAL_RCC_OscConfig+0x2f0>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d160      	bne.n	80022ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e2ba      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x24a>
 80021f8:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0b      	ldr	r2, [pc, #44]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e026      	b.n	8002254 <HAL_RCC_OscConfig+0x298>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800220e:	d115      	bne.n	800223c <HAL_RCC_OscConfig+0x280>
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a05      	ldr	r2, [pc, #20]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002216:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a02      	ldr	r2, [pc, #8]	@ (800222c <HAL_RCC_OscConfig+0x270>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e014      	b.n	8002254 <HAL_RCC_OscConfig+0x298>
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
 8002230:	08006634 	.word	0x08006634
 8002234:	20000000 	.word	0x20000000
 8002238:	20000004 	.word	0x20000004
 800223c:	4ba0      	ldr	r3, [pc, #640]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a9f      	ldr	r2, [pc, #636]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b9d      	ldr	r3, [pc, #628]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a9c      	ldr	r2, [pc, #624]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 800224e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff fb6a 	bl	8001934 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fb66 	bl	8001934 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	@ 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e276      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002276:	4b92      	ldr	r3, [pc, #584]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x2a8>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7ff fb56 	bl	8001934 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff fb52 	bl	8001934 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	@ 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e262      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229e:	4b88      	ldr	r3, [pc, #544]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x2d0>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d060      	beq.n	800237c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d005      	beq.n	80022cc <HAL_RCC_OscConfig+0x310>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d119      	bne.n	80022fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d116      	bne.n	80022fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022cc:	4b7c      	ldr	r3, [pc, #496]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_OscConfig+0x328>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e23f      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	4b76      	ldr	r3, [pc, #472]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	4973      	ldr	r1, [pc, #460]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f8:	e040      	b.n	800237c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d023      	beq.n	800234a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002302:	4b6f      	ldr	r3, [pc, #444]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6e      	ldr	r2, [pc, #440]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7ff fb11 	bl	8001934 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002316:	f7ff fb0d 	bl	8001934 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e21d      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002328:	4b65      	ldr	r3, [pc, #404]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002334:	4b62      	ldr	r3, [pc, #392]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	061b      	lsls	r3, r3, #24
 8002342:	495f      	ldr	r1, [pc, #380]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
 8002348:	e018      	b.n	800237c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234a:	4b5d      	ldr	r3, [pc, #372]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a5c      	ldr	r2, [pc, #368]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7ff faed 	bl	8001934 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff fae9 	bl	8001934 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1f9      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002370:	4b53      	ldr	r3, [pc, #332]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d03c      	beq.n	8002402 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01c      	beq.n	80023ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002390:	4b4b      	ldr	r3, [pc, #300]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002396:	4a4a      	ldr	r2, [pc, #296]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7ff fac8 	bl	8001934 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7ff fac4 	bl	8001934 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1d4      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ba:	4b41      	ldr	r3, [pc, #260]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 80023bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ef      	beq.n	80023a8 <HAL_RCC_OscConfig+0x3ec>
 80023c8:	e01b      	b.n	8002402 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ca:	4b3d      	ldr	r3, [pc, #244]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 80023cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d0:	4a3b      	ldr	r2, [pc, #236]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023da:	f7ff faab 	bl	8001934 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e2:	f7ff faa7 	bl	8001934 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1b7      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023f4:	4b32      	ldr	r3, [pc, #200]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 80023f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ef      	bne.n	80023e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80a6 	beq.w	800255c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002410:	2300      	movs	r3, #0
 8002412:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002414:	4b2a      	ldr	r3, [pc, #168]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10d      	bne.n	800243c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002420:	4b27      	ldr	r3, [pc, #156]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	4a26      	ldr	r2, [pc, #152]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242a:	6593      	str	r3, [r2, #88]	@ 0x58
 800242c:	4b24      	ldr	r3, [pc, #144]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002438:	2301      	movs	r3, #1
 800243a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243c:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <HAL_RCC_OscConfig+0x508>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d118      	bne.n	800247a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002448:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <HAL_RCC_OscConfig+0x508>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1d      	ldr	r2, [pc, #116]	@ (80024c4 <HAL_RCC_OscConfig+0x508>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002452:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002454:	f7ff fa6e 	bl	8001934 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245c:	f7ff fa6a 	bl	8001934 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e17a      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246e:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_RCC_OscConfig+0x508>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d108      	bne.n	8002494 <HAL_RCC_OscConfig+0x4d8>
 8002482:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002488:	4a0d      	ldr	r2, [pc, #52]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002492:	e029      	b.n	80024e8 <HAL_RCC_OscConfig+0x52c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d115      	bne.n	80024c8 <HAL_RCC_OscConfig+0x50c>
 800249c:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a2:	4a07      	ldr	r2, [pc, #28]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024ac:	4b04      	ldr	r3, [pc, #16]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b2:	4a03      	ldr	r2, [pc, #12]	@ (80024c0 <HAL_RCC_OscConfig+0x504>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x52c>
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40007000 	.word	0x40007000
 80024c8:	4b9c      	ldr	r3, [pc, #624]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ce:	4a9b      	ldr	r2, [pc, #620]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024d8:	4b98      	ldr	r3, [pc, #608]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024de:	4a97      	ldr	r2, [pc, #604]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d016      	beq.n	800251e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7ff fa20 	bl	8001934 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f6:	e00a      	b.n	800250e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7ff fa1c 	bl	8001934 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e12a      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250e:	4b8b      	ldr	r3, [pc, #556]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ed      	beq.n	80024f8 <HAL_RCC_OscConfig+0x53c>
 800251c:	e015      	b.n	800254a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7ff fa09 	bl	8001934 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7ff fa05 	bl	8001934 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e113      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800253c:	4b7f      	ldr	r3, [pc, #508]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1ed      	bne.n	8002526 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800254a:	7ffb      	ldrb	r3, [r7, #31]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d105      	bne.n	800255c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002550:	4b7a      	ldr	r3, [pc, #488]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	4a79      	ldr	r2, [pc, #484]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 8002556:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800255a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80fe 	beq.w	8002762 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256a:	2b02      	cmp	r3, #2
 800256c:	f040 80d0 	bne.w	8002710 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002570:	4b72      	ldr	r3, [pc, #456]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	429a      	cmp	r2, r3
 8002582:	d130      	bne.n	80025e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	3b01      	subs	r3, #1
 8002590:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d127      	bne.n	80025e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d11f      	bne.n	80025e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025b0:	2a07      	cmp	r2, #7
 80025b2:	bf14      	ite	ne
 80025b4:	2201      	movne	r2, #1
 80025b6:	2200      	moveq	r2, #0
 80025b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d113      	bne.n	80025e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	3b01      	subs	r3, #1
 80025cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	3b01      	subs	r3, #1
 80025e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d06e      	beq.n	80026c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b0c      	cmp	r3, #12
 80025ea:	d069      	beq.n	80026c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025ec:	4b53      	ldr	r3, [pc, #332]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025f8:	4b50      	ldr	r3, [pc, #320]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0ad      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002608:	4b4c      	ldr	r3, [pc, #304]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a4b      	ldr	r2, [pc, #300]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 800260e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002612:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002614:	f7ff f98e 	bl	8001934 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7ff f98a 	bl	8001934 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e09a      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262e:	4b43      	ldr	r3, [pc, #268]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263a:	4b40      	ldr	r3, [pc, #256]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <HAL_RCC_OscConfig+0x784>)
 8002640:	4013      	ands	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800264a:	3a01      	subs	r2, #1
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002654:	0212      	lsls	r2, r2, #8
 8002656:	4311      	orrs	r1, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800265c:	0852      	lsrs	r2, r2, #1
 800265e:	3a01      	subs	r2, #1
 8002660:	0552      	lsls	r2, r2, #21
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002668:	0852      	lsrs	r2, r2, #1
 800266a:	3a01      	subs	r2, #1
 800266c:	0652      	lsls	r2, r2, #25
 800266e:	4311      	orrs	r1, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002674:	0912      	lsrs	r2, r2, #4
 8002676:	0452      	lsls	r2, r2, #17
 8002678:	430a      	orrs	r2, r1
 800267a:	4930      	ldr	r1, [pc, #192]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 800267c:	4313      	orrs	r3, r2
 800267e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002680:	4b2e      	ldr	r3, [pc, #184]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2d      	ldr	r2, [pc, #180]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 8002686:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800268a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800268c:	4b2b      	ldr	r3, [pc, #172]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a2a      	ldr	r2, [pc, #168]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 8002692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002696:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002698:	f7ff f94c 	bl	8001934 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a0:	f7ff f948 	bl	8001934 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e058      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b2:	4b22      	ldr	r3, [pc, #136]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026be:	e050      	b.n	8002762 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e04f      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c4:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d148      	bne.n	8002762 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026d0:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a19      	ldr	r2, [pc, #100]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80026d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026dc:	4b17      	ldr	r3, [pc, #92]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a16      	ldr	r2, [pc, #88]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 80026e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026e8:	f7ff f924 	bl	8001934 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7ff f920 	bl	8001934 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e030      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002702:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x734>
 800270e:	e028      	b.n	8002762 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d023      	beq.n	800275e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a08      	ldr	r2, [pc, #32]	@ (800273c <HAL_RCC_OscConfig+0x780>)
 800271c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7ff f907 	bl	8001934 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002728:	e00c      	b.n	8002744 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272a:	f7ff f903 	bl	8001934 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d905      	bls.n	8002744 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e013      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
 800273c:	40021000 	.word	0x40021000
 8002740:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002744:	4b09      	ldr	r3, [pc, #36]	@ (800276c <HAL_RCC_OscConfig+0x7b0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1ec      	bne.n	800272a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_RCC_OscConfig+0x7b0>)
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	4905      	ldr	r1, [pc, #20]	@ (800276c <HAL_RCC_OscConfig+0x7b0>)
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_RCC_OscConfig+0x7b4>)
 8002758:	4013      	ands	r3, r2
 800275a:	60cb      	str	r3, [r1, #12]
 800275c:	e001      	b.n	8002762 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	feeefffc 	.word	0xfeeefffc

08002774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0e7      	b.n	8002958 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002788:	4b75      	ldr	r3, [pc, #468]	@ (8002960 <HAL_RCC_ClockConfig+0x1ec>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d910      	bls.n	80027b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b72      	ldr	r3, [pc, #456]	@ (8002960 <HAL_RCC_ClockConfig+0x1ec>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 0207 	bic.w	r2, r3, #7
 800279e:	4970      	ldr	r1, [pc, #448]	@ (8002960 <HAL_RCC_ClockConfig+0x1ec>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002960 <HAL_RCC_ClockConfig+0x1ec>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0cf      	b.n	8002958 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d010      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	4b66      	ldr	r3, [pc, #408]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d908      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d4:	4b63      	ldr	r3, [pc, #396]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4960      	ldr	r1, [pc, #384]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d04c      	beq.n	800288c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d121      	bne.n	800284a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0a6      	b.n	8002958 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002812:	4b54      	ldr	r3, [pc, #336]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d115      	bne.n	800284a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e09a      	b.n	8002958 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800282a:	4b4e      	ldr	r3, [pc, #312]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e08e      	b.n	8002958 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800283a:	4b4a      	ldr	r3, [pc, #296]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e086      	b.n	8002958 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b46      	ldr	r3, [pc, #280]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4943      	ldr	r1, [pc, #268]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285c:	f7ff f86a 	bl	8001934 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7ff f866 	bl	8001934 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e06e      	b.n	8002958 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b3a      	ldr	r3, [pc, #232]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d010      	beq.n	80028ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d208      	bcs.n	80028ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	492b      	ldr	r1, [pc, #172]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ba:	4b29      	ldr	r3, [pc, #164]	@ (8002960 <HAL_RCC_ClockConfig+0x1ec>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d210      	bcs.n	80028ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c8:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <HAL_RCC_ClockConfig+0x1ec>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 0207 	bic.w	r2, r3, #7
 80028d0:	4923      	ldr	r1, [pc, #140]	@ (8002960 <HAL_RCC_ClockConfig+0x1ec>)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d8:	4b21      	ldr	r3, [pc, #132]	@ (8002960 <HAL_RCC_ClockConfig+0x1ec>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e036      	b.n	8002958 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	4918      	ldr	r1, [pc, #96]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002914:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4910      	ldr	r1, [pc, #64]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 8002924:	4313      	orrs	r3, r2
 8002926:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002928:	f000 f824 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	490b      	ldr	r1, [pc, #44]	@ (8002968 <HAL_RCC_ClockConfig+0x1f4>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
 8002944:	4a09      	ldr	r2, [pc, #36]	@ (800296c <HAL_RCC_ClockConfig+0x1f8>)
 8002946:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <HAL_RCC_ClockConfig+0x1fc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe ffa1 	bl	8001894 <HAL_InitTick>
 8002952:	4603      	mov	r3, r0
 8002954:	72fb      	strb	r3, [r7, #11]

  return status;
 8002956:	7afb      	ldrb	r3, [r7, #11]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40022000 	.word	0x40022000
 8002964:	40021000 	.word	0x40021000
 8002968:	08006634 	.word	0x08006634
 800296c:	20000000 	.word	0x20000000
 8002970:	20000004 	.word	0x20000004

08002974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	@ 0x24
 8002978:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002982:	4b3e      	ldr	r3, [pc, #248]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800298c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x34>
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d121      	bne.n	80029e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d11e      	bne.n	80029e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029a8:	4b34      	ldr	r3, [pc, #208]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029b4:	4b31      	ldr	r3, [pc, #196]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80029b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	e005      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029c4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10d      	bne.n	80029fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d102      	bne.n	80029f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ec:	4b25      	ldr	r3, [pc, #148]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	e004      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029f8:	4b23      	ldr	r3, [pc, #140]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x114>)
 80029fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d134      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a02:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d003      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0xac>
 8002a18:	e005      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a1c:	617b      	str	r3, [r7, #20]
      break;
 8002a1e:	e005      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a20:	4b19      	ldr	r3, [pc, #100]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a22:	617b      	str	r3, [r7, #20]
      break;
 8002a24:	e002      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	617b      	str	r3, [r7, #20]
      break;
 8002a2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a2c:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	3301      	adds	r3, #1
 8002a38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a3a:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	fb03 f202 	mul.w	r2, r3, r2
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a52:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	0e5b      	lsrs	r3, r3, #25
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3724      	adds	r7, #36	@ 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	0800664c 	.word	0x0800664c
 8002a84:	00f42400 	.word	0x00f42400
 8002a88:	007a1200 	.word	0x007a1200

08002a8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a90:	4b03      	ldr	r3, [pc, #12]	@ (8002aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000000 	.word	0x20000000

08002aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002aa8:	f7ff fff0 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4904      	ldr	r1, [pc, #16]	@ (8002acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	08006644 	.word	0x08006644

08002ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ad4:	f7ff ffda 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0adb      	lsrs	r3, r3, #11
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4904      	ldr	r1, [pc, #16]	@ (8002af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08006644 	.word	0x08006644

08002afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b08:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b14:	f7ff f9ee 	bl	8001ef4 <HAL_PWREx_GetVoltageRange>
 8002b18:	6178      	str	r0, [r7, #20]
 8002b1a:	e014      	b.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b1c:	4b25      	ldr	r3, [pc, #148]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b20:	4a24      	ldr	r2, [pc, #144]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b28:	4b22      	ldr	r3, [pc, #136]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b34:	f7ff f9de 	bl	8001ef4 <HAL_PWREx_GetVoltageRange>
 8002b38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b4c:	d10b      	bne.n	8002b66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b80      	cmp	r3, #128	@ 0x80
 8002b52:	d919      	bls.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b58:	d902      	bls.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	e013      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b60:	2301      	movs	r3, #1
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e010      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b80      	cmp	r3, #128	@ 0x80
 8002b6a:	d902      	bls.n	8002b72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	e00a      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b80      	cmp	r3, #128	@ 0x80
 8002b76:	d102      	bne.n	8002b7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b78:	2302      	movs	r3, #2
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	e004      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b70      	cmp	r3, #112	@ 0x70
 8002b82:	d101      	bne.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b84:	2301      	movs	r3, #1
 8002b86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 0207 	bic.w	r2, r3, #7
 8002b90:	4909      	ldr	r1, [pc, #36]	@ (8002bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b98:	4b07      	ldr	r3, [pc, #28]	@ (8002bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40022000 	.word	0x40022000

08002bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bc8:	2300      	movs	r3, #0
 8002bca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d041      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bdc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002be0:	d02a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002be2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002be6:	d824      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002be8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bec:	d008      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bf2:	d81e      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bfc:	d010      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bfe:	e018      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c00:	4b86      	ldr	r3, [pc, #536]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a85      	ldr	r2, [pc, #532]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c0c:	e015      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 fabb 	bl	8003190 <RCCEx_PLLSAI1_Config>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c1e:	e00c      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3320      	adds	r3, #32
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fba6 	bl	8003378 <RCCEx_PLLSAI2_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c30:	e003      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	74fb      	strb	r3, [r7, #19]
      break;
 8002c36:	e000      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c40:	4b76      	ldr	r3, [pc, #472]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c4e:	4973      	ldr	r1, [pc, #460]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c56:	e001      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d041      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c70:	d02a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c76:	d824      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c7c:	d008      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c82:	d81e      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c8c:	d010      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c8e:	e018      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c90:	4b62      	ldr	r3, [pc, #392]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a61      	ldr	r2, [pc, #388]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c9c:	e015      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fa73 	bl	8003190 <RCCEx_PLLSAI1_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cae:	e00c      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3320      	adds	r3, #32
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fb5e 	bl	8003378 <RCCEx_PLLSAI2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cc0:	e003      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	74fb      	strb	r3, [r7, #19]
      break;
 8002cc6:	e000      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cd0:	4b52      	ldr	r3, [pc, #328]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cde:	494f      	ldr	r1, [pc, #316]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ce6:	e001      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce8:	7cfb      	ldrb	r3, [r7, #19]
 8002cea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80a0 	beq.w	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cfe:	4b47      	ldr	r3, [pc, #284]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00d      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	4b41      	ldr	r3, [pc, #260]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	4a40      	ldr	r2, [pc, #256]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d20:	4b3e      	ldr	r3, [pc, #248]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d30:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a3a      	ldr	r2, [pc, #232]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d3c:	f7fe fdfa 	bl	8001934 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d42:	e009      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d44:	f7fe fdf6 	bl	8001934 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d902      	bls.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	74fb      	strb	r3, [r7, #19]
        break;
 8002d56:	e005      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d58:	4b31      	ldr	r3, [pc, #196]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0ef      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d15c      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01f      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d019      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d88:	4b24      	ldr	r3, [pc, #144]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d94:	4b21      	ldr	r3, [pc, #132]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9a:	4a20      	ldr	r2, [pc, #128]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002da4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002daa:	4a1c      	ldr	r2, [pc, #112]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002db4:	4a19      	ldr	r2, [pc, #100]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7fe fdb5 	bl	8001934 <HAL_GetTick>
 8002dca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dcc:	e00b      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe fdb1 	bl	8001934 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d902      	bls.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	74fb      	strb	r3, [r7, #19]
            break;
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ec      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfa:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e0a:	4904      	ldr	r1, [pc, #16]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e12:	e009      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e14:	7cfb      	ldrb	r3, [r7, #19]
 8002e16:	74bb      	strb	r3, [r7, #18]
 8002e18:	e006      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e28:	7c7b      	ldrb	r3, [r7, #17]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d105      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2e:	4b9e      	ldr	r3, [pc, #632]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e32:	4a9d      	ldr	r2, [pc, #628]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e46:	4b98      	ldr	r3, [pc, #608]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4c:	f023 0203 	bic.w	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e54:	4994      	ldr	r1, [pc, #592]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e68:	4b8f      	ldr	r3, [pc, #572]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6e:	f023 020c 	bic.w	r2, r3, #12
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e76:	498c      	ldr	r1, [pc, #560]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e8a:	4b87      	ldr	r3, [pc, #540]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	4983      	ldr	r1, [pc, #524]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eac:	4b7e      	ldr	r3, [pc, #504]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	497b      	ldr	r1, [pc, #492]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ece:	4b76      	ldr	r3, [pc, #472]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002edc:	4972      	ldr	r1, [pc, #456]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ef0:	4b6d      	ldr	r3, [pc, #436]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	496a      	ldr	r1, [pc, #424]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f12:	4b65      	ldr	r3, [pc, #404]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f20:	4961      	ldr	r1, [pc, #388]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f34:	4b5c      	ldr	r3, [pc, #368]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f42:	4959      	ldr	r1, [pc, #356]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f56:	4b54      	ldr	r3, [pc, #336]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f64:	4950      	ldr	r1, [pc, #320]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f78:	4b4b      	ldr	r3, [pc, #300]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f86:	4948      	ldr	r1, [pc, #288]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f9a:	4b43      	ldr	r3, [pc, #268]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	493f      	ldr	r1, [pc, #252]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d028      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fca:	4937      	ldr	r1, [pc, #220]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fda:	d106      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fdc:	4b32      	ldr	r3, [pc, #200]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4a31      	ldr	r2, [pc, #196]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fe6:	60d3      	str	r3, [r2, #12]
 8002fe8:	e011      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ff2:	d10c      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f8c8 	bl	8003190 <RCCEx_PLLSAI1_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800300a:	7cfb      	ldrb	r3, [r7, #19]
 800300c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d028      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800301a:	4b23      	ldr	r3, [pc, #140]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003020:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003028:	491f      	ldr	r1, [pc, #124]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003038:	d106      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800303a:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	4a1a      	ldr	r2, [pc, #104]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003040:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003044:	60d3      	str	r3, [r2, #12]
 8003046:	e011      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003050:	d10c      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3304      	adds	r3, #4
 8003056:	2101      	movs	r1, #1
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f899 	bl	8003190 <RCCEx_PLLSAI1_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003062:	7cfb      	ldrb	r3, [r7, #19]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d02b      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003078:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003086:	4908      	ldr	r1, [pc, #32]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003096:	d109      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003098:	4b03      	ldr	r3, [pc, #12]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a02      	ldr	r2, [pc, #8]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030a2:	60d3      	str	r3, [r2, #12]
 80030a4:	e014      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f867 	bl	8003190 <RCCEx_PLLSAI1_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c6:	7cfb      	ldrb	r3, [r7, #19]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d02f      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030dc:	4b2b      	ldr	r3, [pc, #172]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030ea:	4928      	ldr	r1, [pc, #160]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030fa:	d10d      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	2102      	movs	r1, #2
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f844 	bl	8003190 <RCCEx_PLLSAI1_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d014      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	74bb      	strb	r3, [r7, #18]
 8003116:	e011      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800311c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003120:	d10c      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3320      	adds	r3, #32
 8003126:	2102      	movs	r1, #2
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f925 	bl	8003378 <RCCEx_PLLSAI2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003132:	7cfb      	ldrb	r3, [r7, #19]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003148:	4b10      	ldr	r3, [pc, #64]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003156:	490d      	ldr	r1, [pc, #52]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800316a:	4b08      	ldr	r3, [pc, #32]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003170:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800317a:	4904      	ldr	r1, [pc, #16]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003182:	7cbb      	ldrb	r3, [r7, #18]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000

08003190 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800319e:	4b75      	ldr	r3, [pc, #468]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d018      	beq.n	80031dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031aa:	4b72      	ldr	r3, [pc, #456]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f003 0203 	and.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d10d      	bne.n	80031d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
       ||
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
       ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d047      	beq.n	8003266 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
 80031da:	e044      	b.n	8003266 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d018      	beq.n	8003216 <RCCEx_PLLSAI1_Config+0x86>
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d825      	bhi.n	8003234 <RCCEx_PLLSAI1_Config+0xa4>
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d002      	beq.n	80031f2 <RCCEx_PLLSAI1_Config+0x62>
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d009      	beq.n	8003204 <RCCEx_PLLSAI1_Config+0x74>
 80031f0:	e020      	b.n	8003234 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031f2:	4b60      	ldr	r3, [pc, #384]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11d      	bne.n	800323a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003202:	e01a      	b.n	800323a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003204:	4b5b      	ldr	r3, [pc, #364]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d116      	bne.n	800323e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003214:	e013      	b.n	800323e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003216:	4b57      	ldr	r3, [pc, #348]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003222:	4b54      	ldr	r3, [pc, #336]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003232:	e006      	b.n	8003242 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
      break;
 8003238:	e004      	b.n	8003244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800323a:	bf00      	nop
 800323c:	e002      	b.n	8003244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800323e:	bf00      	nop
 8003240:	e000      	b.n	8003244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003242:	bf00      	nop
    }

    if(status == HAL_OK)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10d      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800324a:	4b4a      	ldr	r3, [pc, #296]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6819      	ldr	r1, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	430b      	orrs	r3, r1
 8003260:	4944      	ldr	r1, [pc, #272]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d17d      	bne.n	8003368 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800326c:	4b41      	ldr	r3, [pc, #260]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a40      	ldr	r2, [pc, #256]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003272:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003278:	f7fe fb5c 	bl	8001934 <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800327e:	e009      	b.n	8003294 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003280:	f7fe fb58 	bl	8001934 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d902      	bls.n	8003294 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	73fb      	strb	r3, [r7, #15]
        break;
 8003292:	e005      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003294:	4b37      	ldr	r3, [pc, #220]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ef      	bne.n	8003280 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d160      	bne.n	8003368 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d111      	bne.n	80032d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ac:	4b31      	ldr	r3, [pc, #196]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80032b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6892      	ldr	r2, [r2, #8]
 80032bc:	0211      	lsls	r1, r2, #8
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68d2      	ldr	r2, [r2, #12]
 80032c2:	0912      	lsrs	r2, r2, #4
 80032c4:	0452      	lsls	r2, r2, #17
 80032c6:	430a      	orrs	r2, r1
 80032c8:	492a      	ldr	r1, [pc, #168]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	610b      	str	r3, [r1, #16]
 80032ce:	e027      	b.n	8003320 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d112      	bne.n	80032fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d6:	4b27      	ldr	r3, [pc, #156]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80032de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6892      	ldr	r2, [r2, #8]
 80032e6:	0211      	lsls	r1, r2, #8
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6912      	ldr	r2, [r2, #16]
 80032ec:	0852      	lsrs	r2, r2, #1
 80032ee:	3a01      	subs	r2, #1
 80032f0:	0552      	lsls	r2, r2, #21
 80032f2:	430a      	orrs	r2, r1
 80032f4:	491f      	ldr	r1, [pc, #124]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	610b      	str	r3, [r1, #16]
 80032fa:	e011      	b.n	8003320 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003304:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6892      	ldr	r2, [r2, #8]
 800330c:	0211      	lsls	r1, r2, #8
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6952      	ldr	r2, [r2, #20]
 8003312:	0852      	lsrs	r2, r2, #1
 8003314:	3a01      	subs	r2, #1
 8003316:	0652      	lsls	r2, r2, #25
 8003318:	430a      	orrs	r2, r1
 800331a:	4916      	ldr	r1, [pc, #88]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 800331c:	4313      	orrs	r3, r2
 800331e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003320:	4b14      	ldr	r3, [pc, #80]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a13      	ldr	r2, [pc, #76]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003326:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800332a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fe fb02 	bl	8001934 <HAL_GetTick>
 8003330:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003332:	e009      	b.n	8003348 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003334:	f7fe fafe 	bl	8001934 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d902      	bls.n	8003348 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	73fb      	strb	r3, [r7, #15]
          break;
 8003346:	e005      	b.n	8003354 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003348:	4b0a      	ldr	r3, [pc, #40]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ef      	beq.n	8003334 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800335a:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	4904      	ldr	r1, [pc, #16]	@ (8003374 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000

08003378 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003386:	4b6a      	ldr	r3, [pc, #424]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d018      	beq.n	80033c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003392:	4b67      	ldr	r3, [pc, #412]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0203 	and.w	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d10d      	bne.n	80033be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
       ||
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033aa:	4b61      	ldr	r3, [pc, #388]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
       ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d047      	beq.n	800344e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	e044      	b.n	800344e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d018      	beq.n	80033fe <RCCEx_PLLSAI2_Config+0x86>
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d825      	bhi.n	800341c <RCCEx_PLLSAI2_Config+0xa4>
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d002      	beq.n	80033da <RCCEx_PLLSAI2_Config+0x62>
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d009      	beq.n	80033ec <RCCEx_PLLSAI2_Config+0x74>
 80033d8:	e020      	b.n	800341c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033da:	4b55      	ldr	r3, [pc, #340]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d11d      	bne.n	8003422 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ea:	e01a      	b.n	8003422 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033ec:	4b50      	ldr	r3, [pc, #320]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d116      	bne.n	8003426 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fc:	e013      	b.n	8003426 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10f      	bne.n	800342a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800340a:	4b49      	ldr	r3, [pc, #292]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800341a:	e006      	b.n	800342a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      break;
 8003420:	e004      	b.n	800342c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800342a:	bf00      	nop
    }

    if(status == HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10d      	bne.n	800344e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003432:	4b3f      	ldr	r3, [pc, #252]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	430b      	orrs	r3, r1
 8003448:	4939      	ldr	r1, [pc, #228]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344a:	4313      	orrs	r3, r2
 800344c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d167      	bne.n	8003524 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003454:	4b36      	ldr	r3, [pc, #216]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a35      	ldr	r2, [pc, #212]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800345e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003460:	f7fe fa68 	bl	8001934 <HAL_GetTick>
 8003464:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003466:	e009      	b.n	800347c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003468:	f7fe fa64 	bl	8001934 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d902      	bls.n	800347c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	73fb      	strb	r3, [r7, #15]
        break;
 800347a:	e005      	b.n	8003488 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800347c:	4b2c      	ldr	r3, [pc, #176]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1ef      	bne.n	8003468 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d14a      	bne.n	8003524 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d111      	bne.n	80034b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003494:	4b26      	ldr	r3, [pc, #152]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800349c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6892      	ldr	r2, [r2, #8]
 80034a4:	0211      	lsls	r1, r2, #8
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68d2      	ldr	r2, [r2, #12]
 80034aa:	0912      	lsrs	r2, r2, #4
 80034ac:	0452      	lsls	r2, r2, #17
 80034ae:	430a      	orrs	r2, r1
 80034b0:	491f      	ldr	r1, [pc, #124]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	614b      	str	r3, [r1, #20]
 80034b6:	e011      	b.n	80034dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80034c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6892      	ldr	r2, [r2, #8]
 80034c8:	0211      	lsls	r1, r2, #8
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6912      	ldr	r2, [r2, #16]
 80034ce:	0852      	lsrs	r2, r2, #1
 80034d0:	3a01      	subs	r2, #1
 80034d2:	0652      	lsls	r2, r2, #25
 80034d4:	430a      	orrs	r2, r1
 80034d6:	4916      	ldr	r1, [pc, #88]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034dc:	4b14      	ldr	r3, [pc, #80]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a13      	ldr	r2, [pc, #76]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7fe fa24 	bl	8001934 <HAL_GetTick>
 80034ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034ee:	e009      	b.n	8003504 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034f0:	f7fe fa20 	bl	8001934 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d902      	bls.n	8003504 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	73fb      	strb	r3, [r7, #15]
          break;
 8003502:	e005      	b.n	8003510 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003504:	4b0a      	ldr	r3, [pc, #40]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ef      	beq.n	80034f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003516:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	4904      	ldr	r1, [pc, #16]	@ (8003530 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003520:	4313      	orrs	r3, r2
 8003522:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000

08003534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e049      	b.n	80035da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe f814 	bl	8001588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f000 ff90 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d001      	beq.n	80035fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e047      	b.n	800368c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a23      	ldr	r2, [pc, #140]	@ (8003698 <HAL_TIM_Base_Start+0xb4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01d      	beq.n	800364a <HAL_TIM_Base_Start+0x66>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003616:	d018      	beq.n	800364a <HAL_TIM_Base_Start+0x66>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1f      	ldr	r2, [pc, #124]	@ (800369c <HAL_TIM_Base_Start+0xb8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_TIM_Base_Start+0x66>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1e      	ldr	r2, [pc, #120]	@ (80036a0 <HAL_TIM_Base_Start+0xbc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00e      	beq.n	800364a <HAL_TIM_Base_Start+0x66>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1c      	ldr	r2, [pc, #112]	@ (80036a4 <HAL_TIM_Base_Start+0xc0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d009      	beq.n	800364a <HAL_TIM_Base_Start+0x66>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1b      	ldr	r2, [pc, #108]	@ (80036a8 <HAL_TIM_Base_Start+0xc4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_TIM_Base_Start+0x66>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a19      	ldr	r2, [pc, #100]	@ (80036ac <HAL_TIM_Base_Start+0xc8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d115      	bne.n	8003676 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	4b17      	ldr	r3, [pc, #92]	@ (80036b0 <HAL_TIM_Base_Start+0xcc>)
 8003652:	4013      	ands	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b06      	cmp	r3, #6
 800365a:	d015      	beq.n	8003688 <HAL_TIM_Base_Start+0xa4>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003662:	d011      	beq.n	8003688 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003674:	e008      	b.n	8003688 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e000      	b.n	800368a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003688:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40000c00 	.word	0x40000c00
 80036a8:	40013400 	.word	0x40013400
 80036ac:	40014000 	.word	0x40014000
 80036b0:	00010007 	.word	0x00010007

080036b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e049      	b.n	800375a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f841 	bl	8003762 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f000 fed0 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_TIM_PWM_Start+0x24>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e03c      	b.n	8003816 <HAL_TIM_PWM_Start+0x9e>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d109      	bne.n	80037b6 <HAL_TIM_PWM_Start+0x3e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	bf14      	ite	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	2300      	moveq	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e02f      	b.n	8003816 <HAL_TIM_PWM_Start+0x9e>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d109      	bne.n	80037d0 <HAL_TIM_PWM_Start+0x58>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e022      	b.n	8003816 <HAL_TIM_PWM_Start+0x9e>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d109      	bne.n	80037ea <HAL_TIM_PWM_Start+0x72>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e015      	b.n	8003816 <HAL_TIM_PWM_Start+0x9e>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d109      	bne.n	8003804 <HAL_TIM_PWM_Start+0x8c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	bf14      	ite	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	2300      	moveq	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e008      	b.n	8003816 <HAL_TIM_PWM_Start+0x9e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e09c      	b.n	8003958 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <HAL_TIM_PWM_Start+0xb6>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800382c:	e023      	b.n	8003876 <HAL_TIM_PWM_Start+0xfe>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d104      	bne.n	800383e <HAL_TIM_PWM_Start+0xc6>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800383c:	e01b      	b.n	8003876 <HAL_TIM_PWM_Start+0xfe>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d104      	bne.n	800384e <HAL_TIM_PWM_Start+0xd6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800384c:	e013      	b.n	8003876 <HAL_TIM_PWM_Start+0xfe>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0xe6>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800385c:	e00b      	b.n	8003876 <HAL_TIM_PWM_Start+0xfe>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b10      	cmp	r3, #16
 8003862:	d104      	bne.n	800386e <HAL_TIM_PWM_Start+0xf6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800386c:	e003      	b.n	8003876 <HAL_TIM_PWM_Start+0xfe>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2201      	movs	r2, #1
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f001 fb38 	bl	8004ef4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a35      	ldr	r2, [pc, #212]	@ (8003960 <HAL_TIM_PWM_Start+0x1e8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x13e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a34      	ldr	r2, [pc, #208]	@ (8003964 <HAL_TIM_PWM_Start+0x1ec>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00e      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x13e>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a32      	ldr	r2, [pc, #200]	@ (8003968 <HAL_TIM_PWM_Start+0x1f0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d009      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x13e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a31      	ldr	r2, [pc, #196]	@ (800396c <HAL_TIM_PWM_Start+0x1f4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d004      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x13e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003970 <HAL_TIM_PWM_Start+0x1f8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <HAL_TIM_PWM_Start+0x142>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <HAL_TIM_PWM_Start+0x144>
 80038ba:	2300      	movs	r3, #0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a22      	ldr	r2, [pc, #136]	@ (8003960 <HAL_TIM_PWM_Start+0x1e8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01d      	beq.n	8003916 <HAL_TIM_PWM_Start+0x19e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e2:	d018      	beq.n	8003916 <HAL_TIM_PWM_Start+0x19e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a22      	ldr	r2, [pc, #136]	@ (8003974 <HAL_TIM_PWM_Start+0x1fc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <HAL_TIM_PWM_Start+0x19e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a21      	ldr	r2, [pc, #132]	@ (8003978 <HAL_TIM_PWM_Start+0x200>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00e      	beq.n	8003916 <HAL_TIM_PWM_Start+0x19e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1f      	ldr	r2, [pc, #124]	@ (800397c <HAL_TIM_PWM_Start+0x204>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d009      	beq.n	8003916 <HAL_TIM_PWM_Start+0x19e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a17      	ldr	r2, [pc, #92]	@ (8003964 <HAL_TIM_PWM_Start+0x1ec>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d004      	beq.n	8003916 <HAL_TIM_PWM_Start+0x19e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a15      	ldr	r2, [pc, #84]	@ (8003968 <HAL_TIM_PWM_Start+0x1f0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d115      	bne.n	8003942 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4b18      	ldr	r3, [pc, #96]	@ (8003980 <HAL_TIM_PWM_Start+0x208>)
 800391e:	4013      	ands	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b06      	cmp	r3, #6
 8003926:	d015      	beq.n	8003954 <HAL_TIM_PWM_Start+0x1dc>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800392e:	d011      	beq.n	8003954 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003940:	e008      	b.n	8003954 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e000      	b.n	8003956 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003954:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40013400 	.word	0x40013400
 8003968:	40014000 	.word	0x40014000
 800396c:	40014400 	.word	0x40014400
 8003970:	40014800 	.word	0x40014800
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00
 8003980:	00010007 	.word	0x00010007

08003984 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e049      	b.n	8003a2a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fda0 	bl	80014f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f000 fd68 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d104      	bne.n	8003a52 <HAL_TIM_IC_Start_IT+0x1e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e023      	b.n	8003a9a <HAL_TIM_IC_Start_IT+0x66>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d104      	bne.n	8003a62 <HAL_TIM_IC_Start_IT+0x2e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	e01b      	b.n	8003a9a <HAL_TIM_IC_Start_IT+0x66>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d104      	bne.n	8003a72 <HAL_TIM_IC_Start_IT+0x3e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	e013      	b.n	8003a9a <HAL_TIM_IC_Start_IT+0x66>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_IC_Start_IT+0x4e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	e00b      	b.n	8003a9a <HAL_TIM_IC_Start_IT+0x66>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d104      	bne.n	8003a92 <HAL_TIM_IC_Start_IT+0x5e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	e003      	b.n	8003a9a <HAL_TIM_IC_Start_IT+0x66>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d104      	bne.n	8003aac <HAL_TIM_IC_Start_IT+0x78>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	e013      	b.n	8003ad4 <HAL_TIM_IC_Start_IT+0xa0>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d104      	bne.n	8003abc <HAL_TIM_IC_Start_IT+0x88>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e00b      	b.n	8003ad4 <HAL_TIM_IC_Start_IT+0xa0>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d104      	bne.n	8003acc <HAL_TIM_IC_Start_IT+0x98>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e003      	b.n	8003ad4 <HAL_TIM_IC_Start_IT+0xa0>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ad6:	7bbb      	ldrb	r3, [r7, #14]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d102      	bne.n	8003ae2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003adc:	7b7b      	ldrb	r3, [r7, #13]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0dd      	b.n	8003ca2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <HAL_TIM_IC_Start_IT+0xc2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003af4:	e023      	b.n	8003b3e <HAL_TIM_IC_Start_IT+0x10a>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d104      	bne.n	8003b06 <HAL_TIM_IC_Start_IT+0xd2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b04:	e01b      	b.n	8003b3e <HAL_TIM_IC_Start_IT+0x10a>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d104      	bne.n	8003b16 <HAL_TIM_IC_Start_IT+0xe2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b14:	e013      	b.n	8003b3e <HAL_TIM_IC_Start_IT+0x10a>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d104      	bne.n	8003b26 <HAL_TIM_IC_Start_IT+0xf2>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b24:	e00b      	b.n	8003b3e <HAL_TIM_IC_Start_IT+0x10a>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d104      	bne.n	8003b36 <HAL_TIM_IC_Start_IT+0x102>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b34:	e003      	b.n	8003b3e <HAL_TIM_IC_Start_IT+0x10a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d104      	bne.n	8003b4e <HAL_TIM_IC_Start_IT+0x11a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b4c:	e013      	b.n	8003b76 <HAL_TIM_IC_Start_IT+0x142>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d104      	bne.n	8003b5e <HAL_TIM_IC_Start_IT+0x12a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b5c:	e00b      	b.n	8003b76 <HAL_TIM_IC_Start_IT+0x142>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d104      	bne.n	8003b6e <HAL_TIM_IC_Start_IT+0x13a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b6c:	e003      	b.n	8003b76 <HAL_TIM_IC_Start_IT+0x142>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b0c      	cmp	r3, #12
 8003b7a:	d841      	bhi.n	8003c00 <HAL_TIM_IC_Start_IT+0x1cc>
 8003b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <HAL_TIM_IC_Start_IT+0x150>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003bb9 	.word	0x08003bb9
 8003b88:	08003c01 	.word	0x08003c01
 8003b8c:	08003c01 	.word	0x08003c01
 8003b90:	08003c01 	.word	0x08003c01
 8003b94:	08003bcb 	.word	0x08003bcb
 8003b98:	08003c01 	.word	0x08003c01
 8003b9c:	08003c01 	.word	0x08003c01
 8003ba0:	08003c01 	.word	0x08003c01
 8003ba4:	08003bdd 	.word	0x08003bdd
 8003ba8:	08003c01 	.word	0x08003c01
 8003bac:	08003c01 	.word	0x08003c01
 8003bb0:	08003c01 	.word	0x08003c01
 8003bb4:	08003bef 	.word	0x08003bef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0202 	orr.w	r2, r2, #2
 8003bc6:	60da      	str	r2, [r3, #12]
      break;
 8003bc8:	e01d      	b.n	8003c06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0204 	orr.w	r2, r2, #4
 8003bd8:	60da      	str	r2, [r3, #12]
      break;
 8003bda:	e014      	b.n	8003c06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0208 	orr.w	r2, r2, #8
 8003bea:	60da      	str	r2, [r3, #12]
      break;
 8003bec:	e00b      	b.n	8003c06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0210 	orr.w	r2, r2, #16
 8003bfc:	60da      	str	r2, [r3, #12]
      break;
 8003bfe:	e002      	b.n	8003c06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
      break;
 8003c04:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d149      	bne.n	8003ca0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2201      	movs	r2, #1
 8003c12:	6839      	ldr	r1, [r7, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 f96d 	bl	8004ef4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a23      	ldr	r2, [pc, #140]	@ (8003cac <HAL_TIM_IC_Start_IT+0x278>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d01d      	beq.n	8003c60 <HAL_TIM_IC_Start_IT+0x22c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2c:	d018      	beq.n	8003c60 <HAL_TIM_IC_Start_IT+0x22c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb0 <HAL_TIM_IC_Start_IT+0x27c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <HAL_TIM_IC_Start_IT+0x22c>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <HAL_TIM_IC_Start_IT+0x280>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00e      	beq.n	8003c60 <HAL_TIM_IC_Start_IT+0x22c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb8 <HAL_TIM_IC_Start_IT+0x284>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_TIM_IC_Start_IT+0x22c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1a      	ldr	r2, [pc, #104]	@ (8003cbc <HAL_TIM_IC_Start_IT+0x288>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_TIM_IC_Start_IT+0x22c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a19      	ldr	r2, [pc, #100]	@ (8003cc0 <HAL_TIM_IC_Start_IT+0x28c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d115      	bne.n	8003c8c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	4b17      	ldr	r3, [pc, #92]	@ (8003cc4 <HAL_TIM_IC_Start_IT+0x290>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b06      	cmp	r3, #6
 8003c70:	d015      	beq.n	8003c9e <HAL_TIM_IC_Start_IT+0x26a>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d011      	beq.n	8003c9e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8a:	e008      	b.n	8003c9e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e000      	b.n	8003ca0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	40000c00 	.word	0x40000c00
 8003cbc:	40013400 	.word	0x40013400
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	00010007 	.word	0x00010007

08003cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d020      	beq.n	8003d2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01b      	beq.n	8003d2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0202 	mvn.w	r2, #2
 8003cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd f870 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 8003d18:	e005      	b.n	8003d26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fb9e 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fba5 	bl	8004470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d020      	beq.n	8003d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01b      	beq.n	8003d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0204 	mvn.w	r2, #4
 8003d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd f84a 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 8003d64:	e005      	b.n	8003d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fb78 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fb7f 	bl	8004470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d020      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01b      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0208 	mvn.w	r2, #8
 8003d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2204      	movs	r2, #4
 8003d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd f824 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fb52 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fb59 	bl	8004470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d020      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01b      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0210 	mvn.w	r2, #16
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2208      	movs	r2, #8
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fc fffe 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fb2c 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fb33 	bl	8004470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00c      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0201 	mvn.w	r2, #1
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fb0a 	bl	8004448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f001 f906 	bl	8005064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f001 f8fe 	bl	8005078 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00c      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 faf2 	bl	8004484 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0220 	mvn.w	r2, #32
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f001 f8c6 	bl	8005050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e088      	b.n	8003ffc <HAL_TIM_IC_ConfigChannel+0x130>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003f08:	f000 fe36 	bl	8004b78 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 020c 	bic.w	r2, r2, #12
 8003f1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6999      	ldr	r1, [r3, #24]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	619a      	str	r2, [r3, #24]
 8003f2e:	e060      	b.n	8003ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d11c      	bne.n	8003f70 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003f46:	f000 feb4 	bl	8004cb2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003f58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6999      	ldr	r1, [r3, #24]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	021a      	lsls	r2, r3, #8
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	619a      	str	r2, [r3, #24]
 8003f6e:	e040      	b.n	8003ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d11b      	bne.n	8003fae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003f86:	f000 ff01 	bl	8004d8c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 020c 	bic.w	r2, r2, #12
 8003f98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69d9      	ldr	r1, [r3, #28]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	61da      	str	r2, [r3, #28]
 8003fac:	e021      	b.n	8003ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b0c      	cmp	r3, #12
 8003fb2:	d11c      	bne.n	8003fee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003fc4:	f000 ff1e 	bl	8004e04 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003fd6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69d9      	ldr	r1, [r3, #28]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	021a      	lsls	r2, r3, #8
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	61da      	str	r2, [r3, #28]
 8003fec:	e001      	b.n	8003ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800401e:	2302      	movs	r3, #2
 8004020:	e0ff      	b.n	8004222 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b14      	cmp	r3, #20
 800402e:	f200 80f0 	bhi.w	8004212 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004032:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	0800408d 	.word	0x0800408d
 800403c:	08004213 	.word	0x08004213
 8004040:	08004213 	.word	0x08004213
 8004044:	08004213 	.word	0x08004213
 8004048:	080040cd 	.word	0x080040cd
 800404c:	08004213 	.word	0x08004213
 8004050:	08004213 	.word	0x08004213
 8004054:	08004213 	.word	0x08004213
 8004058:	0800410f 	.word	0x0800410f
 800405c:	08004213 	.word	0x08004213
 8004060:	08004213 	.word	0x08004213
 8004064:	08004213 	.word	0x08004213
 8004068:	0800414f 	.word	0x0800414f
 800406c:	08004213 	.word	0x08004213
 8004070:	08004213 	.word	0x08004213
 8004074:	08004213 	.word	0x08004213
 8004078:	08004191 	.word	0x08004191
 800407c:	08004213 	.word	0x08004213
 8004080:	08004213 	.word	0x08004213
 8004084:	08004213 	.word	0x08004213
 8004088:	080041d1 	.word	0x080041d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fa9a 	bl	80045cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0208 	orr.w	r2, r2, #8
 80040a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0204 	bic.w	r2, r2, #4
 80040b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6999      	ldr	r1, [r3, #24]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	619a      	str	r2, [r3, #24]
      break;
 80040ca:	e0a5      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fb0a 	bl	80046ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6999      	ldr	r1, [r3, #24]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	021a      	lsls	r2, r3, #8
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	619a      	str	r2, [r3, #24]
      break;
 800410c:	e084      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fb73 	bl	8004800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0208 	orr.w	r2, r2, #8
 8004128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0204 	bic.w	r2, r2, #4
 8004138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69d9      	ldr	r1, [r3, #28]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	61da      	str	r2, [r3, #28]
      break;
 800414c:	e064      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fbdb 	bl	8004910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69da      	ldr	r2, [r3, #28]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69d9      	ldr	r1, [r3, #28]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	021a      	lsls	r2, r3, #8
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	61da      	str	r2, [r3, #28]
      break;
 800418e:	e043      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fc24 	bl	80049e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0208 	orr.w	r2, r2, #8
 80041aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0204 	bic.w	r2, r2, #4
 80041ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80041ce:	e023      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fc68 	bl	8004aac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	021a      	lsls	r2, r3, #8
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004210:	e002      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
      break;
 8004216:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop

0800422c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_TIM_ConfigClockSource+0x1c>
 8004244:	2302      	movs	r3, #2
 8004246:	e0b6      	b.n	80043b6 <HAL_TIM_ConfigClockSource+0x18a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004266:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800426a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004284:	d03e      	beq.n	8004304 <HAL_TIM_ConfigClockSource+0xd8>
 8004286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800428a:	f200 8087 	bhi.w	800439c <HAL_TIM_ConfigClockSource+0x170>
 800428e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004292:	f000 8086 	beq.w	80043a2 <HAL_TIM_ConfigClockSource+0x176>
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429a:	d87f      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x170>
 800429c:	2b70      	cmp	r3, #112	@ 0x70
 800429e:	d01a      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0xaa>
 80042a0:	2b70      	cmp	r3, #112	@ 0x70
 80042a2:	d87b      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x170>
 80042a4:	2b60      	cmp	r3, #96	@ 0x60
 80042a6:	d050      	beq.n	800434a <HAL_TIM_ConfigClockSource+0x11e>
 80042a8:	2b60      	cmp	r3, #96	@ 0x60
 80042aa:	d877      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x170>
 80042ac:	2b50      	cmp	r3, #80	@ 0x50
 80042ae:	d03c      	beq.n	800432a <HAL_TIM_ConfigClockSource+0xfe>
 80042b0:	2b50      	cmp	r3, #80	@ 0x50
 80042b2:	d873      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x170>
 80042b4:	2b40      	cmp	r3, #64	@ 0x40
 80042b6:	d058      	beq.n	800436a <HAL_TIM_ConfigClockSource+0x13e>
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d86f      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x170>
 80042bc:	2b30      	cmp	r3, #48	@ 0x30
 80042be:	d064      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
 80042c0:	2b30      	cmp	r3, #48	@ 0x30
 80042c2:	d86b      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x170>
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d060      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d867      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x170>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d05c      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d05a      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
 80042d4:	e062      	b.n	800439c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042e6:	f000 fde5 	bl	8004eb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	609a      	str	r2, [r3, #8]
      break;
 8004302:	e04f      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004314:	f000 fdce 	bl	8004eb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004326:	609a      	str	r2, [r3, #8]
      break;
 8004328:	e03c      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004336:	461a      	mov	r2, r3
 8004338:	f000 fc8c 	bl	8004c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2150      	movs	r1, #80	@ 0x50
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fd9b 	bl	8004e7e <TIM_ITRx_SetConfig>
      break;
 8004348:	e02c      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004356:	461a      	mov	r2, r3
 8004358:	f000 fce8 	bl	8004d2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2160      	movs	r1, #96	@ 0x60
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fd8b 	bl	8004e7e <TIM_ITRx_SetConfig>
      break;
 8004368:	e01c      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004376:	461a      	mov	r2, r3
 8004378:	f000 fc6c 	bl	8004c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2140      	movs	r1, #64	@ 0x40
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fd7b 	bl	8004e7e <TIM_ITRx_SetConfig>
      break;
 8004388:	e00c      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f000 fd72 	bl	8004e7e <TIM_ITRx_SetConfig>
      break;
 800439a:	e003      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
      break;
 80043a0:	e000      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	d831      	bhi.n	8004438 <HAL_TIM_ReadCapturedValue+0x78>
 80043d4:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <HAL_TIM_ReadCapturedValue+0x1c>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004439 	.word	0x08004439
 80043e4:	08004439 	.word	0x08004439
 80043e8:	08004439 	.word	0x08004439
 80043ec:	0800441b 	.word	0x0800441b
 80043f0:	08004439 	.word	0x08004439
 80043f4:	08004439 	.word	0x08004439
 80043f8:	08004439 	.word	0x08004439
 80043fc:	08004425 	.word	0x08004425
 8004400:	08004439 	.word	0x08004439
 8004404:	08004439 	.word	0x08004439
 8004408:	08004439 	.word	0x08004439
 800440c:	0800442f 	.word	0x0800442f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004416:	60fb      	str	r3, [r7, #12]

      break;
 8004418:	e00f      	b.n	800443a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004420:	60fb      	str	r3, [r7, #12]

      break;
 8004422:	e00a      	b.n	800443a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442a:	60fb      	str	r3, [r7, #12]

      break;
 800442c:	e005      	b.n	800443a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	60fb      	str	r3, [r7, #12]

      break;
 8004436:	e000      	b.n	800443a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004438:	bf00      	nop
  }

  return tmpreg;
 800443a:	68fb      	ldr	r3, [r7, #12]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a40      	ldr	r2, [pc, #256]	@ (80045ac <TIM_Base_SetConfig+0x114>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b6:	d00f      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a3d      	ldr	r2, [pc, #244]	@ (80045b0 <TIM_Base_SetConfig+0x118>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a3c      	ldr	r2, [pc, #240]	@ (80045b4 <TIM_Base_SetConfig+0x11c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3b      	ldr	r2, [pc, #236]	@ (80045b8 <TIM_Base_SetConfig+0x120>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3a      	ldr	r2, [pc, #232]	@ (80045bc <TIM_Base_SetConfig+0x124>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d108      	bne.n	80044ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a2f      	ldr	r2, [pc, #188]	@ (80045ac <TIM_Base_SetConfig+0x114>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01f      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f8:	d01b      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2c      	ldr	r2, [pc, #176]	@ (80045b0 <TIM_Base_SetConfig+0x118>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d017      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2b      	ldr	r2, [pc, #172]	@ (80045b4 <TIM_Base_SetConfig+0x11c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2a      	ldr	r2, [pc, #168]	@ (80045b8 <TIM_Base_SetConfig+0x120>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00f      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a29      	ldr	r2, [pc, #164]	@ (80045bc <TIM_Base_SetConfig+0x124>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00b      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a28      	ldr	r2, [pc, #160]	@ (80045c0 <TIM_Base_SetConfig+0x128>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a27      	ldr	r2, [pc, #156]	@ (80045c4 <TIM_Base_SetConfig+0x12c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a26      	ldr	r2, [pc, #152]	@ (80045c8 <TIM_Base_SetConfig+0x130>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a10      	ldr	r2, [pc, #64]	@ (80045ac <TIM_Base_SetConfig+0x114>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00f      	beq.n	8004590 <TIM_Base_SetConfig+0xf8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a12      	ldr	r2, [pc, #72]	@ (80045bc <TIM_Base_SetConfig+0x124>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00b      	beq.n	8004590 <TIM_Base_SetConfig+0xf8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a11      	ldr	r2, [pc, #68]	@ (80045c0 <TIM_Base_SetConfig+0x128>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d007      	beq.n	8004590 <TIM_Base_SetConfig+0xf8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a10      	ldr	r2, [pc, #64]	@ (80045c4 <TIM_Base_SetConfig+0x12c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_Base_SetConfig+0xf8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a0f      	ldr	r2, [pc, #60]	@ (80045c8 <TIM_Base_SetConfig+0x130>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d103      	bne.n	8004598 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	615a      	str	r2, [r3, #20]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800
 80045b8:	40000c00 	.word	0x40000c00
 80045bc:	40013400 	.word	0x40013400
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800

080045cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f023 0201 	bic.w	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f023 0302 	bic.w	r3, r3, #2
 8004618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a2c      	ldr	r2, [pc, #176]	@ (80046d8 <TIM_OC1_SetConfig+0x10c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00f      	beq.n	800464c <TIM_OC1_SetConfig+0x80>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a2b      	ldr	r2, [pc, #172]	@ (80046dc <TIM_OC1_SetConfig+0x110>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00b      	beq.n	800464c <TIM_OC1_SetConfig+0x80>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a2a      	ldr	r2, [pc, #168]	@ (80046e0 <TIM_OC1_SetConfig+0x114>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <TIM_OC1_SetConfig+0x80>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a29      	ldr	r2, [pc, #164]	@ (80046e4 <TIM_OC1_SetConfig+0x118>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_OC1_SetConfig+0x80>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a28      	ldr	r2, [pc, #160]	@ (80046e8 <TIM_OC1_SetConfig+0x11c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d10c      	bne.n	8004666 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f023 0308 	bic.w	r3, r3, #8
 8004652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f023 0304 	bic.w	r3, r3, #4
 8004664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a1b      	ldr	r2, [pc, #108]	@ (80046d8 <TIM_OC1_SetConfig+0x10c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00f      	beq.n	800468e <TIM_OC1_SetConfig+0xc2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1a      	ldr	r2, [pc, #104]	@ (80046dc <TIM_OC1_SetConfig+0x110>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00b      	beq.n	800468e <TIM_OC1_SetConfig+0xc2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a19      	ldr	r2, [pc, #100]	@ (80046e0 <TIM_OC1_SetConfig+0x114>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d007      	beq.n	800468e <TIM_OC1_SetConfig+0xc2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a18      	ldr	r2, [pc, #96]	@ (80046e4 <TIM_OC1_SetConfig+0x118>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d003      	beq.n	800468e <TIM_OC1_SetConfig+0xc2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a17      	ldr	r2, [pc, #92]	@ (80046e8 <TIM_OC1_SetConfig+0x11c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d111      	bne.n	80046b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800469c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40013400 	.word	0x40013400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800

080046ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f023 0210 	bic.w	r2, r3, #16
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800471a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f023 0320 	bic.w	r3, r3, #32
 800473a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a28      	ldr	r2, [pc, #160]	@ (80047ec <TIM_OC2_SetConfig+0x100>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_OC2_SetConfig+0x6c>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a27      	ldr	r2, [pc, #156]	@ (80047f0 <TIM_OC2_SetConfig+0x104>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d10d      	bne.n	8004774 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800475e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a1d      	ldr	r2, [pc, #116]	@ (80047ec <TIM_OC2_SetConfig+0x100>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00f      	beq.n	800479c <TIM_OC2_SetConfig+0xb0>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a1c      	ldr	r2, [pc, #112]	@ (80047f0 <TIM_OC2_SetConfig+0x104>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00b      	beq.n	800479c <TIM_OC2_SetConfig+0xb0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a1b      	ldr	r2, [pc, #108]	@ (80047f4 <TIM_OC2_SetConfig+0x108>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <TIM_OC2_SetConfig+0xb0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a1a      	ldr	r2, [pc, #104]	@ (80047f8 <TIM_OC2_SetConfig+0x10c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_OC2_SetConfig+0xb0>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a19      	ldr	r2, [pc, #100]	@ (80047fc <TIM_OC2_SetConfig+0x110>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d113      	bne.n	80047c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	bf00      	nop
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40012c00 	.word	0x40012c00
 80047f0:	40013400 	.word	0x40013400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40014400 	.word	0x40014400
 80047fc:	40014800 	.word	0x40014800

08004800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800484c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	021b      	lsls	r3, r3, #8
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a27      	ldr	r2, [pc, #156]	@ (80048fc <TIM_OC3_SetConfig+0xfc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d003      	beq.n	800486a <TIM_OC3_SetConfig+0x6a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a26      	ldr	r2, [pc, #152]	@ (8004900 <TIM_OC3_SetConfig+0x100>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d10d      	bne.n	8004886 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a1c      	ldr	r2, [pc, #112]	@ (80048fc <TIM_OC3_SetConfig+0xfc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00f      	beq.n	80048ae <TIM_OC3_SetConfig+0xae>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1b      	ldr	r2, [pc, #108]	@ (8004900 <TIM_OC3_SetConfig+0x100>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00b      	beq.n	80048ae <TIM_OC3_SetConfig+0xae>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1a      	ldr	r2, [pc, #104]	@ (8004904 <TIM_OC3_SetConfig+0x104>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <TIM_OC3_SetConfig+0xae>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a19      	ldr	r2, [pc, #100]	@ (8004908 <TIM_OC3_SetConfig+0x108>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <TIM_OC3_SetConfig+0xae>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a18      	ldr	r2, [pc, #96]	@ (800490c <TIM_OC3_SetConfig+0x10c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d113      	bne.n	80048d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	621a      	str	r2, [r3, #32]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40013400 	.word	0x40013400
 8004904:	40014000 	.word	0x40014000
 8004908:	40014400 	.word	0x40014400
 800490c:	40014800 	.word	0x40014800

08004910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800494a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800495e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	031b      	lsls	r3, r3, #12
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a18      	ldr	r2, [pc, #96]	@ (80049d0 <TIM_OC4_SetConfig+0xc0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00f      	beq.n	8004994 <TIM_OC4_SetConfig+0x84>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a17      	ldr	r2, [pc, #92]	@ (80049d4 <TIM_OC4_SetConfig+0xc4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_OC4_SetConfig+0x84>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a16      	ldr	r2, [pc, #88]	@ (80049d8 <TIM_OC4_SetConfig+0xc8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <TIM_OC4_SetConfig+0x84>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a15      	ldr	r2, [pc, #84]	@ (80049dc <TIM_OC4_SetConfig+0xcc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_OC4_SetConfig+0x84>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a14      	ldr	r2, [pc, #80]	@ (80049e0 <TIM_OC4_SetConfig+0xd0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d109      	bne.n	80049a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800499a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	019b      	lsls	r3, r3, #6
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40013400 	.word	0x40013400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800

080049e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004a28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	041b      	lsls	r3, r3, #16
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a17      	ldr	r2, [pc, #92]	@ (8004a98 <TIM_OC5_SetConfig+0xb4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00f      	beq.n	8004a5e <TIM_OC5_SetConfig+0x7a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <TIM_OC5_SetConfig+0xb8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00b      	beq.n	8004a5e <TIM_OC5_SetConfig+0x7a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <TIM_OC5_SetConfig+0xbc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d007      	beq.n	8004a5e <TIM_OC5_SetConfig+0x7a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a14      	ldr	r2, [pc, #80]	@ (8004aa4 <TIM_OC5_SetConfig+0xc0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d003      	beq.n	8004a5e <TIM_OC5_SetConfig+0x7a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a13      	ldr	r2, [pc, #76]	@ (8004aa8 <TIM_OC5_SetConfig+0xc4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d109      	bne.n	8004a72 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	621a      	str	r2, [r3, #32]
}
 8004a8c:	bf00      	nop
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40013400 	.word	0x40013400
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40014400 	.word	0x40014400
 8004aa8:	40014800 	.word	0x40014800

08004aac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	051b      	lsls	r3, r3, #20
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a18      	ldr	r2, [pc, #96]	@ (8004b64 <TIM_OC6_SetConfig+0xb8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00f      	beq.n	8004b28 <TIM_OC6_SetConfig+0x7c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a17      	ldr	r2, [pc, #92]	@ (8004b68 <TIM_OC6_SetConfig+0xbc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00b      	beq.n	8004b28 <TIM_OC6_SetConfig+0x7c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a16      	ldr	r2, [pc, #88]	@ (8004b6c <TIM_OC6_SetConfig+0xc0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d007      	beq.n	8004b28 <TIM_OC6_SetConfig+0x7c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a15      	ldr	r2, [pc, #84]	@ (8004b70 <TIM_OC6_SetConfig+0xc4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_OC6_SetConfig+0x7c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a14      	ldr	r2, [pc, #80]	@ (8004b74 <TIM_OC6_SetConfig+0xc8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d109      	bne.n	8004b3c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	029b      	lsls	r3, r3, #10
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40012c00 	.word	0x40012c00
 8004b68:	40013400 	.word	0x40013400
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40014400 	.word	0x40014400
 8004b74:	40014800 	.word	0x40014800

08004b78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f023 0201 	bic.w	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a26      	ldr	r2, [pc, #152]	@ (8004c3c <TIM_TI1_SetConfig+0xc4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d017      	beq.n	8004bd6 <TIM_TI1_SetConfig+0x5e>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bac:	d013      	beq.n	8004bd6 <TIM_TI1_SetConfig+0x5e>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a23      	ldr	r2, [pc, #140]	@ (8004c40 <TIM_TI1_SetConfig+0xc8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00f      	beq.n	8004bd6 <TIM_TI1_SetConfig+0x5e>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4a22      	ldr	r2, [pc, #136]	@ (8004c44 <TIM_TI1_SetConfig+0xcc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00b      	beq.n	8004bd6 <TIM_TI1_SetConfig+0x5e>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4a21      	ldr	r2, [pc, #132]	@ (8004c48 <TIM_TI1_SetConfig+0xd0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d007      	beq.n	8004bd6 <TIM_TI1_SetConfig+0x5e>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4a20      	ldr	r2, [pc, #128]	@ (8004c4c <TIM_TI1_SetConfig+0xd4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d003      	beq.n	8004bd6 <TIM_TI1_SetConfig+0x5e>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c50 <TIM_TI1_SetConfig+0xd8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d101      	bne.n	8004bda <TIM_TI1_SetConfig+0x62>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <TIM_TI1_SetConfig+0x64>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e003      	b.n	8004bfa <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f023 030a 	bic.w	r3, r3, #10
 8004c14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f003 030a 	and.w	r3, r3, #10
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40000800 	.word	0x40000800
 8004c48:	40000c00 	.word	0x40000c00
 8004c4c:	40013400 	.word	0x40013400
 8004c50:	40014000 	.word	0x40014000

08004c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	f023 0201 	bic.w	r2, r3, #1
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f023 030a 	bic.w	r3, r3, #10
 8004c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b087      	sub	sp, #28
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f023 0210 	bic.w	r2, r3, #16
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	031b      	lsls	r3, r3, #12
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d04:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	621a      	str	r2, [r3, #32]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0210 	bic.w	r2, r3, #16
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	031b      	lsls	r3, r3, #12
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	621a      	str	r2, [r3, #32]
}
 8004d80:	bf00      	nop
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f023 0303 	bic.w	r3, r3, #3
 8004db8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	621a      	str	r2, [r3, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	031b      	lsls	r3, r3, #12
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004e56:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	031b      	lsls	r3, r3, #12
 8004e5c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	621a      	str	r2, [r3, #32]
}
 8004e72:	bf00      	nop
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b085      	sub	sp, #20
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f043 0307 	orr.w	r3, r3, #7
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	609a      	str	r2, [r3, #8]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	021a      	lsls	r2, r3, #8
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	609a      	str	r2, [r3, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	371c      	adds	r7, #28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2201      	movs	r2, #1
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1a      	ldr	r2, [r3, #32]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	401a      	ands	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1a      	ldr	r2, [r3, #32]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
	...

08004f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e068      	b.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2d      	ldr	r2, [pc, #180]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d108      	bne.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01d      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fca:	d018      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8005040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1a      	ldr	r2, [pc, #104]	@ (8005044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a18      	ldr	r2, [pc, #96]	@ (8005048 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a13      	ldr	r2, [pc, #76]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a14      	ldr	r2, [pc, #80]	@ (800504c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d10c      	bne.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	4313      	orrs	r3, r2
 800500e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40013400 	.word	0x40013400
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40014000 	.word	0x40014000

08005050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e040      	b.n	8005120 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fc fad0 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2224      	movs	r2, #36	@ 0x24
 80050b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0201 	bic.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fb6a 	bl	80057ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f8af 	bl	800523c <UART_SetConfig>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e01b      	b.n	8005120 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fbe9 	bl	80058f0 <UART_CheckIdleState>
 800511e:	4603      	mov	r3, r0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	@ 0x28
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	4613      	mov	r3, r2
 8005136:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800513c:	2b20      	cmp	r3, #32
 800513e:	d177      	bne.n	8005230 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_UART_Transmit+0x24>
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e070      	b.n	8005232 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2221      	movs	r2, #33	@ 0x21
 800515c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800515e:	f7fc fbe9 	bl	8001934 <HAL_GetTick>
 8005162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	88fa      	ldrh	r2, [r7, #6]
 8005168:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800517c:	d108      	bne.n	8005190 <HAL_UART_Transmit+0x68>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d104      	bne.n	8005190 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	e003      	b.n	8005198 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005198:	e02f      	b.n	80051fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2200      	movs	r2, #0
 80051a2:	2180      	movs	r1, #128	@ 0x80
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fc4b 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e03b      	b.n	8005232 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	881a      	ldrh	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051cc:	b292      	uxth	r2, r2
 80051ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	3302      	adds	r3, #2
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e007      	b.n	80051e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	781a      	ldrb	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3301      	adds	r3, #1
 80051e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1c9      	bne.n	800519a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	2140      	movs	r1, #64	@ 0x40
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fc15 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e005      	b.n	8005232 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800523c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005240:	b08a      	sub	sp, #40	@ 0x28
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	431a      	orrs	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	431a      	orrs	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	4313      	orrs	r3, r2
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4ba4      	ldr	r3, [pc, #656]	@ (80054fc <UART_SetConfig+0x2c0>)
 800526c:	4013      	ands	r3, r2
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005274:	430b      	orrs	r3, r1
 8005276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a99      	ldr	r2, [pc, #612]	@ (8005500 <UART_SetConfig+0x2c4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d004      	beq.n	80052a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a4:	4313      	orrs	r3, r2
 80052a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b8:	430a      	orrs	r2, r1
 80052ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a90      	ldr	r2, [pc, #576]	@ (8005504 <UART_SetConfig+0x2c8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d126      	bne.n	8005314 <UART_SetConfig+0xd8>
 80052c6:	4b90      	ldr	r3, [pc, #576]	@ (8005508 <UART_SetConfig+0x2cc>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d81b      	bhi.n	800530c <UART_SetConfig+0xd0>
 80052d4:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <UART_SetConfig+0xa0>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	080052ed 	.word	0x080052ed
 80052e0:	080052fd 	.word	0x080052fd
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	08005305 	.word	0x08005305
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f2:	e116      	b.n	8005522 <UART_SetConfig+0x2e6>
 80052f4:	2302      	movs	r3, #2
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052fa:	e112      	b.n	8005522 <UART_SetConfig+0x2e6>
 80052fc:	2304      	movs	r3, #4
 80052fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005302:	e10e      	b.n	8005522 <UART_SetConfig+0x2e6>
 8005304:	2308      	movs	r3, #8
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800530a:	e10a      	b.n	8005522 <UART_SetConfig+0x2e6>
 800530c:	2310      	movs	r3, #16
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005312:	e106      	b.n	8005522 <UART_SetConfig+0x2e6>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a7c      	ldr	r2, [pc, #496]	@ (800550c <UART_SetConfig+0x2d0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d138      	bne.n	8005390 <UART_SetConfig+0x154>
 800531e:	4b7a      	ldr	r3, [pc, #488]	@ (8005508 <UART_SetConfig+0x2cc>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005324:	f003 030c 	and.w	r3, r3, #12
 8005328:	2b0c      	cmp	r3, #12
 800532a:	d82d      	bhi.n	8005388 <UART_SetConfig+0x14c>
 800532c:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <UART_SetConfig+0xf8>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005369 	.word	0x08005369
 8005338:	08005389 	.word	0x08005389
 800533c:	08005389 	.word	0x08005389
 8005340:	08005389 	.word	0x08005389
 8005344:	08005379 	.word	0x08005379
 8005348:	08005389 	.word	0x08005389
 800534c:	08005389 	.word	0x08005389
 8005350:	08005389 	.word	0x08005389
 8005354:	08005371 	.word	0x08005371
 8005358:	08005389 	.word	0x08005389
 800535c:	08005389 	.word	0x08005389
 8005360:	08005389 	.word	0x08005389
 8005364:	08005381 	.word	0x08005381
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800536e:	e0d8      	b.n	8005522 <UART_SetConfig+0x2e6>
 8005370:	2302      	movs	r3, #2
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005376:	e0d4      	b.n	8005522 <UART_SetConfig+0x2e6>
 8005378:	2304      	movs	r3, #4
 800537a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800537e:	e0d0      	b.n	8005522 <UART_SetConfig+0x2e6>
 8005380:	2308      	movs	r3, #8
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005386:	e0cc      	b.n	8005522 <UART_SetConfig+0x2e6>
 8005388:	2310      	movs	r3, #16
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800538e:	e0c8      	b.n	8005522 <UART_SetConfig+0x2e6>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a5e      	ldr	r2, [pc, #376]	@ (8005510 <UART_SetConfig+0x2d4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d125      	bne.n	80053e6 <UART_SetConfig+0x1aa>
 800539a:	4b5b      	ldr	r3, [pc, #364]	@ (8005508 <UART_SetConfig+0x2cc>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053a4:	2b30      	cmp	r3, #48	@ 0x30
 80053a6:	d016      	beq.n	80053d6 <UART_SetConfig+0x19a>
 80053a8:	2b30      	cmp	r3, #48	@ 0x30
 80053aa:	d818      	bhi.n	80053de <UART_SetConfig+0x1a2>
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d00a      	beq.n	80053c6 <UART_SetConfig+0x18a>
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d814      	bhi.n	80053de <UART_SetConfig+0x1a2>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <UART_SetConfig+0x182>
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	d008      	beq.n	80053ce <UART_SetConfig+0x192>
 80053bc:	e00f      	b.n	80053de <UART_SetConfig+0x1a2>
 80053be:	2300      	movs	r3, #0
 80053c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053c4:	e0ad      	b.n	8005522 <UART_SetConfig+0x2e6>
 80053c6:	2302      	movs	r3, #2
 80053c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053cc:	e0a9      	b.n	8005522 <UART_SetConfig+0x2e6>
 80053ce:	2304      	movs	r3, #4
 80053d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053d4:	e0a5      	b.n	8005522 <UART_SetConfig+0x2e6>
 80053d6:	2308      	movs	r3, #8
 80053d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053dc:	e0a1      	b.n	8005522 <UART_SetConfig+0x2e6>
 80053de:	2310      	movs	r3, #16
 80053e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053e4:	e09d      	b.n	8005522 <UART_SetConfig+0x2e6>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a4a      	ldr	r2, [pc, #296]	@ (8005514 <UART_SetConfig+0x2d8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d125      	bne.n	800543c <UART_SetConfig+0x200>
 80053f0:	4b45      	ldr	r3, [pc, #276]	@ (8005508 <UART_SetConfig+0x2cc>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80053fc:	d016      	beq.n	800542c <UART_SetConfig+0x1f0>
 80053fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005400:	d818      	bhi.n	8005434 <UART_SetConfig+0x1f8>
 8005402:	2b80      	cmp	r3, #128	@ 0x80
 8005404:	d00a      	beq.n	800541c <UART_SetConfig+0x1e0>
 8005406:	2b80      	cmp	r3, #128	@ 0x80
 8005408:	d814      	bhi.n	8005434 <UART_SetConfig+0x1f8>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <UART_SetConfig+0x1d8>
 800540e:	2b40      	cmp	r3, #64	@ 0x40
 8005410:	d008      	beq.n	8005424 <UART_SetConfig+0x1e8>
 8005412:	e00f      	b.n	8005434 <UART_SetConfig+0x1f8>
 8005414:	2300      	movs	r3, #0
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800541a:	e082      	b.n	8005522 <UART_SetConfig+0x2e6>
 800541c:	2302      	movs	r3, #2
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005422:	e07e      	b.n	8005522 <UART_SetConfig+0x2e6>
 8005424:	2304      	movs	r3, #4
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800542a:	e07a      	b.n	8005522 <UART_SetConfig+0x2e6>
 800542c:	2308      	movs	r3, #8
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005432:	e076      	b.n	8005522 <UART_SetConfig+0x2e6>
 8005434:	2310      	movs	r3, #16
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800543a:	e072      	b.n	8005522 <UART_SetConfig+0x2e6>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a35      	ldr	r2, [pc, #212]	@ (8005518 <UART_SetConfig+0x2dc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d12a      	bne.n	800549c <UART_SetConfig+0x260>
 8005446:	4b30      	ldr	r3, [pc, #192]	@ (8005508 <UART_SetConfig+0x2cc>)
 8005448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005450:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005454:	d01a      	beq.n	800548c <UART_SetConfig+0x250>
 8005456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800545a:	d81b      	bhi.n	8005494 <UART_SetConfig+0x258>
 800545c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005460:	d00c      	beq.n	800547c <UART_SetConfig+0x240>
 8005462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005466:	d815      	bhi.n	8005494 <UART_SetConfig+0x258>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <UART_SetConfig+0x238>
 800546c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005470:	d008      	beq.n	8005484 <UART_SetConfig+0x248>
 8005472:	e00f      	b.n	8005494 <UART_SetConfig+0x258>
 8005474:	2300      	movs	r3, #0
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547a:	e052      	b.n	8005522 <UART_SetConfig+0x2e6>
 800547c:	2302      	movs	r3, #2
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005482:	e04e      	b.n	8005522 <UART_SetConfig+0x2e6>
 8005484:	2304      	movs	r3, #4
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800548a:	e04a      	b.n	8005522 <UART_SetConfig+0x2e6>
 800548c:	2308      	movs	r3, #8
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005492:	e046      	b.n	8005522 <UART_SetConfig+0x2e6>
 8005494:	2310      	movs	r3, #16
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800549a:	e042      	b.n	8005522 <UART_SetConfig+0x2e6>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a17      	ldr	r2, [pc, #92]	@ (8005500 <UART_SetConfig+0x2c4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d13a      	bne.n	800551c <UART_SetConfig+0x2e0>
 80054a6:	4b18      	ldr	r3, [pc, #96]	@ (8005508 <UART_SetConfig+0x2cc>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054b4:	d01a      	beq.n	80054ec <UART_SetConfig+0x2b0>
 80054b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054ba:	d81b      	bhi.n	80054f4 <UART_SetConfig+0x2b8>
 80054bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054c0:	d00c      	beq.n	80054dc <UART_SetConfig+0x2a0>
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054c6:	d815      	bhi.n	80054f4 <UART_SetConfig+0x2b8>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <UART_SetConfig+0x298>
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d0:	d008      	beq.n	80054e4 <UART_SetConfig+0x2a8>
 80054d2:	e00f      	b.n	80054f4 <UART_SetConfig+0x2b8>
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054da:	e022      	b.n	8005522 <UART_SetConfig+0x2e6>
 80054dc:	2302      	movs	r3, #2
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054e2:	e01e      	b.n	8005522 <UART_SetConfig+0x2e6>
 80054e4:	2304      	movs	r3, #4
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ea:	e01a      	b.n	8005522 <UART_SetConfig+0x2e6>
 80054ec:	2308      	movs	r3, #8
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054f2:	e016      	b.n	8005522 <UART_SetConfig+0x2e6>
 80054f4:	2310      	movs	r3, #16
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054fa:	e012      	b.n	8005522 <UART_SetConfig+0x2e6>
 80054fc:	efff69f3 	.word	0xefff69f3
 8005500:	40008000 	.word	0x40008000
 8005504:	40013800 	.word	0x40013800
 8005508:	40021000 	.word	0x40021000
 800550c:	40004400 	.word	0x40004400
 8005510:	40004800 	.word	0x40004800
 8005514:	40004c00 	.word	0x40004c00
 8005518:	40005000 	.word	0x40005000
 800551c:	2310      	movs	r3, #16
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a9f      	ldr	r2, [pc, #636]	@ (80057a4 <UART_SetConfig+0x568>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d17a      	bne.n	8005622 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800552c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005530:	2b08      	cmp	r3, #8
 8005532:	d824      	bhi.n	800557e <UART_SetConfig+0x342>
 8005534:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <UART_SetConfig+0x300>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	08005561 	.word	0x08005561
 8005540:	0800557f 	.word	0x0800557f
 8005544:	08005569 	.word	0x08005569
 8005548:	0800557f 	.word	0x0800557f
 800554c:	0800556f 	.word	0x0800556f
 8005550:	0800557f 	.word	0x0800557f
 8005554:	0800557f 	.word	0x0800557f
 8005558:	0800557f 	.word	0x0800557f
 800555c:	08005577 	.word	0x08005577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005560:	f7fd faa0 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8005564:	61f8      	str	r0, [r7, #28]
        break;
 8005566:	e010      	b.n	800558a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005568:	4b8f      	ldr	r3, [pc, #572]	@ (80057a8 <UART_SetConfig+0x56c>)
 800556a:	61fb      	str	r3, [r7, #28]
        break;
 800556c:	e00d      	b.n	800558a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556e:	f7fd fa01 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8005572:	61f8      	str	r0, [r7, #28]
        break;
 8005574:	e009      	b.n	800558a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800557a:	61fb      	str	r3, [r7, #28]
        break;
 800557c:	e005      	b.n	800558a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005588:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80fb 	beq.w	8005788 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	4613      	mov	r3, r2
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	4413      	add	r3, r2
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d305      	bcc.n	80055ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d903      	bls.n	80055b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055b4:	e0e8      	b.n	8005788 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	2200      	movs	r2, #0
 80055ba:	461c      	mov	r4, r3
 80055bc:	4615      	mov	r5, r2
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	022b      	lsls	r3, r5, #8
 80055c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055cc:	0222      	lsls	r2, r4, #8
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	6849      	ldr	r1, [r1, #4]
 80055d2:	0849      	lsrs	r1, r1, #1
 80055d4:	2000      	movs	r0, #0
 80055d6:	4688      	mov	r8, r1
 80055d8:	4681      	mov	r9, r0
 80055da:	eb12 0a08 	adds.w	sl, r2, r8
 80055de:	eb43 0b09 	adc.w	fp, r3, r9
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f0:	4650      	mov	r0, sl
 80055f2:	4659      	mov	r1, fp
 80055f4:	f7fb fa32 	bl	8000a5c <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4613      	mov	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005606:	d308      	bcc.n	800561a <UART_SetConfig+0x3de>
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800560e:	d204      	bcs.n	800561a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	60da      	str	r2, [r3, #12]
 8005618:	e0b6      	b.n	8005788 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005620:	e0b2      	b.n	8005788 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800562a:	d15e      	bne.n	80056ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800562c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005630:	2b08      	cmp	r3, #8
 8005632:	d828      	bhi.n	8005686 <UART_SetConfig+0x44a>
 8005634:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <UART_SetConfig+0x400>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	08005661 	.word	0x08005661
 8005640:	08005669 	.word	0x08005669
 8005644:	08005671 	.word	0x08005671
 8005648:	08005687 	.word	0x08005687
 800564c:	08005677 	.word	0x08005677
 8005650:	08005687 	.word	0x08005687
 8005654:	08005687 	.word	0x08005687
 8005658:	08005687 	.word	0x08005687
 800565c:	0800567f 	.word	0x0800567f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005660:	f7fd fa20 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8005664:	61f8      	str	r0, [r7, #28]
        break;
 8005666:	e014      	b.n	8005692 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005668:	f7fd fa32 	bl	8002ad0 <HAL_RCC_GetPCLK2Freq>
 800566c:	61f8      	str	r0, [r7, #28]
        break;
 800566e:	e010      	b.n	8005692 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005670:	4b4d      	ldr	r3, [pc, #308]	@ (80057a8 <UART_SetConfig+0x56c>)
 8005672:	61fb      	str	r3, [r7, #28]
        break;
 8005674:	e00d      	b.n	8005692 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005676:	f7fd f97d 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 800567a:	61f8      	str	r0, [r7, #28]
        break;
 800567c:	e009      	b.n	8005692 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800567e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005682:	61fb      	str	r3, [r7, #28]
        break;
 8005684:	e005      	b.n	8005692 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d077      	beq.n	8005788 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	005a      	lsls	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	085b      	lsrs	r3, r3, #1
 80056a2:	441a      	add	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b0f      	cmp	r3, #15
 80056b2:	d916      	bls.n	80056e2 <UART_SetConfig+0x4a6>
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ba:	d212      	bcs.n	80056e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f023 030f 	bic.w	r3, r3, #15
 80056c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	085b      	lsrs	r3, r3, #1
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	8afb      	ldrh	r3, [r7, #22]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	8afa      	ldrh	r2, [r7, #22]
 80056de:	60da      	str	r2, [r3, #12]
 80056e0:	e052      	b.n	8005788 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80056e8:	e04e      	b.n	8005788 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d827      	bhi.n	8005742 <UART_SetConfig+0x506>
 80056f2:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <UART_SetConfig+0x4bc>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	0800571d 	.word	0x0800571d
 80056fc:	08005725 	.word	0x08005725
 8005700:	0800572d 	.word	0x0800572d
 8005704:	08005743 	.word	0x08005743
 8005708:	08005733 	.word	0x08005733
 800570c:	08005743 	.word	0x08005743
 8005710:	08005743 	.word	0x08005743
 8005714:	08005743 	.word	0x08005743
 8005718:	0800573b 	.word	0x0800573b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800571c:	f7fd f9c2 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8005720:	61f8      	str	r0, [r7, #28]
        break;
 8005722:	e014      	b.n	800574e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005724:	f7fd f9d4 	bl	8002ad0 <HAL_RCC_GetPCLK2Freq>
 8005728:	61f8      	str	r0, [r7, #28]
        break;
 800572a:	e010      	b.n	800574e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800572c:	4b1e      	ldr	r3, [pc, #120]	@ (80057a8 <UART_SetConfig+0x56c>)
 800572e:	61fb      	str	r3, [r7, #28]
        break;
 8005730:	e00d      	b.n	800574e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005732:	f7fd f91f 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8005736:	61f8      	str	r0, [r7, #28]
        break;
 8005738:	e009      	b.n	800574e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800573a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573e:	61fb      	str	r3, [r7, #28]
        break;
 8005740:	e005      	b.n	800574e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800574c:	bf00      	nop
    }

    if (pclk != 0U)
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d019      	beq.n	8005788 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	085a      	lsrs	r2, r3, #1
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	441a      	add	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	fbb2 f3f3 	udiv	r3, r2, r3
 8005766:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b0f      	cmp	r3, #15
 800576c:	d909      	bls.n	8005782 <UART_SetConfig+0x546>
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005774:	d205      	bcs.n	8005782 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60da      	str	r2, [r3, #12]
 8005780:	e002      	b.n	8005788 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005794:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005798:	4618      	mov	r0, r3
 800579a:	3728      	adds	r7, #40	@ 0x28
 800579c:	46bd      	mov	sp, r7
 800579e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057a2:	bf00      	nop
 80057a4:	40008000 	.word	0x40008000
 80057a8:	00f42400 	.word	0x00f42400

080057ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01a      	beq.n	80058c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058aa:	d10a      	bne.n	80058c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  }
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b098      	sub	sp, #96	@ 0x60
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005900:	f7fc f818 	bl	8001934 <HAL_GetTick>
 8005904:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b08      	cmp	r3, #8
 8005912:	d12e      	bne.n	8005972 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800591c:	2200      	movs	r2, #0
 800591e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f88c 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d021      	beq.n	8005972 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800593c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005942:	653b      	str	r3, [r7, #80]	@ 0x50
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800594c:	647b      	str	r3, [r7, #68]	@ 0x44
 800594e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800595a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e6      	bne.n	800592e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e062      	b.n	8005a38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b04      	cmp	r3, #4
 800597e:	d149      	bne.n	8005a14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005980:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005988:	2200      	movs	r2, #0
 800598a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f856 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d03c      	beq.n	8005a14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	623b      	str	r3, [r7, #32]
   return(result);
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e6      	bne.n	800599a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	60fb      	str	r3, [r7, #12]
   return(result);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3308      	adds	r3, #8
 80059ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059ec:	61fa      	str	r2, [r7, #28]
 80059ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	69fa      	ldr	r2, [r7, #28]
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	617b      	str	r3, [r7, #20]
   return(result);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e5      	bne.n	80059cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e011      	b.n	8005a38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3758      	adds	r7, #88	@ 0x58
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a50:	e049      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d045      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a5a:	f7fb ff6b 	bl	8001934 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d302      	bcc.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e048      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d031      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d110      	bne.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2208      	movs	r2, #8
 8005a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f838 	bl	8005b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e029      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005abc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ac0:	d111      	bne.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f81e 	bl	8005b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e00f      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4013      	ands	r3, r2
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	bf0c      	ite	eq
 8005af6:	2301      	moveq	r3, #1
 8005af8:	2300      	movne	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d0a6      	beq.n	8005a52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b095      	sub	sp, #84	@ 0x54
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b34:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e6      	bne.n	8005b16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3308      	adds	r3, #8
 8005b66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e5      	bne.n	8005b48 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d118      	bne.n	8005bb6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f023 0310 	bic.w	r3, r3, #16
 8005b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6979      	ldr	r1, [r7, #20]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e6      	bne.n	8005b84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bca:	bf00      	nop
 8005bcc:	3754      	adds	r7, #84	@ 0x54
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <__itoa>:
 8005bd6:	1e93      	subs	r3, r2, #2
 8005bd8:	2b22      	cmp	r3, #34	@ 0x22
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	460c      	mov	r4, r1
 8005bde:	d904      	bls.n	8005bea <__itoa+0x14>
 8005be0:	2300      	movs	r3, #0
 8005be2:	700b      	strb	r3, [r1, #0]
 8005be4:	461c      	mov	r4, r3
 8005be6:	4620      	mov	r0, r4
 8005be8:	bd10      	pop	{r4, pc}
 8005bea:	2a0a      	cmp	r2, #10
 8005bec:	d109      	bne.n	8005c02 <__itoa+0x2c>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	da07      	bge.n	8005c02 <__itoa+0x2c>
 8005bf2:	232d      	movs	r3, #45	@ 0x2d
 8005bf4:	700b      	strb	r3, [r1, #0]
 8005bf6:	4240      	negs	r0, r0
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	4421      	add	r1, r4
 8005bfc:	f000 f806 	bl	8005c0c <__utoa>
 8005c00:	e7f1      	b.n	8005be6 <__itoa+0x10>
 8005c02:	2100      	movs	r1, #0
 8005c04:	e7f9      	b.n	8005bfa <__itoa+0x24>

08005c06 <itoa>:
 8005c06:	f7ff bfe6 	b.w	8005bd6 <__itoa>
	...

08005c0c <__utoa>:
 8005c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0e:	4c1f      	ldr	r4, [pc, #124]	@ (8005c8c <__utoa+0x80>)
 8005c10:	b08b      	sub	sp, #44	@ 0x2c
 8005c12:	4605      	mov	r5, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	466e      	mov	r6, sp
 8005c18:	f104 0c20 	add.w	ip, r4, #32
 8005c1c:	6820      	ldr	r0, [r4, #0]
 8005c1e:	6861      	ldr	r1, [r4, #4]
 8005c20:	4637      	mov	r7, r6
 8005c22:	c703      	stmia	r7!, {r0, r1}
 8005c24:	3408      	adds	r4, #8
 8005c26:	4564      	cmp	r4, ip
 8005c28:	463e      	mov	r6, r7
 8005c2a:	d1f7      	bne.n	8005c1c <__utoa+0x10>
 8005c2c:	7921      	ldrb	r1, [r4, #4]
 8005c2e:	7139      	strb	r1, [r7, #4]
 8005c30:	1e91      	subs	r1, r2, #2
 8005c32:	6820      	ldr	r0, [r4, #0]
 8005c34:	6038      	str	r0, [r7, #0]
 8005c36:	2922      	cmp	r1, #34	@ 0x22
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	d904      	bls.n	8005c48 <__utoa+0x3c>
 8005c3e:	7019      	strb	r1, [r3, #0]
 8005c40:	460b      	mov	r3, r1
 8005c42:	4618      	mov	r0, r3
 8005c44:	b00b      	add	sp, #44	@ 0x2c
 8005c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c48:	1e58      	subs	r0, r3, #1
 8005c4a:	4684      	mov	ip, r0
 8005c4c:	fbb5 f7f2 	udiv	r7, r5, r2
 8005c50:	fb02 5617 	mls	r6, r2, r7, r5
 8005c54:	3628      	adds	r6, #40	@ 0x28
 8005c56:	446e      	add	r6, sp
 8005c58:	460c      	mov	r4, r1
 8005c5a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005c5e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005c62:	462e      	mov	r6, r5
 8005c64:	42b2      	cmp	r2, r6
 8005c66:	f101 0101 	add.w	r1, r1, #1
 8005c6a:	463d      	mov	r5, r7
 8005c6c:	d9ee      	bls.n	8005c4c <__utoa+0x40>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	545a      	strb	r2, [r3, r1]
 8005c72:	1919      	adds	r1, r3, r4
 8005c74:	1aa5      	subs	r5, r4, r2
 8005c76:	42aa      	cmp	r2, r5
 8005c78:	dae3      	bge.n	8005c42 <__utoa+0x36>
 8005c7a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005c7e:	780e      	ldrb	r6, [r1, #0]
 8005c80:	7006      	strb	r6, [r0, #0]
 8005c82:	3201      	adds	r2, #1
 8005c84:	f801 5901 	strb.w	r5, [r1], #-1
 8005c88:	e7f4      	b.n	8005c74 <__utoa+0x68>
 8005c8a:	bf00      	nop
 8005c8c:	0800667c 	.word	0x0800667c

08005c90 <siprintf>:
 8005c90:	b40e      	push	{r1, r2, r3}
 8005c92:	b500      	push	{lr}
 8005c94:	b09c      	sub	sp, #112	@ 0x70
 8005c96:	ab1d      	add	r3, sp, #116	@ 0x74
 8005c98:	9002      	str	r0, [sp, #8]
 8005c9a:	9006      	str	r0, [sp, #24]
 8005c9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ca0:	4809      	ldr	r0, [pc, #36]	@ (8005cc8 <siprintf+0x38>)
 8005ca2:	9107      	str	r1, [sp, #28]
 8005ca4:	9104      	str	r1, [sp, #16]
 8005ca6:	4909      	ldr	r1, [pc, #36]	@ (8005ccc <siprintf+0x3c>)
 8005ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cac:	9105      	str	r1, [sp, #20]
 8005cae:	6800      	ldr	r0, [r0, #0]
 8005cb0:	9301      	str	r3, [sp, #4]
 8005cb2:	a902      	add	r1, sp, #8
 8005cb4:	f000 f9a4 	bl	8006000 <_svfiprintf_r>
 8005cb8:	9b02      	ldr	r3, [sp, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	b01c      	add	sp, #112	@ 0x70
 8005cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cc4:	b003      	add	sp, #12
 8005cc6:	4770      	bx	lr
 8005cc8:	2000000c 	.word	0x2000000c
 8005ccc:	ffff0208 	.word	0xffff0208

08005cd0 <memset>:
 8005cd0:	4402      	add	r2, r0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d100      	bne.n	8005cda <memset+0xa>
 8005cd8:	4770      	bx	lr
 8005cda:	f803 1b01 	strb.w	r1, [r3], #1
 8005cde:	e7f9      	b.n	8005cd4 <memset+0x4>

08005ce0 <strcat>:
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	7814      	ldrb	r4, [r2, #0]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	3201      	adds	r2, #1
 8005cea:	2c00      	cmp	r4, #0
 8005cec:	d1fa      	bne.n	8005ce4 <strcat+0x4>
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cf8:	2a00      	cmp	r2, #0
 8005cfa:	d1f9      	bne.n	8005cf0 <strcat+0x10>
 8005cfc:	bd10      	pop	{r4, pc}
	...

08005d00 <__errno>:
 8005d00:	4b01      	ldr	r3, [pc, #4]	@ (8005d08 <__errno+0x8>)
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	2000000c 	.word	0x2000000c

08005d0c <__libc_init_array>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8005d44 <__libc_init_array+0x38>)
 8005d10:	4c0d      	ldr	r4, [pc, #52]	@ (8005d48 <__libc_init_array+0x3c>)
 8005d12:	1b64      	subs	r4, r4, r5
 8005d14:	10a4      	asrs	r4, r4, #2
 8005d16:	2600      	movs	r6, #0
 8005d18:	42a6      	cmp	r6, r4
 8005d1a:	d109      	bne.n	8005d30 <__libc_init_array+0x24>
 8005d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d4c <__libc_init_array+0x40>)
 8005d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8005d50 <__libc_init_array+0x44>)
 8005d20:	f000 fc66 	bl	80065f0 <_init>
 8005d24:	1b64      	subs	r4, r4, r5
 8005d26:	10a4      	asrs	r4, r4, #2
 8005d28:	2600      	movs	r6, #0
 8005d2a:	42a6      	cmp	r6, r4
 8005d2c:	d105      	bne.n	8005d3a <__libc_init_array+0x2e>
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d34:	4798      	blx	r3
 8005d36:	3601      	adds	r6, #1
 8005d38:	e7ee      	b.n	8005d18 <__libc_init_array+0xc>
 8005d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d3e:	4798      	blx	r3
 8005d40:	3601      	adds	r6, #1
 8005d42:	e7f2      	b.n	8005d2a <__libc_init_array+0x1e>
 8005d44:	080066dc 	.word	0x080066dc
 8005d48:	080066dc 	.word	0x080066dc
 8005d4c:	080066dc 	.word	0x080066dc
 8005d50:	080066e0 	.word	0x080066e0

08005d54 <__retarget_lock_acquire_recursive>:
 8005d54:	4770      	bx	lr

08005d56 <__retarget_lock_release_recursive>:
 8005d56:	4770      	bx	lr

08005d58 <_free_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	2900      	cmp	r1, #0
 8005d5e:	d041      	beq.n	8005de4 <_free_r+0x8c>
 8005d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d64:	1f0c      	subs	r4, r1, #4
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	bfb8      	it	lt
 8005d6a:	18e4      	addlt	r4, r4, r3
 8005d6c:	f000 f8e0 	bl	8005f30 <__malloc_lock>
 8005d70:	4a1d      	ldr	r2, [pc, #116]	@ (8005de8 <_free_r+0x90>)
 8005d72:	6813      	ldr	r3, [r2, #0]
 8005d74:	b933      	cbnz	r3, 8005d84 <_free_r+0x2c>
 8005d76:	6063      	str	r3, [r4, #4]
 8005d78:	6014      	str	r4, [r2, #0]
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d80:	f000 b8dc 	b.w	8005f3c <__malloc_unlock>
 8005d84:	42a3      	cmp	r3, r4
 8005d86:	d908      	bls.n	8005d9a <_free_r+0x42>
 8005d88:	6820      	ldr	r0, [r4, #0]
 8005d8a:	1821      	adds	r1, r4, r0
 8005d8c:	428b      	cmp	r3, r1
 8005d8e:	bf01      	itttt	eq
 8005d90:	6819      	ldreq	r1, [r3, #0]
 8005d92:	685b      	ldreq	r3, [r3, #4]
 8005d94:	1809      	addeq	r1, r1, r0
 8005d96:	6021      	streq	r1, [r4, #0]
 8005d98:	e7ed      	b.n	8005d76 <_free_r+0x1e>
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	b10b      	cbz	r3, 8005da4 <_free_r+0x4c>
 8005da0:	42a3      	cmp	r3, r4
 8005da2:	d9fa      	bls.n	8005d9a <_free_r+0x42>
 8005da4:	6811      	ldr	r1, [r2, #0]
 8005da6:	1850      	adds	r0, r2, r1
 8005da8:	42a0      	cmp	r0, r4
 8005daa:	d10b      	bne.n	8005dc4 <_free_r+0x6c>
 8005dac:	6820      	ldr	r0, [r4, #0]
 8005dae:	4401      	add	r1, r0
 8005db0:	1850      	adds	r0, r2, r1
 8005db2:	4283      	cmp	r3, r0
 8005db4:	6011      	str	r1, [r2, #0]
 8005db6:	d1e0      	bne.n	8005d7a <_free_r+0x22>
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	6053      	str	r3, [r2, #4]
 8005dbe:	4408      	add	r0, r1
 8005dc0:	6010      	str	r0, [r2, #0]
 8005dc2:	e7da      	b.n	8005d7a <_free_r+0x22>
 8005dc4:	d902      	bls.n	8005dcc <_free_r+0x74>
 8005dc6:	230c      	movs	r3, #12
 8005dc8:	602b      	str	r3, [r5, #0]
 8005dca:	e7d6      	b.n	8005d7a <_free_r+0x22>
 8005dcc:	6820      	ldr	r0, [r4, #0]
 8005dce:	1821      	adds	r1, r4, r0
 8005dd0:	428b      	cmp	r3, r1
 8005dd2:	bf04      	itt	eq
 8005dd4:	6819      	ldreq	r1, [r3, #0]
 8005dd6:	685b      	ldreq	r3, [r3, #4]
 8005dd8:	6063      	str	r3, [r4, #4]
 8005dda:	bf04      	itt	eq
 8005ddc:	1809      	addeq	r1, r1, r0
 8005dde:	6021      	streq	r1, [r4, #0]
 8005de0:	6054      	str	r4, [r2, #4]
 8005de2:	e7ca      	b.n	8005d7a <_free_r+0x22>
 8005de4:	bd38      	pop	{r3, r4, r5, pc}
 8005de6:	bf00      	nop
 8005de8:	200003a4 	.word	0x200003a4

08005dec <sbrk_aligned>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4e0f      	ldr	r6, [pc, #60]	@ (8005e2c <sbrk_aligned+0x40>)
 8005df0:	460c      	mov	r4, r1
 8005df2:	6831      	ldr	r1, [r6, #0]
 8005df4:	4605      	mov	r5, r0
 8005df6:	b911      	cbnz	r1, 8005dfe <sbrk_aligned+0x12>
 8005df8:	f000 fba6 	bl	8006548 <_sbrk_r>
 8005dfc:	6030      	str	r0, [r6, #0]
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	f000 fba1 	bl	8006548 <_sbrk_r>
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	d103      	bne.n	8005e12 <sbrk_aligned+0x26>
 8005e0a:	f04f 34ff 	mov.w	r4, #4294967295
 8005e0e:	4620      	mov	r0, r4
 8005e10:	bd70      	pop	{r4, r5, r6, pc}
 8005e12:	1cc4      	adds	r4, r0, #3
 8005e14:	f024 0403 	bic.w	r4, r4, #3
 8005e18:	42a0      	cmp	r0, r4
 8005e1a:	d0f8      	beq.n	8005e0e <sbrk_aligned+0x22>
 8005e1c:	1a21      	subs	r1, r4, r0
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f000 fb92 	bl	8006548 <_sbrk_r>
 8005e24:	3001      	adds	r0, #1
 8005e26:	d1f2      	bne.n	8005e0e <sbrk_aligned+0x22>
 8005e28:	e7ef      	b.n	8005e0a <sbrk_aligned+0x1e>
 8005e2a:	bf00      	nop
 8005e2c:	200003a0 	.word	0x200003a0

08005e30 <_malloc_r>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	1ccd      	adds	r5, r1, #3
 8005e36:	f025 0503 	bic.w	r5, r5, #3
 8005e3a:	3508      	adds	r5, #8
 8005e3c:	2d0c      	cmp	r5, #12
 8005e3e:	bf38      	it	cc
 8005e40:	250c      	movcc	r5, #12
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	4606      	mov	r6, r0
 8005e46:	db01      	blt.n	8005e4c <_malloc_r+0x1c>
 8005e48:	42a9      	cmp	r1, r5
 8005e4a:	d904      	bls.n	8005e56 <_malloc_r+0x26>
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	6033      	str	r3, [r6, #0]
 8005e50:	2000      	movs	r0, #0
 8005e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f2c <_malloc_r+0xfc>
 8005e5a:	f000 f869 	bl	8005f30 <__malloc_lock>
 8005e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e62:	461c      	mov	r4, r3
 8005e64:	bb44      	cbnz	r4, 8005eb8 <_malloc_r+0x88>
 8005e66:	4629      	mov	r1, r5
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f7ff ffbf 	bl	8005dec <sbrk_aligned>
 8005e6e:	1c43      	adds	r3, r0, #1
 8005e70:	4604      	mov	r4, r0
 8005e72:	d158      	bne.n	8005f26 <_malloc_r+0xf6>
 8005e74:	f8d8 4000 	ldr.w	r4, [r8]
 8005e78:	4627      	mov	r7, r4
 8005e7a:	2f00      	cmp	r7, #0
 8005e7c:	d143      	bne.n	8005f06 <_malloc_r+0xd6>
 8005e7e:	2c00      	cmp	r4, #0
 8005e80:	d04b      	beq.n	8005f1a <_malloc_r+0xea>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	4639      	mov	r1, r7
 8005e86:	4630      	mov	r0, r6
 8005e88:	eb04 0903 	add.w	r9, r4, r3
 8005e8c:	f000 fb5c 	bl	8006548 <_sbrk_r>
 8005e90:	4581      	cmp	r9, r0
 8005e92:	d142      	bne.n	8005f1a <_malloc_r+0xea>
 8005e94:	6821      	ldr	r1, [r4, #0]
 8005e96:	1a6d      	subs	r5, r5, r1
 8005e98:	4629      	mov	r1, r5
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7ff ffa6 	bl	8005dec <sbrk_aligned>
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d03a      	beq.n	8005f1a <_malloc_r+0xea>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	442b      	add	r3, r5
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	bb62      	cbnz	r2, 8005f0c <_malloc_r+0xdc>
 8005eb2:	f8c8 7000 	str.w	r7, [r8]
 8005eb6:	e00f      	b.n	8005ed8 <_malloc_r+0xa8>
 8005eb8:	6822      	ldr	r2, [r4, #0]
 8005eba:	1b52      	subs	r2, r2, r5
 8005ebc:	d420      	bmi.n	8005f00 <_malloc_r+0xd0>
 8005ebe:	2a0b      	cmp	r2, #11
 8005ec0:	d917      	bls.n	8005ef2 <_malloc_r+0xc2>
 8005ec2:	1961      	adds	r1, r4, r5
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	6025      	str	r5, [r4, #0]
 8005ec8:	bf18      	it	ne
 8005eca:	6059      	strne	r1, [r3, #4]
 8005ecc:	6863      	ldr	r3, [r4, #4]
 8005ece:	bf08      	it	eq
 8005ed0:	f8c8 1000 	streq.w	r1, [r8]
 8005ed4:	5162      	str	r2, [r4, r5]
 8005ed6:	604b      	str	r3, [r1, #4]
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f000 f82f 	bl	8005f3c <__malloc_unlock>
 8005ede:	f104 000b 	add.w	r0, r4, #11
 8005ee2:	1d23      	adds	r3, r4, #4
 8005ee4:	f020 0007 	bic.w	r0, r0, #7
 8005ee8:	1ac2      	subs	r2, r0, r3
 8005eea:	bf1c      	itt	ne
 8005eec:	1a1b      	subne	r3, r3, r0
 8005eee:	50a3      	strne	r3, [r4, r2]
 8005ef0:	e7af      	b.n	8005e52 <_malloc_r+0x22>
 8005ef2:	6862      	ldr	r2, [r4, #4]
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	bf0c      	ite	eq
 8005ef8:	f8c8 2000 	streq.w	r2, [r8]
 8005efc:	605a      	strne	r2, [r3, #4]
 8005efe:	e7eb      	b.n	8005ed8 <_malloc_r+0xa8>
 8005f00:	4623      	mov	r3, r4
 8005f02:	6864      	ldr	r4, [r4, #4]
 8005f04:	e7ae      	b.n	8005e64 <_malloc_r+0x34>
 8005f06:	463c      	mov	r4, r7
 8005f08:	687f      	ldr	r7, [r7, #4]
 8005f0a:	e7b6      	b.n	8005e7a <_malloc_r+0x4a>
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	d1fb      	bne.n	8005f0c <_malloc_r+0xdc>
 8005f14:	2300      	movs	r3, #0
 8005f16:	6053      	str	r3, [r2, #4]
 8005f18:	e7de      	b.n	8005ed8 <_malloc_r+0xa8>
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	6033      	str	r3, [r6, #0]
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f000 f80c 	bl	8005f3c <__malloc_unlock>
 8005f24:	e794      	b.n	8005e50 <_malloc_r+0x20>
 8005f26:	6005      	str	r5, [r0, #0]
 8005f28:	e7d6      	b.n	8005ed8 <_malloc_r+0xa8>
 8005f2a:	bf00      	nop
 8005f2c:	200003a4 	.word	0x200003a4

08005f30 <__malloc_lock>:
 8005f30:	4801      	ldr	r0, [pc, #4]	@ (8005f38 <__malloc_lock+0x8>)
 8005f32:	f7ff bf0f 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005f36:	bf00      	nop
 8005f38:	2000039c 	.word	0x2000039c

08005f3c <__malloc_unlock>:
 8005f3c:	4801      	ldr	r0, [pc, #4]	@ (8005f44 <__malloc_unlock+0x8>)
 8005f3e:	f7ff bf0a 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005f42:	bf00      	nop
 8005f44:	2000039c 	.word	0x2000039c

08005f48 <__ssputs_r>:
 8005f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f4c:	688e      	ldr	r6, [r1, #8]
 8005f4e:	461f      	mov	r7, r3
 8005f50:	42be      	cmp	r6, r7
 8005f52:	680b      	ldr	r3, [r1, #0]
 8005f54:	4682      	mov	sl, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	4690      	mov	r8, r2
 8005f5a:	d82d      	bhi.n	8005fb8 <__ssputs_r+0x70>
 8005f5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f64:	d026      	beq.n	8005fb4 <__ssputs_r+0x6c>
 8005f66:	6965      	ldr	r5, [r4, #20]
 8005f68:	6909      	ldr	r1, [r1, #16]
 8005f6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f6e:	eba3 0901 	sub.w	r9, r3, r1
 8005f72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f76:	1c7b      	adds	r3, r7, #1
 8005f78:	444b      	add	r3, r9
 8005f7a:	106d      	asrs	r5, r5, #1
 8005f7c:	429d      	cmp	r5, r3
 8005f7e:	bf38      	it	cc
 8005f80:	461d      	movcc	r5, r3
 8005f82:	0553      	lsls	r3, r2, #21
 8005f84:	d527      	bpl.n	8005fd6 <__ssputs_r+0x8e>
 8005f86:	4629      	mov	r1, r5
 8005f88:	f7ff ff52 	bl	8005e30 <_malloc_r>
 8005f8c:	4606      	mov	r6, r0
 8005f8e:	b360      	cbz	r0, 8005fea <__ssputs_r+0xa2>
 8005f90:	6921      	ldr	r1, [r4, #16]
 8005f92:	464a      	mov	r2, r9
 8005f94:	f000 fae8 	bl	8006568 <memcpy>
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa2:	81a3      	strh	r3, [r4, #12]
 8005fa4:	6126      	str	r6, [r4, #16]
 8005fa6:	6165      	str	r5, [r4, #20]
 8005fa8:	444e      	add	r6, r9
 8005faa:	eba5 0509 	sub.w	r5, r5, r9
 8005fae:	6026      	str	r6, [r4, #0]
 8005fb0:	60a5      	str	r5, [r4, #8]
 8005fb2:	463e      	mov	r6, r7
 8005fb4:	42be      	cmp	r6, r7
 8005fb6:	d900      	bls.n	8005fba <__ssputs_r+0x72>
 8005fb8:	463e      	mov	r6, r7
 8005fba:	6820      	ldr	r0, [r4, #0]
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	4641      	mov	r1, r8
 8005fc0:	f000 faa8 	bl	8006514 <memmove>
 8005fc4:	68a3      	ldr	r3, [r4, #8]
 8005fc6:	1b9b      	subs	r3, r3, r6
 8005fc8:	60a3      	str	r3, [r4, #8]
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	4433      	add	r3, r6
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd6:	462a      	mov	r2, r5
 8005fd8:	f000 fad4 	bl	8006584 <_realloc_r>
 8005fdc:	4606      	mov	r6, r0
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d1e0      	bne.n	8005fa4 <__ssputs_r+0x5c>
 8005fe2:	6921      	ldr	r1, [r4, #16]
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	f7ff feb7 	bl	8005d58 <_free_r>
 8005fea:	230c      	movs	r3, #12
 8005fec:	f8ca 3000 	str.w	r3, [sl]
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	e7e9      	b.n	8005fd2 <__ssputs_r+0x8a>
	...

08006000 <_svfiprintf_r>:
 8006000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	4698      	mov	r8, r3
 8006006:	898b      	ldrh	r3, [r1, #12]
 8006008:	061b      	lsls	r3, r3, #24
 800600a:	b09d      	sub	sp, #116	@ 0x74
 800600c:	4607      	mov	r7, r0
 800600e:	460d      	mov	r5, r1
 8006010:	4614      	mov	r4, r2
 8006012:	d510      	bpl.n	8006036 <_svfiprintf_r+0x36>
 8006014:	690b      	ldr	r3, [r1, #16]
 8006016:	b973      	cbnz	r3, 8006036 <_svfiprintf_r+0x36>
 8006018:	2140      	movs	r1, #64	@ 0x40
 800601a:	f7ff ff09 	bl	8005e30 <_malloc_r>
 800601e:	6028      	str	r0, [r5, #0]
 8006020:	6128      	str	r0, [r5, #16]
 8006022:	b930      	cbnz	r0, 8006032 <_svfiprintf_r+0x32>
 8006024:	230c      	movs	r3, #12
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	b01d      	add	sp, #116	@ 0x74
 800602e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006032:	2340      	movs	r3, #64	@ 0x40
 8006034:	616b      	str	r3, [r5, #20]
 8006036:	2300      	movs	r3, #0
 8006038:	9309      	str	r3, [sp, #36]	@ 0x24
 800603a:	2320      	movs	r3, #32
 800603c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006040:	f8cd 800c 	str.w	r8, [sp, #12]
 8006044:	2330      	movs	r3, #48	@ 0x30
 8006046:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80061e4 <_svfiprintf_r+0x1e4>
 800604a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800604e:	f04f 0901 	mov.w	r9, #1
 8006052:	4623      	mov	r3, r4
 8006054:	469a      	mov	sl, r3
 8006056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800605a:	b10a      	cbz	r2, 8006060 <_svfiprintf_r+0x60>
 800605c:	2a25      	cmp	r2, #37	@ 0x25
 800605e:	d1f9      	bne.n	8006054 <_svfiprintf_r+0x54>
 8006060:	ebba 0b04 	subs.w	fp, sl, r4
 8006064:	d00b      	beq.n	800607e <_svfiprintf_r+0x7e>
 8006066:	465b      	mov	r3, fp
 8006068:	4622      	mov	r2, r4
 800606a:	4629      	mov	r1, r5
 800606c:	4638      	mov	r0, r7
 800606e:	f7ff ff6b 	bl	8005f48 <__ssputs_r>
 8006072:	3001      	adds	r0, #1
 8006074:	f000 80a7 	beq.w	80061c6 <_svfiprintf_r+0x1c6>
 8006078:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800607a:	445a      	add	r2, fp
 800607c:	9209      	str	r2, [sp, #36]	@ 0x24
 800607e:	f89a 3000 	ldrb.w	r3, [sl]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 809f 	beq.w	80061c6 <_svfiprintf_r+0x1c6>
 8006088:	2300      	movs	r3, #0
 800608a:	f04f 32ff 	mov.w	r2, #4294967295
 800608e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006092:	f10a 0a01 	add.w	sl, sl, #1
 8006096:	9304      	str	r3, [sp, #16]
 8006098:	9307      	str	r3, [sp, #28]
 800609a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800609e:	931a      	str	r3, [sp, #104]	@ 0x68
 80060a0:	4654      	mov	r4, sl
 80060a2:	2205      	movs	r2, #5
 80060a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a8:	484e      	ldr	r0, [pc, #312]	@ (80061e4 <_svfiprintf_r+0x1e4>)
 80060aa:	f7fa f899 	bl	80001e0 <memchr>
 80060ae:	9a04      	ldr	r2, [sp, #16]
 80060b0:	b9d8      	cbnz	r0, 80060ea <_svfiprintf_r+0xea>
 80060b2:	06d0      	lsls	r0, r2, #27
 80060b4:	bf44      	itt	mi
 80060b6:	2320      	movmi	r3, #32
 80060b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060bc:	0711      	lsls	r1, r2, #28
 80060be:	bf44      	itt	mi
 80060c0:	232b      	movmi	r3, #43	@ 0x2b
 80060c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060c6:	f89a 3000 	ldrb.w	r3, [sl]
 80060ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80060cc:	d015      	beq.n	80060fa <_svfiprintf_r+0xfa>
 80060ce:	9a07      	ldr	r2, [sp, #28]
 80060d0:	4654      	mov	r4, sl
 80060d2:	2000      	movs	r0, #0
 80060d4:	f04f 0c0a 	mov.w	ip, #10
 80060d8:	4621      	mov	r1, r4
 80060da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060de:	3b30      	subs	r3, #48	@ 0x30
 80060e0:	2b09      	cmp	r3, #9
 80060e2:	d94b      	bls.n	800617c <_svfiprintf_r+0x17c>
 80060e4:	b1b0      	cbz	r0, 8006114 <_svfiprintf_r+0x114>
 80060e6:	9207      	str	r2, [sp, #28]
 80060e8:	e014      	b.n	8006114 <_svfiprintf_r+0x114>
 80060ea:	eba0 0308 	sub.w	r3, r0, r8
 80060ee:	fa09 f303 	lsl.w	r3, r9, r3
 80060f2:	4313      	orrs	r3, r2
 80060f4:	9304      	str	r3, [sp, #16]
 80060f6:	46a2      	mov	sl, r4
 80060f8:	e7d2      	b.n	80060a0 <_svfiprintf_r+0xa0>
 80060fa:	9b03      	ldr	r3, [sp, #12]
 80060fc:	1d19      	adds	r1, r3, #4
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	9103      	str	r1, [sp, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	bfbb      	ittet	lt
 8006106:	425b      	neglt	r3, r3
 8006108:	f042 0202 	orrlt.w	r2, r2, #2
 800610c:	9307      	strge	r3, [sp, #28]
 800610e:	9307      	strlt	r3, [sp, #28]
 8006110:	bfb8      	it	lt
 8006112:	9204      	strlt	r2, [sp, #16]
 8006114:	7823      	ldrb	r3, [r4, #0]
 8006116:	2b2e      	cmp	r3, #46	@ 0x2e
 8006118:	d10a      	bne.n	8006130 <_svfiprintf_r+0x130>
 800611a:	7863      	ldrb	r3, [r4, #1]
 800611c:	2b2a      	cmp	r3, #42	@ 0x2a
 800611e:	d132      	bne.n	8006186 <_svfiprintf_r+0x186>
 8006120:	9b03      	ldr	r3, [sp, #12]
 8006122:	1d1a      	adds	r2, r3, #4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	9203      	str	r2, [sp, #12]
 8006128:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800612c:	3402      	adds	r4, #2
 800612e:	9305      	str	r3, [sp, #20]
 8006130:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80061f4 <_svfiprintf_r+0x1f4>
 8006134:	7821      	ldrb	r1, [r4, #0]
 8006136:	2203      	movs	r2, #3
 8006138:	4650      	mov	r0, sl
 800613a:	f7fa f851 	bl	80001e0 <memchr>
 800613e:	b138      	cbz	r0, 8006150 <_svfiprintf_r+0x150>
 8006140:	9b04      	ldr	r3, [sp, #16]
 8006142:	eba0 000a 	sub.w	r0, r0, sl
 8006146:	2240      	movs	r2, #64	@ 0x40
 8006148:	4082      	lsls	r2, r0
 800614a:	4313      	orrs	r3, r2
 800614c:	3401      	adds	r4, #1
 800614e:	9304      	str	r3, [sp, #16]
 8006150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006154:	4824      	ldr	r0, [pc, #144]	@ (80061e8 <_svfiprintf_r+0x1e8>)
 8006156:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800615a:	2206      	movs	r2, #6
 800615c:	f7fa f840 	bl	80001e0 <memchr>
 8006160:	2800      	cmp	r0, #0
 8006162:	d036      	beq.n	80061d2 <_svfiprintf_r+0x1d2>
 8006164:	4b21      	ldr	r3, [pc, #132]	@ (80061ec <_svfiprintf_r+0x1ec>)
 8006166:	bb1b      	cbnz	r3, 80061b0 <_svfiprintf_r+0x1b0>
 8006168:	9b03      	ldr	r3, [sp, #12]
 800616a:	3307      	adds	r3, #7
 800616c:	f023 0307 	bic.w	r3, r3, #7
 8006170:	3308      	adds	r3, #8
 8006172:	9303      	str	r3, [sp, #12]
 8006174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006176:	4433      	add	r3, r6
 8006178:	9309      	str	r3, [sp, #36]	@ 0x24
 800617a:	e76a      	b.n	8006052 <_svfiprintf_r+0x52>
 800617c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006180:	460c      	mov	r4, r1
 8006182:	2001      	movs	r0, #1
 8006184:	e7a8      	b.n	80060d8 <_svfiprintf_r+0xd8>
 8006186:	2300      	movs	r3, #0
 8006188:	3401      	adds	r4, #1
 800618a:	9305      	str	r3, [sp, #20]
 800618c:	4619      	mov	r1, r3
 800618e:	f04f 0c0a 	mov.w	ip, #10
 8006192:	4620      	mov	r0, r4
 8006194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006198:	3a30      	subs	r2, #48	@ 0x30
 800619a:	2a09      	cmp	r2, #9
 800619c:	d903      	bls.n	80061a6 <_svfiprintf_r+0x1a6>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0c6      	beq.n	8006130 <_svfiprintf_r+0x130>
 80061a2:	9105      	str	r1, [sp, #20]
 80061a4:	e7c4      	b.n	8006130 <_svfiprintf_r+0x130>
 80061a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80061aa:	4604      	mov	r4, r0
 80061ac:	2301      	movs	r3, #1
 80061ae:	e7f0      	b.n	8006192 <_svfiprintf_r+0x192>
 80061b0:	ab03      	add	r3, sp, #12
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	462a      	mov	r2, r5
 80061b6:	4b0e      	ldr	r3, [pc, #56]	@ (80061f0 <_svfiprintf_r+0x1f0>)
 80061b8:	a904      	add	r1, sp, #16
 80061ba:	4638      	mov	r0, r7
 80061bc:	f3af 8000 	nop.w
 80061c0:	1c42      	adds	r2, r0, #1
 80061c2:	4606      	mov	r6, r0
 80061c4:	d1d6      	bne.n	8006174 <_svfiprintf_r+0x174>
 80061c6:	89ab      	ldrh	r3, [r5, #12]
 80061c8:	065b      	lsls	r3, r3, #25
 80061ca:	f53f af2d 	bmi.w	8006028 <_svfiprintf_r+0x28>
 80061ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061d0:	e72c      	b.n	800602c <_svfiprintf_r+0x2c>
 80061d2:	ab03      	add	r3, sp, #12
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	462a      	mov	r2, r5
 80061d8:	4b05      	ldr	r3, [pc, #20]	@ (80061f0 <_svfiprintf_r+0x1f0>)
 80061da:	a904      	add	r1, sp, #16
 80061dc:	4638      	mov	r0, r7
 80061de:	f000 f879 	bl	80062d4 <_printf_i>
 80061e2:	e7ed      	b.n	80061c0 <_svfiprintf_r+0x1c0>
 80061e4:	080066a1 	.word	0x080066a1
 80061e8:	080066ab 	.word	0x080066ab
 80061ec:	00000000 	.word	0x00000000
 80061f0:	08005f49 	.word	0x08005f49
 80061f4:	080066a7 	.word	0x080066a7

080061f8 <_printf_common>:
 80061f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	4616      	mov	r6, r2
 80061fe:	4698      	mov	r8, r3
 8006200:	688a      	ldr	r2, [r1, #8]
 8006202:	690b      	ldr	r3, [r1, #16]
 8006204:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006208:	4293      	cmp	r3, r2
 800620a:	bfb8      	it	lt
 800620c:	4613      	movlt	r3, r2
 800620e:	6033      	str	r3, [r6, #0]
 8006210:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006214:	4607      	mov	r7, r0
 8006216:	460c      	mov	r4, r1
 8006218:	b10a      	cbz	r2, 800621e <_printf_common+0x26>
 800621a:	3301      	adds	r3, #1
 800621c:	6033      	str	r3, [r6, #0]
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	0699      	lsls	r1, r3, #26
 8006222:	bf42      	ittt	mi
 8006224:	6833      	ldrmi	r3, [r6, #0]
 8006226:	3302      	addmi	r3, #2
 8006228:	6033      	strmi	r3, [r6, #0]
 800622a:	6825      	ldr	r5, [r4, #0]
 800622c:	f015 0506 	ands.w	r5, r5, #6
 8006230:	d106      	bne.n	8006240 <_printf_common+0x48>
 8006232:	f104 0a19 	add.w	sl, r4, #25
 8006236:	68e3      	ldr	r3, [r4, #12]
 8006238:	6832      	ldr	r2, [r6, #0]
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	42ab      	cmp	r3, r5
 800623e:	dc26      	bgt.n	800628e <_printf_common+0x96>
 8006240:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006244:	6822      	ldr	r2, [r4, #0]
 8006246:	3b00      	subs	r3, #0
 8006248:	bf18      	it	ne
 800624a:	2301      	movne	r3, #1
 800624c:	0692      	lsls	r2, r2, #26
 800624e:	d42b      	bmi.n	80062a8 <_printf_common+0xb0>
 8006250:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006254:	4641      	mov	r1, r8
 8006256:	4638      	mov	r0, r7
 8006258:	47c8      	blx	r9
 800625a:	3001      	adds	r0, #1
 800625c:	d01e      	beq.n	800629c <_printf_common+0xa4>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	6922      	ldr	r2, [r4, #16]
 8006262:	f003 0306 	and.w	r3, r3, #6
 8006266:	2b04      	cmp	r3, #4
 8006268:	bf02      	ittt	eq
 800626a:	68e5      	ldreq	r5, [r4, #12]
 800626c:	6833      	ldreq	r3, [r6, #0]
 800626e:	1aed      	subeq	r5, r5, r3
 8006270:	68a3      	ldr	r3, [r4, #8]
 8006272:	bf0c      	ite	eq
 8006274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006278:	2500      	movne	r5, #0
 800627a:	4293      	cmp	r3, r2
 800627c:	bfc4      	itt	gt
 800627e:	1a9b      	subgt	r3, r3, r2
 8006280:	18ed      	addgt	r5, r5, r3
 8006282:	2600      	movs	r6, #0
 8006284:	341a      	adds	r4, #26
 8006286:	42b5      	cmp	r5, r6
 8006288:	d11a      	bne.n	80062c0 <_printf_common+0xc8>
 800628a:	2000      	movs	r0, #0
 800628c:	e008      	b.n	80062a0 <_printf_common+0xa8>
 800628e:	2301      	movs	r3, #1
 8006290:	4652      	mov	r2, sl
 8006292:	4641      	mov	r1, r8
 8006294:	4638      	mov	r0, r7
 8006296:	47c8      	blx	r9
 8006298:	3001      	adds	r0, #1
 800629a:	d103      	bne.n	80062a4 <_printf_common+0xac>
 800629c:	f04f 30ff 	mov.w	r0, #4294967295
 80062a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a4:	3501      	adds	r5, #1
 80062a6:	e7c6      	b.n	8006236 <_printf_common+0x3e>
 80062a8:	18e1      	adds	r1, r4, r3
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	2030      	movs	r0, #48	@ 0x30
 80062ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062b2:	4422      	add	r2, r4
 80062b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062bc:	3302      	adds	r3, #2
 80062be:	e7c7      	b.n	8006250 <_printf_common+0x58>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4622      	mov	r2, r4
 80062c4:	4641      	mov	r1, r8
 80062c6:	4638      	mov	r0, r7
 80062c8:	47c8      	blx	r9
 80062ca:	3001      	adds	r0, #1
 80062cc:	d0e6      	beq.n	800629c <_printf_common+0xa4>
 80062ce:	3601      	adds	r6, #1
 80062d0:	e7d9      	b.n	8006286 <_printf_common+0x8e>
	...

080062d4 <_printf_i>:
 80062d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d8:	7e0f      	ldrb	r7, [r1, #24]
 80062da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062dc:	2f78      	cmp	r7, #120	@ 0x78
 80062de:	4691      	mov	r9, r2
 80062e0:	4680      	mov	r8, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	469a      	mov	sl, r3
 80062e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062ea:	d807      	bhi.n	80062fc <_printf_i+0x28>
 80062ec:	2f62      	cmp	r7, #98	@ 0x62
 80062ee:	d80a      	bhi.n	8006306 <_printf_i+0x32>
 80062f0:	2f00      	cmp	r7, #0
 80062f2:	f000 80d2 	beq.w	800649a <_printf_i+0x1c6>
 80062f6:	2f58      	cmp	r7, #88	@ 0x58
 80062f8:	f000 80b9 	beq.w	800646e <_printf_i+0x19a>
 80062fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006300:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006304:	e03a      	b.n	800637c <_printf_i+0xa8>
 8006306:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800630a:	2b15      	cmp	r3, #21
 800630c:	d8f6      	bhi.n	80062fc <_printf_i+0x28>
 800630e:	a101      	add	r1, pc, #4	@ (adr r1, 8006314 <_printf_i+0x40>)
 8006310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006314:	0800636d 	.word	0x0800636d
 8006318:	08006381 	.word	0x08006381
 800631c:	080062fd 	.word	0x080062fd
 8006320:	080062fd 	.word	0x080062fd
 8006324:	080062fd 	.word	0x080062fd
 8006328:	080062fd 	.word	0x080062fd
 800632c:	08006381 	.word	0x08006381
 8006330:	080062fd 	.word	0x080062fd
 8006334:	080062fd 	.word	0x080062fd
 8006338:	080062fd 	.word	0x080062fd
 800633c:	080062fd 	.word	0x080062fd
 8006340:	08006481 	.word	0x08006481
 8006344:	080063ab 	.word	0x080063ab
 8006348:	0800643b 	.word	0x0800643b
 800634c:	080062fd 	.word	0x080062fd
 8006350:	080062fd 	.word	0x080062fd
 8006354:	080064a3 	.word	0x080064a3
 8006358:	080062fd 	.word	0x080062fd
 800635c:	080063ab 	.word	0x080063ab
 8006360:	080062fd 	.word	0x080062fd
 8006364:	080062fd 	.word	0x080062fd
 8006368:	08006443 	.word	0x08006443
 800636c:	6833      	ldr	r3, [r6, #0]
 800636e:	1d1a      	adds	r2, r3, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6032      	str	r2, [r6, #0]
 8006374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006378:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800637c:	2301      	movs	r3, #1
 800637e:	e09d      	b.n	80064bc <_printf_i+0x1e8>
 8006380:	6833      	ldr	r3, [r6, #0]
 8006382:	6820      	ldr	r0, [r4, #0]
 8006384:	1d19      	adds	r1, r3, #4
 8006386:	6031      	str	r1, [r6, #0]
 8006388:	0606      	lsls	r6, r0, #24
 800638a:	d501      	bpl.n	8006390 <_printf_i+0xbc>
 800638c:	681d      	ldr	r5, [r3, #0]
 800638e:	e003      	b.n	8006398 <_printf_i+0xc4>
 8006390:	0645      	lsls	r5, r0, #25
 8006392:	d5fb      	bpl.n	800638c <_printf_i+0xb8>
 8006394:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006398:	2d00      	cmp	r5, #0
 800639a:	da03      	bge.n	80063a4 <_printf_i+0xd0>
 800639c:	232d      	movs	r3, #45	@ 0x2d
 800639e:	426d      	negs	r5, r5
 80063a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063a4:	4859      	ldr	r0, [pc, #356]	@ (800650c <_printf_i+0x238>)
 80063a6:	230a      	movs	r3, #10
 80063a8:	e011      	b.n	80063ce <_printf_i+0xfa>
 80063aa:	6821      	ldr	r1, [r4, #0]
 80063ac:	6833      	ldr	r3, [r6, #0]
 80063ae:	0608      	lsls	r0, r1, #24
 80063b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80063b4:	d402      	bmi.n	80063bc <_printf_i+0xe8>
 80063b6:	0649      	lsls	r1, r1, #25
 80063b8:	bf48      	it	mi
 80063ba:	b2ad      	uxthmi	r5, r5
 80063bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80063be:	4853      	ldr	r0, [pc, #332]	@ (800650c <_printf_i+0x238>)
 80063c0:	6033      	str	r3, [r6, #0]
 80063c2:	bf14      	ite	ne
 80063c4:	230a      	movne	r3, #10
 80063c6:	2308      	moveq	r3, #8
 80063c8:	2100      	movs	r1, #0
 80063ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063ce:	6866      	ldr	r6, [r4, #4]
 80063d0:	60a6      	str	r6, [r4, #8]
 80063d2:	2e00      	cmp	r6, #0
 80063d4:	bfa2      	ittt	ge
 80063d6:	6821      	ldrge	r1, [r4, #0]
 80063d8:	f021 0104 	bicge.w	r1, r1, #4
 80063dc:	6021      	strge	r1, [r4, #0]
 80063de:	b90d      	cbnz	r5, 80063e4 <_printf_i+0x110>
 80063e0:	2e00      	cmp	r6, #0
 80063e2:	d04b      	beq.n	800647c <_printf_i+0x1a8>
 80063e4:	4616      	mov	r6, r2
 80063e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80063ea:	fb03 5711 	mls	r7, r3, r1, r5
 80063ee:	5dc7      	ldrb	r7, [r0, r7]
 80063f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063f4:	462f      	mov	r7, r5
 80063f6:	42bb      	cmp	r3, r7
 80063f8:	460d      	mov	r5, r1
 80063fa:	d9f4      	bls.n	80063e6 <_printf_i+0x112>
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d10b      	bne.n	8006418 <_printf_i+0x144>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	07df      	lsls	r7, r3, #31
 8006404:	d508      	bpl.n	8006418 <_printf_i+0x144>
 8006406:	6923      	ldr	r3, [r4, #16]
 8006408:	6861      	ldr	r1, [r4, #4]
 800640a:	4299      	cmp	r1, r3
 800640c:	bfde      	ittt	le
 800640e:	2330      	movle	r3, #48	@ 0x30
 8006410:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006414:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006418:	1b92      	subs	r2, r2, r6
 800641a:	6122      	str	r2, [r4, #16]
 800641c:	f8cd a000 	str.w	sl, [sp]
 8006420:	464b      	mov	r3, r9
 8006422:	aa03      	add	r2, sp, #12
 8006424:	4621      	mov	r1, r4
 8006426:	4640      	mov	r0, r8
 8006428:	f7ff fee6 	bl	80061f8 <_printf_common>
 800642c:	3001      	adds	r0, #1
 800642e:	d14a      	bne.n	80064c6 <_printf_i+0x1f2>
 8006430:	f04f 30ff 	mov.w	r0, #4294967295
 8006434:	b004      	add	sp, #16
 8006436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	f043 0320 	orr.w	r3, r3, #32
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	4833      	ldr	r0, [pc, #204]	@ (8006510 <_printf_i+0x23c>)
 8006444:	2778      	movs	r7, #120	@ 0x78
 8006446:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	6831      	ldr	r1, [r6, #0]
 800644e:	061f      	lsls	r7, r3, #24
 8006450:	f851 5b04 	ldr.w	r5, [r1], #4
 8006454:	d402      	bmi.n	800645c <_printf_i+0x188>
 8006456:	065f      	lsls	r7, r3, #25
 8006458:	bf48      	it	mi
 800645a:	b2ad      	uxthmi	r5, r5
 800645c:	6031      	str	r1, [r6, #0]
 800645e:	07d9      	lsls	r1, r3, #31
 8006460:	bf44      	itt	mi
 8006462:	f043 0320 	orrmi.w	r3, r3, #32
 8006466:	6023      	strmi	r3, [r4, #0]
 8006468:	b11d      	cbz	r5, 8006472 <_printf_i+0x19e>
 800646a:	2310      	movs	r3, #16
 800646c:	e7ac      	b.n	80063c8 <_printf_i+0xf4>
 800646e:	4827      	ldr	r0, [pc, #156]	@ (800650c <_printf_i+0x238>)
 8006470:	e7e9      	b.n	8006446 <_printf_i+0x172>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	f023 0320 	bic.w	r3, r3, #32
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	e7f6      	b.n	800646a <_printf_i+0x196>
 800647c:	4616      	mov	r6, r2
 800647e:	e7bd      	b.n	80063fc <_printf_i+0x128>
 8006480:	6833      	ldr	r3, [r6, #0]
 8006482:	6825      	ldr	r5, [r4, #0]
 8006484:	6961      	ldr	r1, [r4, #20]
 8006486:	1d18      	adds	r0, r3, #4
 8006488:	6030      	str	r0, [r6, #0]
 800648a:	062e      	lsls	r6, r5, #24
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	d501      	bpl.n	8006494 <_printf_i+0x1c0>
 8006490:	6019      	str	r1, [r3, #0]
 8006492:	e002      	b.n	800649a <_printf_i+0x1c6>
 8006494:	0668      	lsls	r0, r5, #25
 8006496:	d5fb      	bpl.n	8006490 <_printf_i+0x1bc>
 8006498:	8019      	strh	r1, [r3, #0]
 800649a:	2300      	movs	r3, #0
 800649c:	6123      	str	r3, [r4, #16]
 800649e:	4616      	mov	r6, r2
 80064a0:	e7bc      	b.n	800641c <_printf_i+0x148>
 80064a2:	6833      	ldr	r3, [r6, #0]
 80064a4:	1d1a      	adds	r2, r3, #4
 80064a6:	6032      	str	r2, [r6, #0]
 80064a8:	681e      	ldr	r6, [r3, #0]
 80064aa:	6862      	ldr	r2, [r4, #4]
 80064ac:	2100      	movs	r1, #0
 80064ae:	4630      	mov	r0, r6
 80064b0:	f7f9 fe96 	bl	80001e0 <memchr>
 80064b4:	b108      	cbz	r0, 80064ba <_printf_i+0x1e6>
 80064b6:	1b80      	subs	r0, r0, r6
 80064b8:	6060      	str	r0, [r4, #4]
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	6123      	str	r3, [r4, #16]
 80064be:	2300      	movs	r3, #0
 80064c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064c4:	e7aa      	b.n	800641c <_printf_i+0x148>
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	4632      	mov	r2, r6
 80064ca:	4649      	mov	r1, r9
 80064cc:	4640      	mov	r0, r8
 80064ce:	47d0      	blx	sl
 80064d0:	3001      	adds	r0, #1
 80064d2:	d0ad      	beq.n	8006430 <_printf_i+0x15c>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	079b      	lsls	r3, r3, #30
 80064d8:	d413      	bmi.n	8006502 <_printf_i+0x22e>
 80064da:	68e0      	ldr	r0, [r4, #12]
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	4298      	cmp	r0, r3
 80064e0:	bfb8      	it	lt
 80064e2:	4618      	movlt	r0, r3
 80064e4:	e7a6      	b.n	8006434 <_printf_i+0x160>
 80064e6:	2301      	movs	r3, #1
 80064e8:	4632      	mov	r2, r6
 80064ea:	4649      	mov	r1, r9
 80064ec:	4640      	mov	r0, r8
 80064ee:	47d0      	blx	sl
 80064f0:	3001      	adds	r0, #1
 80064f2:	d09d      	beq.n	8006430 <_printf_i+0x15c>
 80064f4:	3501      	adds	r5, #1
 80064f6:	68e3      	ldr	r3, [r4, #12]
 80064f8:	9903      	ldr	r1, [sp, #12]
 80064fa:	1a5b      	subs	r3, r3, r1
 80064fc:	42ab      	cmp	r3, r5
 80064fe:	dcf2      	bgt.n	80064e6 <_printf_i+0x212>
 8006500:	e7eb      	b.n	80064da <_printf_i+0x206>
 8006502:	2500      	movs	r5, #0
 8006504:	f104 0619 	add.w	r6, r4, #25
 8006508:	e7f5      	b.n	80064f6 <_printf_i+0x222>
 800650a:	bf00      	nop
 800650c:	080066b2 	.word	0x080066b2
 8006510:	080066c3 	.word	0x080066c3

08006514 <memmove>:
 8006514:	4288      	cmp	r0, r1
 8006516:	b510      	push	{r4, lr}
 8006518:	eb01 0402 	add.w	r4, r1, r2
 800651c:	d902      	bls.n	8006524 <memmove+0x10>
 800651e:	4284      	cmp	r4, r0
 8006520:	4623      	mov	r3, r4
 8006522:	d807      	bhi.n	8006534 <memmove+0x20>
 8006524:	1e43      	subs	r3, r0, #1
 8006526:	42a1      	cmp	r1, r4
 8006528:	d008      	beq.n	800653c <memmove+0x28>
 800652a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800652e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006532:	e7f8      	b.n	8006526 <memmove+0x12>
 8006534:	4402      	add	r2, r0
 8006536:	4601      	mov	r1, r0
 8006538:	428a      	cmp	r2, r1
 800653a:	d100      	bne.n	800653e <memmove+0x2a>
 800653c:	bd10      	pop	{r4, pc}
 800653e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006546:	e7f7      	b.n	8006538 <memmove+0x24>

08006548 <_sbrk_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4d06      	ldr	r5, [pc, #24]	@ (8006564 <_sbrk_r+0x1c>)
 800654c:	2300      	movs	r3, #0
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	f7fb f914 	bl	8001780 <_sbrk>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d102      	bne.n	8006562 <_sbrk_r+0x1a>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	b103      	cbz	r3, 8006562 <_sbrk_r+0x1a>
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	20000398 	.word	0x20000398

08006568 <memcpy>:
 8006568:	440a      	add	r2, r1
 800656a:	4291      	cmp	r1, r2
 800656c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006570:	d100      	bne.n	8006574 <memcpy+0xc>
 8006572:	4770      	bx	lr
 8006574:	b510      	push	{r4, lr}
 8006576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800657a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800657e:	4291      	cmp	r1, r2
 8006580:	d1f9      	bne.n	8006576 <memcpy+0xe>
 8006582:	bd10      	pop	{r4, pc}

08006584 <_realloc_r>:
 8006584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006588:	4680      	mov	r8, r0
 800658a:	4615      	mov	r5, r2
 800658c:	460c      	mov	r4, r1
 800658e:	b921      	cbnz	r1, 800659a <_realloc_r+0x16>
 8006590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006594:	4611      	mov	r1, r2
 8006596:	f7ff bc4b 	b.w	8005e30 <_malloc_r>
 800659a:	b92a      	cbnz	r2, 80065a8 <_realloc_r+0x24>
 800659c:	f7ff fbdc 	bl	8005d58 <_free_r>
 80065a0:	2400      	movs	r4, #0
 80065a2:	4620      	mov	r0, r4
 80065a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a8:	f000 f81a 	bl	80065e0 <_malloc_usable_size_r>
 80065ac:	4285      	cmp	r5, r0
 80065ae:	4606      	mov	r6, r0
 80065b0:	d802      	bhi.n	80065b8 <_realloc_r+0x34>
 80065b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80065b6:	d8f4      	bhi.n	80065a2 <_realloc_r+0x1e>
 80065b8:	4629      	mov	r1, r5
 80065ba:	4640      	mov	r0, r8
 80065bc:	f7ff fc38 	bl	8005e30 <_malloc_r>
 80065c0:	4607      	mov	r7, r0
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d0ec      	beq.n	80065a0 <_realloc_r+0x1c>
 80065c6:	42b5      	cmp	r5, r6
 80065c8:	462a      	mov	r2, r5
 80065ca:	4621      	mov	r1, r4
 80065cc:	bf28      	it	cs
 80065ce:	4632      	movcs	r2, r6
 80065d0:	f7ff ffca 	bl	8006568 <memcpy>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4640      	mov	r0, r8
 80065d8:	f7ff fbbe 	bl	8005d58 <_free_r>
 80065dc:	463c      	mov	r4, r7
 80065de:	e7e0      	b.n	80065a2 <_realloc_r+0x1e>

080065e0 <_malloc_usable_size_r>:
 80065e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e4:	1f18      	subs	r0, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bfbc      	itt	lt
 80065ea:	580b      	ldrlt	r3, [r1, r0]
 80065ec:	18c0      	addlt	r0, r0, r3
 80065ee:	4770      	bx	lr

080065f0 <_init>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr

080065fc <_fini>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr
