
MobilePlatform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c08  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dcc  08003dcc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003dcc  08003dcc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dcc  08003dcc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000180  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000018c  2000018c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a265  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c9b  00000000  00000000  0002a2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a80  00000000  00000000  0002bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000080f  00000000  00000000  0002ca00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f91c  00000000  00000000  0002d20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000dcb3  00000000  00000000  0004cb2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c16ae  00000000  00000000  0005a7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002aa4  00000000  00000000  0011be8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0011e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003d84 	.word	0x08003d84

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003d84 	.word	0x08003d84

080001d4 <Set_Speed_And_Direction_Motor_Right>:
void DMA_PWM_Init(void);
void Set_Speed_And_Direction_Motor_Right(uint8_t Speed, uint8_t Direction);
void Set_Speed_And_Direction_Motor_Left(uint8_t Speed, uint8_t Direction);

void Set_Speed_And_Direction_Motor_Right(uint8_t Speed, uint8_t Direction)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	460a      	mov	r2, r1
 80001de:	71fb      	strb	r3, [r7, #7]
 80001e0:	4613      	mov	r3, r2
 80001e2:	71bb      	strb	r3, [r7, #6]
	if(MOVE_FWD == Direction)
 80001e4:	79bb      	ldrb	r3, [r7, #6]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d106      	bne.n	80001f8 <Set_Speed_And_Direction_Motor_Right+0x24>
	{
		TIM1->CCR1 =0;
 80001ea:	4b11      	ldr	r3, [pc, #68]	; (8000230 <Set_Speed_And_Direction_Motor_Right+0x5c>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = Speed;
 80001f0:	4a0f      	ldr	r2, [pc, #60]	; (8000230 <Set_Speed_And_Direction_Motor_Right+0x5c>)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	6393      	str	r3, [r2, #56]	; 0x38
 80001f6:	e00f      	b.n	8000218 <Set_Speed_And_Direction_Motor_Right+0x44>
	}
	else if(MOVE_BWD == Direction)
 80001f8:	79bb      	ldrb	r3, [r7, #6]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d106      	bne.n	800020c <Set_Speed_And_Direction_Motor_Right+0x38>
	{
		TIM1->CCR1 = Speed;
 80001fe:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <Set_Speed_And_Direction_Motor_Right+0x5c>)
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000204:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <Set_Speed_And_Direction_Motor_Right+0x5c>)
 8000206:	2200      	movs	r2, #0
 8000208:	639a      	str	r2, [r3, #56]	; 0x38
 800020a:	e005      	b.n	8000218 <Set_Speed_And_Direction_Motor_Right+0x44>
	}
	else
	{
		TIM1->CCR1 = 0;
 800020c:	4b08      	ldr	r3, [pc, #32]	; (8000230 <Set_Speed_And_Direction_Motor_Right+0x5c>)
 800020e:	2200      	movs	r2, #0
 8000210:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000212:	4b07      	ldr	r3, [pc, #28]	; (8000230 <Set_Speed_And_Direction_Motor_Right+0x5c>)
 8000214:	2200      	movs	r2, #0
 8000216:	639a      	str	r2, [r3, #56]	; 0x38
	}

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000218:	2100      	movs	r1, #0
 800021a:	4806      	ldr	r0, [pc, #24]	; (8000234 <Set_Speed_And_Direction_Motor_Right+0x60>)
 800021c:	f002 fd26 	bl	8002c6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000220:	2104      	movs	r1, #4
 8000222:	4804      	ldr	r0, [pc, #16]	; (8000234 <Set_Speed_And_Direction_Motor_Right+0x60>)
 8000224:	f002 fd22 	bl	8002c6c <HAL_TIM_PWM_Start>

}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40012c00 	.word	0x40012c00
 8000234:	20000028 	.word	0x20000028

08000238 <Set_Speed_And_Direction_Motor_Left>:

void Set_Speed_And_Direction_Motor_Left(uint8_t Speed, uint8_t Direction)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	460a      	mov	r2, r1
 8000242:	71fb      	strb	r3, [r7, #7]
 8000244:	4613      	mov	r3, r2
 8000246:	71bb      	strb	r3, [r7, #6]

	if(MOVE_FWD == Direction)
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d106      	bne.n	800025c <Set_Speed_And_Direction_Motor_Left+0x24>
	{
		TIM1->CCR3 =0;
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <Set_Speed_And_Direction_Motor_Left+0x5c>)
 8000250:	2200      	movs	r2, #0
 8000252:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = Speed;
 8000254:	4a0f      	ldr	r2, [pc, #60]	; (8000294 <Set_Speed_And_Direction_Motor_Left+0x5c>)
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	6413      	str	r3, [r2, #64]	; 0x40
 800025a:	e00f      	b.n	800027c <Set_Speed_And_Direction_Motor_Left+0x44>
	}
	else if(MOVE_BWD == Direction)
 800025c:	79bb      	ldrb	r3, [r7, #6]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d106      	bne.n	8000270 <Set_Speed_And_Direction_Motor_Left+0x38>
	{
		TIM1->CCR3 = Speed;
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <Set_Speed_And_Direction_Motor_Left+0x5c>)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CCR4 = 0;
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <Set_Speed_And_Direction_Motor_Left+0x5c>)
 800026a:	2200      	movs	r2, #0
 800026c:	641a      	str	r2, [r3, #64]	; 0x40
 800026e:	e005      	b.n	800027c <Set_Speed_And_Direction_Motor_Left+0x44>
	}
	else
	{
		TIM1->CCR3 = 0;
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <Set_Speed_And_Direction_Motor_Left+0x5c>)
 8000272:	2200      	movs	r2, #0
 8000274:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = 0;
 8000276:	4b07      	ldr	r3, [pc, #28]	; (8000294 <Set_Speed_And_Direction_Motor_Left+0x5c>)
 8000278:	2200      	movs	r2, #0
 800027a:	641a      	str	r2, [r3, #64]	; 0x40
	}

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800027c:	2108      	movs	r1, #8
 800027e:	4806      	ldr	r0, [pc, #24]	; (8000298 <Set_Speed_And_Direction_Motor_Left+0x60>)
 8000280:	f002 fcf4 	bl	8002c6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000284:	210c      	movs	r1, #12
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <Set_Speed_And_Direction_Motor_Left+0x60>)
 8000288:	f002 fcf0 	bl	8002c6c <HAL_TIM_PWM_Start>
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40012c00 	.word	0x40012c00
 8000298:	20000028 	.word	0x20000028

0800029c <TIM1_PWM_Init>:

void TIM1_PWM_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b09a      	sub	sp, #104	; 0x68
 80002a0:	af00      	add	r7, sp, #0



  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
 80002cc:	615a      	str	r2, [r3, #20]
 80002ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	222c      	movs	r2, #44	; 0x2c
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 fd28 	bl	8003d2c <memset>


  htim1.Instance = TIM1;
 80002dc:	4b55      	ldr	r3, [pc, #340]	; (8000434 <TIM1_PWM_Init+0x198>)
 80002de:	4a56      	ldr	r2, [pc, #344]	; (8000438 <TIM1_PWM_Init+0x19c>)
 80002e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80002e2:	4b54      	ldr	r3, [pc, #336]	; (8000434 <TIM1_PWM_Init+0x198>)
 80002e4:	2247      	movs	r2, #71	; 0x47
 80002e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e8:	4b52      	ldr	r3, [pc, #328]	; (8000434 <TIM1_PWM_Init+0x198>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80002ee:	4b51      	ldr	r3, [pc, #324]	; (8000434 <TIM1_PWM_Init+0x198>)
 80002f0:	2263      	movs	r2, #99	; 0x63
 80002f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f4:	4b4f      	ldr	r3, [pc, #316]	; (8000434 <TIM1_PWM_Init+0x198>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002fa:	4b4e      	ldr	r3, [pc, #312]	; (8000434 <TIM1_PWM_Init+0x198>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000300:	4b4c      	ldr	r3, [pc, #304]	; (8000434 <TIM1_PWM_Init+0x198>)
 8000302:	2280      	movs	r2, #128	; 0x80
 8000304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000306:	484b      	ldr	r0, [pc, #300]	; (8000434 <TIM1_PWM_Init+0x198>)
 8000308:	f002 fbf8 	bl	8002afc <HAL_TIM_Base_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <TIM1_PWM_Init+0x7a>
  {
    Error_Handler();
 8000312:	f000 f9a9 	bl	8000668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800031a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800031c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000320:	4619      	mov	r1, r3
 8000322:	4844      	ldr	r0, [pc, #272]	; (8000434 <TIM1_PWM_Init+0x198>)
 8000324:	f002 fec2 	bl	80030ac <HAL_TIM_ConfigClockSource>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <TIM1_PWM_Init+0x96>
  {
    Error_Handler();
 800032e:	f000 f99b 	bl	8000668 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000332:	4840      	ldr	r0, [pc, #256]	; (8000434 <TIM1_PWM_Init+0x198>)
 8000334:	f002 fc39 	bl	8002baa <HAL_TIM_PWM_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <TIM1_PWM_Init+0xa6>
  {
    Error_Handler();
 800033e:	f000 f993 	bl	8000668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000342:	2300      	movs	r3, #0
 8000344:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000346:	2300      	movs	r3, #0
 8000348:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800034e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000352:	4619      	mov	r1, r3
 8000354:	4837      	ldr	r0, [pc, #220]	; (8000434 <TIM1_PWM_Init+0x198>)
 8000356:	f003 fbd7 	bl	8003b08 <HAL_TIMEx_MasterConfigSynchronization>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <TIM1_PWM_Init+0xc8>
  {
    Error_Handler();
 8000360:	f000 f982 	bl	8000668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000364:	2360      	movs	r3, #96	; 0x60
 8000366:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800036c:	2300      	movs	r3, #0
 800036e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000370:	2300      	movs	r3, #0
 8000372:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800037c:	2300      	movs	r3, #0
 800037e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000384:	2200      	movs	r2, #0
 8000386:	4619      	mov	r1, r3
 8000388:	482a      	ldr	r0, [pc, #168]	; (8000434 <TIM1_PWM_Init+0x198>)
 800038a:	f002 fd7b 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <TIM1_PWM_Init+0xfc>
  {
    Error_Handler();
 8000394:	f000 f968 	bl	8000668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800039c:	2204      	movs	r2, #4
 800039e:	4619      	mov	r1, r3
 80003a0:	4824      	ldr	r0, [pc, #144]	; (8000434 <TIM1_PWM_Init+0x198>)
 80003a2:	f002 fd6f 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <TIM1_PWM_Init+0x114>
  {
    Error_Handler();
 80003ac:	f000 f95c 	bl	8000668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003b4:	2208      	movs	r2, #8
 80003b6:	4619      	mov	r1, r3
 80003b8:	481e      	ldr	r0, [pc, #120]	; (8000434 <TIM1_PWM_Init+0x198>)
 80003ba:	f002 fd63 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <TIM1_PWM_Init+0x12c>
  {
    Error_Handler();
 80003c4:	f000 f950 	bl	8000668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003cc:	220c      	movs	r2, #12
 80003ce:	4619      	mov	r1, r3
 80003d0:	4818      	ldr	r0, [pc, #96]	; (8000434 <TIM1_PWM_Init+0x198>)
 80003d2:	f002 fd57 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <TIM1_PWM_Init+0x144>
  {
    Error_Handler();
 80003dc:	f000 f944 	bl	8000668 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003fe:	2300      	movs	r3, #0
 8000400:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000406:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	4619      	mov	r1, r3
 8000414:	4807      	ldr	r0, [pc, #28]	; (8000434 <TIM1_PWM_Init+0x198>)
 8000416:	f003 fc03 	bl	8003c20 <HAL_TIMEx_ConfigBreakDeadTime>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <TIM1_PWM_Init+0x188>
  {
    Error_Handler();
 8000420:	f000 f922 	bl	8000668 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8000424:	4803      	ldr	r0, [pc, #12]	; (8000434 <TIM1_PWM_Init+0x198>)
 8000426:	f000 fa23 	bl	8000870 <HAL_TIM_MspPostInit>

}
 800042a:	bf00      	nop
 800042c:	3768      	adds	r7, #104	; 0x68
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000028 	.word	0x20000028
 8000438:	40012c00 	.word	0x40012c00

0800043c <DMA_PWM_Init>:

/**
  * Enable DMA controller clock
  */
void DMA_PWM_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000442:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <DMA_PWM_Init+0x68>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <DMA_PWM_Init+0x68>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <DMA_PWM_Init+0x68>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	200c      	movs	r0, #12
 8000460:	f000 fc0d 	bl	8000c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000464:	200c      	movs	r0, #12
 8000466:	f000 fc26 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	200d      	movs	r0, #13
 8000470:	f000 fc05 	bl	8000c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000474:	200d      	movs	r0, #13
 8000476:	f000 fc1e 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200e      	movs	r0, #14
 8000480:	f000 fbfd 	bl	8000c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000484:	200e      	movs	r0, #14
 8000486:	f000 fc16 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	2010      	movs	r0, #16
 8000490:	f000 fbf5 	bl	8000c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000494:	2010      	movs	r0, #16
 8000496:	f000 fc0e 	bl	8000cb6 <HAL_NVIC_EnableIRQ>

}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <SystemClock_Config>:
#include "main.h"
#include "System_Clk_cfg.h"

void SystemClock_Config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b0a6      	sub	sp, #152	; 0x98
 80004ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004b2:	2228      	movs	r2, #40	; 0x28
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f003 fc38 	bl	8003d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2258      	movs	r2, #88	; 0x58
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 fc2a 	bl	8003d2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d8:	2302      	movs	r3, #2
 80004da:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004dc:	2301      	movs	r3, #1
 80004de:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e0:	2310      	movs	r3, #16
 80004e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e6:	2302      	movs	r3, #2
 80004e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000502:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fea0 	bl	800124c <HAL_RCC_OscConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000512:	f000 f8a9 	bl	8000668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000516:	230f      	movs	r3, #15
 8000518:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051a:	2302      	movs	r3, #2
 800051c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000526:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800052c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000530:	2102      	movs	r1, #2
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fede 	bl	80022f4 <HAL_RCC_ClockConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800053e:	f000 f893 	bl	8000668 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000546:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000548:	2300      	movs	r3, #0
 800054a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4618      	mov	r0, r3
 8000550:	f002 f8b6 	bl	80026c0 <HAL_RCCEx_PeriphCLKConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800055a:	f000 f885 	bl	8000668 <Error_Handler>
  }
}
 800055e:	bf00      	nop
 8000560:	3798      	adds	r7, #152	; 0x98
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  Robot_State = STATE_INIT;
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <main+0xb4>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fa43 	bl	80009fc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f7ff ff97 	bl	80004a8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f851 	bl	8000620 <MX_GPIO_Init>
  TIM1_PWM_Init();
 800057e:	f7ff fe8d 	bl	800029c <TIM1_PWM_Init>
  DMA_PWM_Init();
 8000582:	f7ff ff5b 	bl	800043c <DMA_PWM_Init>

  Robot_State = STATE_INIT_DONE;
 8000586:	4b25      	ldr	r3, [pc, #148]	; (800061c <main+0xb4>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    switch(Robot_State)
 800058c:	4b23      	ldr	r3, [pc, #140]	; (800061c <main+0xb4>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3b01      	subs	r3, #1
 8000592:	2b08      	cmp	r3, #8
 8000594:	d838      	bhi.n	8000608 <main+0xa0>
 8000596:	a201      	add	r2, pc, #4	; (adr r2, 800059c <main+0x34>)
 8000598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059c:	080005c1 	.word	0x080005c1
 80005a0:	080005c1 	.word	0x080005c1
 80005a4:	080005c1 	.word	0x080005c1
 80005a8:	080005c1 	.word	0x080005c1
 80005ac:	080005c1 	.word	0x080005c1
 80005b0:	080005c1 	.word	0x080005c1
 80005b4:	080005d3 	.word	0x080005d3
 80005b8:	080005e5 	.word	0x080005e5
 80005bc:	080005f7 	.word	0x080005f7
    	{
    	    //obstalce detected;
    	}
    	case STATE_MOVE_FWD:
    	{
    		Set_Speed_And_Direction_Motor_Right( 50,  MOVE_FWD);
 80005c0:	2101      	movs	r1, #1
 80005c2:	2032      	movs	r0, #50	; 0x32
 80005c4:	f7ff fe06 	bl	80001d4 <Set_Speed_And_Direction_Motor_Right>
			Set_Speed_And_Direction_Motor_Left ( 50,  MOVE_FWD);
 80005c8:	2101      	movs	r1, #1
 80005ca:	2032      	movs	r0, #50	; 0x32
 80005cc:	f7ff fe34 	bl	8000238 <Set_Speed_And_Direction_Motor_Left>
			break;
 80005d0:	e023      	b.n	800061a <main+0xb2>
    	}
    	case STATE_TURN_LEFT:
    	{
    		Set_Speed_And_Direction_Motor_Right( 20,  MOVE_FWD);
 80005d2:	2101      	movs	r1, #1
 80005d4:	2014      	movs	r0, #20
 80005d6:	f7ff fdfd 	bl	80001d4 <Set_Speed_And_Direction_Motor_Right>
    		Set_Speed_And_Direction_Motor_Left ( 40,  MOVE_BWD);
 80005da:	2100      	movs	r1, #0
 80005dc:	2028      	movs	r0, #40	; 0x28
 80005de:	f7ff fe2b 	bl	8000238 <Set_Speed_And_Direction_Motor_Left>
    		break;
 80005e2:	e01a      	b.n	800061a <main+0xb2>
    	}
    	case STATE_TURN_RIGHT:
    	{
    		Set_Speed_And_Direction_Motor_Right( 20,  MOVE_BWD);
 80005e4:	2100      	movs	r1, #0
 80005e6:	2014      	movs	r0, #20
 80005e8:	f7ff fdf4 	bl	80001d4 <Set_Speed_And_Direction_Motor_Right>
    		Set_Speed_And_Direction_Motor_Left ( 40,  MOVE_FWD);
 80005ec:	2101      	movs	r1, #1
 80005ee:	2028      	movs	r0, #40	; 0x28
 80005f0:	f7ff fe22 	bl	8000238 <Set_Speed_And_Direction_Motor_Left>
    		break;
 80005f4:	e011      	b.n	800061a <main+0xb2>
    	}
    	case STATE_STOP:
    	{
    		Set_Speed_And_Direction_Motor_Right( 0,  STOP_MOTORS);
 80005f6:	2103      	movs	r1, #3
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff fdeb 	bl	80001d4 <Set_Speed_And_Direction_Motor_Right>
    		Set_Speed_And_Direction_Motor_Left ( 0,  STOP_MOTORS);
 80005fe:	2103      	movs	r1, #3
 8000600:	2000      	movs	r0, #0
 8000602:	f7ff fe19 	bl	8000238 <Set_Speed_And_Direction_Motor_Left>
    		break;
 8000606:	e008      	b.n	800061a <main+0xb2>
    	}
    	default:
    	{
    		Set_Speed_And_Direction_Motor_Right( 0,  STOP_MOTORS);
 8000608:	2103      	movs	r1, #3
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff fde2 	bl	80001d4 <Set_Speed_And_Direction_Motor_Right>
    		Set_Speed_And_Direction_Motor_Left ( 0,  STOP_MOTORS);
 8000610:	2103      	movs	r1, #3
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff fe10 	bl	8000238 <Set_Speed_And_Direction_Motor_Left>
    		break;
 8000618:	bf00      	nop
    switch(Robot_State)
 800061a:	e7b7      	b.n	800058c <main+0x24>
 800061c:	20000184 	.word	0x20000184

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_GPIO_Init+0x44>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <MX_GPIO_Init+0x44>)
 800062c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_GPIO_Init+0x44>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_GPIO_Init+0x44>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <MX_GPIO_Init+0x44>)
 8000644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_GPIO_Init+0x44>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <Error_Handler+0x8>
	...

08000674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_MspInit+0x44>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_MspInit+0x44>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_MspInit+0x44>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_MspInit+0x44>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <HAL_MspInit+0x44>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_MspInit+0x44>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a5f      	ldr	r2, [pc, #380]	; (8000848 <HAL_TIM_Base_MspInit+0x18c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	f040 80b8 	bne.w	8000840 <HAL_TIM_Base_MspInit+0x184>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006d0:	4b5e      	ldr	r3, [pc, #376]	; (800084c <HAL_TIM_Base_MspInit+0x190>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a5d      	ldr	r2, [pc, #372]	; (800084c <HAL_TIM_Base_MspInit+0x190>)
 80006d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b5b      	ldr	r3, [pc, #364]	; (800084c <HAL_TIM_Base_MspInit+0x190>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80006e8:	4b59      	ldr	r3, [pc, #356]	; (8000850 <HAL_TIM_Base_MspInit+0x194>)
 80006ea:	4a5a      	ldr	r2, [pc, #360]	; (8000854 <HAL_TIM_Base_MspInit+0x198>)
 80006ec:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006ee:	4b58      	ldr	r3, [pc, #352]	; (8000850 <HAL_TIM_Base_MspInit+0x194>)
 80006f0:	2210      	movs	r2, #16
 80006f2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f4:	4b56      	ldr	r3, [pc, #344]	; (8000850 <HAL_TIM_Base_MspInit+0x194>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80006fa:	4b55      	ldr	r3, [pc, #340]	; (8000850 <HAL_TIM_Base_MspInit+0x194>)
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000700:	4b53      	ldr	r3, [pc, #332]	; (8000850 <HAL_TIM_Base_MspInit+0x194>)
 8000702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000706:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000708:	4b51      	ldr	r3, [pc, #324]	; (8000850 <HAL_TIM_Base_MspInit+0x194>)
 800070a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800070e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000710:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <HAL_TIM_Base_MspInit+0x194>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000716:	4b4e      	ldr	r3, [pc, #312]	; (8000850 <HAL_TIM_Base_MspInit+0x194>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800071c:	484c      	ldr	r0, [pc, #304]	; (8000850 <HAL_TIM_Base_MspInit+0x194>)
 800071e:	f000 fae4 	bl	8000cea <HAL_DMA_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000728:	f7ff ff9e 	bl	8000668 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a48      	ldr	r2, [pc, #288]	; (8000850 <HAL_TIM_Base_MspInit+0x194>)
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
 8000732:	4a47      	ldr	r2, [pc, #284]	; (8000850 <HAL_TIM_Base_MspInit+0x194>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 8000738:	4b47      	ldr	r3, [pc, #284]	; (8000858 <HAL_TIM_Base_MspInit+0x19c>)
 800073a:	4a48      	ldr	r2, [pc, #288]	; (800085c <HAL_TIM_Base_MspInit+0x1a0>)
 800073c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800073e:	4b46      	ldr	r3, [pc, #280]	; (8000858 <HAL_TIM_Base_MspInit+0x19c>)
 8000740:	2210      	movs	r2, #16
 8000742:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000744:	4b44      	ldr	r3, [pc, #272]	; (8000858 <HAL_TIM_Base_MspInit+0x19c>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800074a:	4b43      	ldr	r3, [pc, #268]	; (8000858 <HAL_TIM_Base_MspInit+0x19c>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000750:	4b41      	ldr	r3, [pc, #260]	; (8000858 <HAL_TIM_Base_MspInit+0x19c>)
 8000752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000756:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000758:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <HAL_TIM_Base_MspInit+0x19c>)
 800075a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800075e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8000760:	4b3d      	ldr	r3, [pc, #244]	; (8000858 <HAL_TIM_Base_MspInit+0x19c>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000766:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <HAL_TIM_Base_MspInit+0x19c>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800076c:	483a      	ldr	r0, [pc, #232]	; (8000858 <HAL_TIM_Base_MspInit+0x19c>)
 800076e:	f000 fabc 	bl	8000cea <HAL_DMA_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <HAL_TIM_Base_MspInit+0xc0>
    {
      Error_Handler();
 8000778:	f7ff ff76 	bl	8000668 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a36      	ldr	r2, [pc, #216]	; (8000858 <HAL_TIM_Base_MspInit+0x19c>)
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
 8000782:	4a35      	ldr	r2, [pc, #212]	; (8000858 <HAL_TIM_Base_MspInit+0x19c>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <HAL_TIM_Base_MspInit+0x1a4>)
 800078a:	4a36      	ldr	r2, [pc, #216]	; (8000864 <HAL_TIM_Base_MspInit+0x1a8>)
 800078c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <HAL_TIM_Base_MspInit+0x1a4>)
 8000790:	2210      	movs	r2, #16
 8000792:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000794:	4b32      	ldr	r3, [pc, #200]	; (8000860 <HAL_TIM_Base_MspInit+0x1a4>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <HAL_TIM_Base_MspInit+0x1a4>)
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <HAL_TIM_Base_MspInit+0x1a4>)
 80007a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007a8:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <HAL_TIM_Base_MspInit+0x1a4>)
 80007aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ae:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <HAL_TIM_Base_MspInit+0x1a4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <HAL_TIM_Base_MspInit+0x1a4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80007bc:	4828      	ldr	r0, [pc, #160]	; (8000860 <HAL_TIM_Base_MspInit+0x1a4>)
 80007be:	f000 fa94 	bl	8000cea <HAL_DMA_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <HAL_TIM_Base_MspInit+0x110>
    {
      Error_Handler();
 80007c8:	f7ff ff4e 	bl	8000668 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a24      	ldr	r2, [pc, #144]	; (8000860 <HAL_TIM_Base_MspInit+0x1a4>)
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
 80007d2:	4a23      	ldr	r2, [pc, #140]	; (8000860 <HAL_TIM_Base_MspInit+0x1a4>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 80007da:	4a24      	ldr	r2, [pc, #144]	; (800086c <HAL_TIM_Base_MspInit+0x1b0>)
 80007dc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 80007e0:	2210      	movs	r2, #16
 80007e2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e4:	4b20      	ldr	r3, [pc, #128]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 80007f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007f6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 80007fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007fe:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 800080c:	4816      	ldr	r0, [pc, #88]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 800080e:	f000 fa6c 	bl	8000cea <HAL_DMA_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_TIM_Base_MspInit+0x160>
    {
      Error_Handler();
 8000818:	f7ff ff26 	bl	8000668 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
 8000822:	4a11      	ldr	r2, [pc, #68]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 800082c:	639a      	str	r2, [r3, #56]	; 0x38
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <HAL_TIM_Base_MspInit+0x1ac>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40012c00 	.word	0x40012c00
 800084c:	40021000 	.word	0x40021000
 8000850:	20000074 	.word	0x20000074
 8000854:	4002001c 	.word	0x4002001c
 8000858:	200000b8 	.word	0x200000b8
 800085c:	4002006c 	.word	0x4002006c
 8000860:	200000fc 	.word	0x200000fc
 8000864:	40020030 	.word	0x40020030
 8000868:	20000140 	.word	0x20000140
 800086c:	40020044 	.word	0x40020044

08000870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <HAL_TIM_MspPostInit+0x64>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d11b      	bne.n	80008ca <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_TIM_MspPostInit+0x68>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <HAL_TIM_MspPostInit+0x68>)
 8000898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800089c:	6153      	str	r3, [r2, #20]
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_TIM_MspPostInit+0x68>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80008aa:	230f      	movs	r3, #15
 80008ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_TIM_MspPostInit+0x6c>)
 80008c6:	f000 fb37 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40012c00 	.word	0x40012c00
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000800 	.word	0x48000800

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f8ac 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <DMA1_Channel2_IRQHandler+0x10>)
 800093a:	f000 fa1d 	bl	8000d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000074 	.word	0x20000074

08000948 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <DMA1_Channel3_IRQHandler+0x10>)
 800094e:	f000 fa13 	bl	8000d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000fc 	.word	0x200000fc

0800095c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <DMA1_Channel4_IRQHandler+0x10>)
 8000962:	f000 fa09 	bl	8000d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000140 	.word	0x20000140

08000970 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <DMA1_Channel6_IRQHandler+0x10>)
 8000976:	f000 f9ff 	bl	8000d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000b8 	.word	0x200000b8

08000984 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ac:	f7ff ffea 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	; (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	; (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d6:	f003 f9b1 	bl	8003d3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009da:	f7ff fdc5 	bl	8000568 <main>

080009de <LoopForever>:

LoopForever:
    b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009ec:	08003dd4 	.word	0x08003dd4
  ldr r2, =_sbss
 80009f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f4:	2000018c 	.word	0x2000018c

080009f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_2_IRQHandler>
	...

080009fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_Init+0x28>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_Init+0x28>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f92b 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	200f      	movs	r0, #15
 8000a14:	f000 f808 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff fe2c 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40022000 	.word	0x40022000

08000a28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x54>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f943 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00e      	b.n	8000a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d80a      	bhi.n	8000a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 f90b 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <HAL_InitTick+0x5c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000188 	.word	0x20000188

08000ab0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000188 	.word	0x20000188

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db0b      	blt.n	8000b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	f003 021f 	and.w	r2, r3, #31
 8000b44:	4907      	ldr	r1, [pc, #28]	; (8000b64 <__NVIC_EnableIRQ+0x38>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff29 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff3e 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff31 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa2 	bl	8000c24 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e037      	b.n	8000d70 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2202      	movs	r2, #2
 8000d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f8b4 	bl	8000ec0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2201      	movs	r2, #1
 8000d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
}  
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	2204      	movs	r2, #4
 8000d96:	409a      	lsls	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d024      	beq.n	8000dea <HAL_DMA_IRQHandler+0x72>
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d01f      	beq.n	8000dea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0320 	and.w	r3, r3, #32
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d107      	bne.n	8000dc8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0204 	bic.w	r2, r2, #4
 8000dc6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d06a      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000de8:	e065      	b.n	8000eb6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	2202      	movs	r2, #2
 8000df0:	409a      	lsls	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d02c      	beq.n	8000e54 <HAL_DMA_IRQHandler+0xdc>
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d027      	beq.n	8000e54 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10b      	bne.n	8000e2a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 020a 	bic.w	r2, r2, #10
 8000e20:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e32:	2102      	movs	r1, #2
 8000e34:	fa01 f202 	lsl.w	r2, r1, r2
 8000e38:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d035      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000e52:	e030      	b.n	8000eb6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	2208      	movs	r2, #8
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d028      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x13e>
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d023      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 020e 	bic.w	r2, r2, #14
 8000e7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2201      	movs	r2, #1
 8000e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d004      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	4798      	blx	r3
    }
  }
}  
 8000eb4:	e7ff      	b.n	8000eb6 <HAL_DMA_IRQHandler+0x13e>
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <DMA_CalcBaseAndBitshift+0x60>)
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d80f      	bhi.n	8000ef4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <DMA_CalcBaseAndBitshift+0x64>)
 8000edc:	4413      	add	r3, r2
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <DMA_CalcBaseAndBitshift+0x68>)
 8000ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	009a      	lsls	r2, r3, #2
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <DMA_CalcBaseAndBitshift+0x6c>)
 8000ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000ef2:	e00e      	b.n	8000f12 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <DMA_CalcBaseAndBitshift+0x70>)
 8000efc:	4413      	add	r3, r2
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <DMA_CalcBaseAndBitshift+0x68>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	009a      	lsls	r2, r3, #2
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <DMA_CalcBaseAndBitshift+0x74>)
 8000f10:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40020407 	.word	0x40020407
 8000f24:	bffdfff8 	.word	0xbffdfff8
 8000f28:	cccccccd 	.word	0xcccccccd
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	bffdfbf8 	.word	0xbffdfbf8
 8000f34:	40020400 	.word	0x40020400

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	e160      	b.n	800120a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	4013      	ands	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 8152 	beq.w	8001204 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d005      	beq.n	8000f78 <HAL_GPIO_Init+0x40>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d130      	bne.n	8000fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	f003 0201 	and.w	r2, r3, #1
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d017      	beq.n	8001016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d123      	bne.n	800106a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	691a      	ldr	r2, [r3, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0203 	and.w	r2, r3, #3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 80ac 	beq.w	8001204 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ac:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a5d      	ldr	r2, [pc, #372]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c4:	4a59      	ldr	r2, [pc, #356]	; (800122c <HAL_GPIO_Init+0x2f4>)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ee:	d025      	beq.n	800113c <HAL_GPIO_Init+0x204>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a4f      	ldr	r2, [pc, #316]	; (8001230 <HAL_GPIO_Init+0x2f8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d01f      	beq.n	8001138 <HAL_GPIO_Init+0x200>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a4e      	ldr	r2, [pc, #312]	; (8001234 <HAL_GPIO_Init+0x2fc>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d019      	beq.n	8001134 <HAL_GPIO_Init+0x1fc>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4d      	ldr	r2, [pc, #308]	; (8001238 <HAL_GPIO_Init+0x300>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d013      	beq.n	8001130 <HAL_GPIO_Init+0x1f8>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4c      	ldr	r2, [pc, #304]	; (800123c <HAL_GPIO_Init+0x304>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d00d      	beq.n	800112c <HAL_GPIO_Init+0x1f4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4b      	ldr	r2, [pc, #300]	; (8001240 <HAL_GPIO_Init+0x308>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d007      	beq.n	8001128 <HAL_GPIO_Init+0x1f0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a4a      	ldr	r2, [pc, #296]	; (8001244 <HAL_GPIO_Init+0x30c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d101      	bne.n	8001124 <HAL_GPIO_Init+0x1ec>
 8001120:	2306      	movs	r3, #6
 8001122:	e00c      	b.n	800113e <HAL_GPIO_Init+0x206>
 8001124:	2307      	movs	r3, #7
 8001126:	e00a      	b.n	800113e <HAL_GPIO_Init+0x206>
 8001128:	2305      	movs	r3, #5
 800112a:	e008      	b.n	800113e <HAL_GPIO_Init+0x206>
 800112c:	2304      	movs	r3, #4
 800112e:	e006      	b.n	800113e <HAL_GPIO_Init+0x206>
 8001130:	2303      	movs	r3, #3
 8001132:	e004      	b.n	800113e <HAL_GPIO_Init+0x206>
 8001134:	2302      	movs	r3, #2
 8001136:	e002      	b.n	800113e <HAL_GPIO_Init+0x206>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <HAL_GPIO_Init+0x206>
 800113c:	2300      	movs	r3, #0
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	f002 0203 	and.w	r2, r2, #3
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4093      	lsls	r3, r2
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800114e:	4937      	ldr	r1, [pc, #220]	; (800122c <HAL_GPIO_Init+0x2f4>)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115c:	4b3a      	ldr	r3, [pc, #232]	; (8001248 <HAL_GPIO_Init+0x310>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001180:	4a31      	ldr	r2, [pc, #196]	; (8001248 <HAL_GPIO_Init+0x310>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_GPIO_Init+0x310>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011aa:	4a27      	ldr	r2, [pc, #156]	; (8001248 <HAL_GPIO_Init+0x310>)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_GPIO_Init+0x310>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011d4:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <HAL_GPIO_Init+0x310>)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_GPIO_Init+0x310>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <HAL_GPIO_Init+0x310>)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	f47f ae97 	bne.w	8000f48 <HAL_GPIO_Init+0x10>
  }
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	371c      	adds	r7, #28
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40021000 	.word	0x40021000
 800122c:	40010000 	.word	0x40010000
 8001230:	48000400 	.word	0x48000400
 8001234:	48000800 	.word	0x48000800
 8001238:	48000c00 	.word	0x48000c00
 800123c:	48001000 	.word	0x48001000
 8001240:	48001400 	.word	0x48001400
 8001244:	48001800 	.word	0x48001800
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001252:	af00      	add	r7, sp, #0
 8001254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001258:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800125c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800125e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001262:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	f001 b83a 	b.w	80022e6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001276:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 816f 	beq.w	8001566 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001288:	4bb5      	ldr	r3, [pc, #724]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b04      	cmp	r3, #4
 8001292:	d00c      	beq.n	80012ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001294:	4bb2      	ldr	r3, [pc, #712]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b08      	cmp	r3, #8
 800129e:	d15c      	bne.n	800135a <HAL_RCC_OscConfig+0x10e>
 80012a0:	4baf      	ldr	r3, [pc, #700]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ac:	d155      	bne.n	800135a <HAL_RCC_OscConfig+0x10e>
 80012ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80012ba:	fa93 f3a3 	rbit	r3, r3
 80012be:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012c2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c6:	fab3 f383 	clz	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	095b      	lsrs	r3, r3, #5
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d102      	bne.n	80012e0 <HAL_RCC_OscConfig+0x94>
 80012da:	4ba1      	ldr	r3, [pc, #644]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	e015      	b.n	800130c <HAL_RCC_OscConfig+0xc0>
 80012e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80012f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012fc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001308:	4b95      	ldr	r3, [pc, #596]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001310:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001314:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001318:	fa92 f2a2 	rbit	r2, r2
 800131c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001320:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001324:	fab2 f282 	clz	r2, r2
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	f042 0220 	orr.w	r2, r2, #32
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	f002 021f 	and.w	r2, r2, #31
 8001334:	2101      	movs	r1, #1
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8111 	beq.w	8001564 <HAL_RCC_OscConfig+0x318>
 8001342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001346:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f040 8108 	bne.w	8001564 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	f000 bfc6 	b.w	80022e6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800135e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x12e>
 800136c:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a7b      	ldr	r2, [pc, #492]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 8001372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e036      	b.n	80013e8 <HAL_RCC_OscConfig+0x19c>
 800137a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800137e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x158>
 800138a:	4b75      	ldr	r3, [pc, #468]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a74      	ldr	r2, [pc, #464]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 8001390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b72      	ldr	r3, [pc, #456]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a71      	ldr	r2, [pc, #452]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 800139c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e021      	b.n	80013e8 <HAL_RCC_OscConfig+0x19c>
 80013a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x184>
 80013b6:	4b6a      	ldr	r3, [pc, #424]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a69      	ldr	r2, [pc, #420]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 80013bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b67      	ldr	r3, [pc, #412]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a66      	ldr	r2, [pc, #408]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0x19c>
 80013d0:	4b63      	ldr	r3, [pc, #396]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a62      	ldr	r2, [pc, #392]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 80013d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b60      	ldr	r3, [pc, #384]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a5f      	ldr	r2, [pc, #380]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 80013e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d059      	beq.n	80014ac <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fb5a 	bl	8000ab0 <HAL_GetTick>
 80013fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001402:	f7ff fb55 	bl	8000ab0 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d902      	bls.n	8001418 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	f000 bf67 	b.w	80022e6 <HAL_RCC_OscConfig+0x109a>
 8001418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800142c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d102      	bne.n	800144a <HAL_RCC_OscConfig+0x1fe>
 8001444:	4b46      	ldr	r3, [pc, #280]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x22a>
 800144a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001456:	fa93 f3a3 	rbit	r3, r3
 800145a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800145e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001462:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001466:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800146a:	fa93 f3a3 	rbit	r3, r3
 800146e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800147a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800147e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001482:	fa92 f2a2 	rbit	r2, r2
 8001486:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800148a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800148e:	fab2 f282 	clz	r2, r2
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	f042 0220 	orr.w	r2, r2, #32
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	f002 021f 	and.w	r2, r2, #31
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0ab      	beq.n	8001402 <HAL_RCC_OscConfig+0x1b6>
 80014aa:	e05c      	b.n	8001566 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb00 	bl	8000ab0 <HAL_GetTick>
 80014b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b6:	f7ff fafb 	bl	8000ab0 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d902      	bls.n	80014cc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f000 bf0d 	b.w	80022e6 <HAL_RCC_OscConfig+0x109a>
 80014cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80014e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d102      	bne.n	80014fe <HAL_RCC_OscConfig+0x2b2>
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0x2de>
 80014fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001502:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001516:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800151a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_RCC_OscConfig+0x314>)
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001532:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001536:	fa92 f2a2 	rbit	r2, r2
 800153a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800153e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001542:	fab2 f282 	clz	r2, r2
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f042 0220 	orr.w	r2, r2, #32
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	f002 021f 	and.w	r2, r2, #31
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ab      	bne.n	80014b6 <HAL_RCC_OscConfig+0x26a>
 800155e:	e002      	b.n	8001566 <HAL_RCC_OscConfig+0x31a>
 8001560:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800156a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 817f 	beq.w	800187a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800157c:	4ba7      	ldr	r3, [pc, #668]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001588:	4ba4      	ldr	r3, [pc, #656]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b08      	cmp	r3, #8
 8001592:	d173      	bne.n	800167c <HAL_RCC_OscConfig+0x430>
 8001594:	4ba1      	ldr	r3, [pc, #644]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800159c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015a0:	d16c      	bne.n	800167c <HAL_RCC_OscConfig+0x430>
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80015b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d102      	bne.n	80015d2 <HAL_RCC_OscConfig+0x386>
 80015cc:	4b93      	ldr	r3, [pc, #588]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e013      	b.n	80015fa <HAL_RCC_OscConfig+0x3ae>
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015dc:	fa93 f3a3 	rbit	r3, r3
 80015e0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015ea:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015f6:	4b89      	ldr	r3, [pc, #548]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	2202      	movs	r2, #2
 80015fc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001600:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001604:	fa92 f2a2 	rbit	r2, r2
 8001608:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800160c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001610:	fab2 f282 	clz	r2, r2
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	f042 0220 	orr.w	r2, r2, #32
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	f002 021f 	and.w	r2, r2, #31
 8001620:	2101      	movs	r1, #1
 8001622:	fa01 f202 	lsl.w	r2, r1, r2
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00a      	beq.n	8001642 <HAL_RCC_OscConfig+0x3f6>
 800162c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001630:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d002      	beq.n	8001642 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	f000 be52 	b.w	80022e6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800164a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	21f8      	movs	r1, #248	; 0xf8
 8001658:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001660:	fa91 f1a1 	rbit	r1, r1
 8001664:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001668:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800166c:	fab1 f181 	clz	r1, r1
 8001670:	b2c9      	uxtb	r1, r1
 8001672:	408b      	lsls	r3, r1
 8001674:	4969      	ldr	r1, [pc, #420]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	e0fe      	b.n	800187a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800167c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001680:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8088 	beq.w	800179e <HAL_RCC_OscConfig+0x552>
 800168e:	2301      	movs	r3, #1
 8001690:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80016a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	461a      	mov	r2, r3
 80016b6:	2301      	movs	r3, #1
 80016b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff f9f9 	bl	8000ab0 <HAL_GetTick>
 80016be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	e00a      	b.n	80016da <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff f9f4 	bl	8000ab0 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d902      	bls.n	80016da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f000 be06 	b.w	80022e6 <HAL_RCC_OscConfig+0x109a>
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80016e4:	fa93 f3a3 	rbit	r3, r3
 80016e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80016ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d102      	bne.n	800170a <HAL_RCC_OscConfig+0x4be>
 8001704:	4b45      	ldr	r3, [pc, #276]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	e013      	b.n	8001732 <HAL_RCC_OscConfig+0x4e6>
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800171c:	2302      	movs	r3, #2
 800171e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001722:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	2202      	movs	r2, #2
 8001734:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001738:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800173c:	fa92 f2a2 	rbit	r2, r2
 8001740:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001744:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001748:	fab2 f282 	clz	r2, r2
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f042 0220 	orr.w	r2, r2, #32
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	f002 021f 	and.w	r2, r2, #31
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f202 	lsl.w	r2, r1, r2
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0af      	beq.n	80016c4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001770:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	21f8      	movs	r1, #248	; 0xf8
 800177a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001782:	fa91 f1a1 	rbit	r1, r1
 8001786:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800178a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800178e:	fab1 f181 	clz	r1, r1
 8001792:	b2c9      	uxtb	r1, r1
 8001794:	408b      	lsls	r3, r1
 8001796:	4921      	ldr	r1, [pc, #132]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e06d      	b.n	800187a <HAL_RCC_OscConfig+0x62e>
 800179e:	2301      	movs	r3, #1
 80017a0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80017b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	461a      	mov	r2, r3
 80017c6:	2300      	movs	r3, #0
 80017c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff f971 	bl	8000ab0 <HAL_GetTick>
 80017ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff f96c 	bl	8000ab0 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d902      	bls.n	80017ea <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	f000 bd7e 	b.w	80022e6 <HAL_RCC_OscConfig+0x109a>
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80017fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_RCC_OscConfig+0x5d4>
 8001814:	4b01      	ldr	r3, [pc, #4]	; (800181c <HAL_RCC_OscConfig+0x5d0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	e016      	b.n	8001848 <HAL_RCC_OscConfig+0x5fc>
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	2302      	movs	r3, #2
 8001822:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001832:	2302      	movs	r3, #2
 8001834:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001838:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800183c:	fa93 f3a3 	rbit	r3, r3
 8001840:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001844:	4bbf      	ldr	r3, [pc, #764]	; (8001b44 <HAL_RCC_OscConfig+0x8f8>)
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	2202      	movs	r2, #2
 800184a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800184e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001852:	fa92 f2a2 	rbit	r2, r2
 8001856:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800185a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800185e:	fab2 f282 	clz	r2, r2
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	f042 0220 	orr.w	r2, r2, #32
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	f002 021f 	and.w	r2, r2, #31
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ac      	bne.n	80017d4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8113 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001894:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d07c      	beq.n	800199a <HAL_RCC_OscConfig+0x74e>
 80018a0:	2301      	movs	r3, #1
 80018a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018aa:	fa93 f3a3 	rbit	r3, r3
 80018ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80018b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	4ba2      	ldr	r3, [pc, #648]	; (8001b48 <HAL_RCC_OscConfig+0x8fc>)
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	2301      	movs	r3, #1
 80018c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f8f1 	bl	8000ab0 <HAL_GetTick>
 80018ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff f8ec 	bl	8000ab0 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d902      	bls.n	80018ea <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f000 bcfe 	b.w	80022e6 <HAL_RCC_OscConfig+0x109a>
 80018ea:	2302      	movs	r3, #2
 80018ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018f4:	fa93 f2a3 	rbit	r2, r3
 80018f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800190a:	2202      	movs	r2, #2
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f2a3 	rbit	r2, r3
 800191c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800192e:	2202      	movs	r2, #2
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001936:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001944:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001948:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	4b7e      	ldr	r3, [pc, #504]	; (8001b44 <HAL_RCC_OscConfig+0x8f8>)
 800194c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001956:	2102      	movs	r1, #2
 8001958:	6019      	str	r1, [r3, #0]
 800195a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	fa93 f1a3 	rbit	r1, r3
 8001968:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001970:	6019      	str	r1, [r3, #0]
  return result;
 8001972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001976:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	2101      	movs	r1, #1
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d09d      	beq.n	80018d4 <HAL_RCC_OscConfig+0x688>
 8001998:	e08d      	b.n	8001ab6 <HAL_RCC_OscConfig+0x86a>
 800199a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019bc:	601a      	str	r2, [r3, #0]
  return result;
 80019be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019c6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x8fc>)
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	461a      	mov	r2, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff f868 	bl	8000ab0 <HAL_GetTick>
 80019e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e4:	e00a      	b.n	80019fc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff f863 	bl	8000ab0 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d902      	bls.n	80019fc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	f000 bc75 	b.w	80022e6 <HAL_RCC_OscConfig+0x109a>
 80019fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a04:	2202      	movs	r2, #2
 8001a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a28:	2202      	movs	r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	fa93 f2a3 	rbit	r2, r3
 8001a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <HAL_RCC_OscConfig+0x8f8>)
 8001a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a74:	2102      	movs	r1, #2
 8001a76:	6019      	str	r1, [r3, #0]
 8001a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fa93 f1a3 	rbit	r1, r3
 8001a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a8e:	6019      	str	r1, [r3, #0]
  return result;
 8001a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a94:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d197      	bne.n	80019e6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 81a5 	beq.w	8001e16 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_RCC_OscConfig+0x8f8>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d116      	bne.n	8001b0c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_OscConfig+0x8f8>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_RCC_OscConfig+0x8f8>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_RCC_OscConfig+0x8f8>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b04:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_RCC_OscConfig+0x900>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d121      	bne.n	8001b5c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_OscConfig+0x900>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_RCC_OscConfig+0x900>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b24:	f7fe ffc4 	bl	8000ab0 <HAL_GetTick>
 8001b28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	e010      	b.n	8001b50 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7fe ffbf 	bl	8000ab0 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d908      	bls.n	8001b50 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e3d1      	b.n	80022e6 <HAL_RCC_OscConfig+0x109a>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	10908120 	.word	0x10908120
 8001b4c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	4b8d      	ldr	r3, [pc, #564]	; (8001d88 <HAL_RCC_OscConfig+0xb3c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0e8      	beq.n	8001b2e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x92e>
 8001b6c:	4b87      	ldr	r3, [pc, #540]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a86      	ldr	r2, [pc, #536]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	e035      	b.n	8001be6 <HAL_RCC_OscConfig+0x99a>
 8001b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x958>
 8001b8a:	4b80      	ldr	r3, [pc, #512]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a7f      	ldr	r2, [pc, #508]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6213      	str	r3, [r2, #32]
 8001b96:	4b7d      	ldr	r3, [pc, #500]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a7c      	ldr	r2, [pc, #496]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	e020      	b.n	8001be6 <HAL_RCC_OscConfig+0x99a>
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d10c      	bne.n	8001bce <HAL_RCC_OscConfig+0x982>
 8001bb4:	4b75      	ldr	r3, [pc, #468]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a74      	ldr	r2, [pc, #464]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6213      	str	r3, [r2, #32]
 8001bc0:	4b72      	ldr	r3, [pc, #456]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a71      	ldr	r2, [pc, #452]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	e00b      	b.n	8001be6 <HAL_RCC_OscConfig+0x99a>
 8001bce:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a6e      	ldr	r2, [pc, #440]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b6c      	ldr	r3, [pc, #432]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a6b      	ldr	r2, [pc, #428]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8081 	beq.w	8001cfa <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7fe ff5a 	bl	8000ab0 <HAL_GetTick>
 8001bfc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	e00b      	b.n	8001c1a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7fe ff55 	bl	8000ab0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e365      	b.n	80022e6 <HAL_RCC_OscConfig+0x109a>
 8001c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c22:	2202      	movs	r2, #2
 8001c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	fa93 f2a3 	rbit	r2, r3
 8001c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c46:	2202      	movs	r2, #2
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f2a3 	rbit	r2, r3
 8001c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c60:	601a      	str	r2, [r3, #0]
  return result;
 8001c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c66:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d102      	bne.n	8001c86 <HAL_RCC_OscConfig+0xa3a>
 8001c80:	4b42      	ldr	r3, [pc, #264]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	e013      	b.n	8001cae <HAL_RCC_OscConfig+0xa62>
 8001c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c8e:	2202      	movs	r2, #2
 8001c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c96:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	fa93 f2a3 	rbit	r2, r3
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cb2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	6011      	str	r1, [r2, #0]
 8001cba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cbe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	fa92 f1a2 	rbit	r1, r2
 8001cc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ccc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001cd0:	6011      	str	r1, [r2, #0]
  return result;
 8001cd2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cd6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	fab2 f282 	clz	r2, r2
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	f002 021f 	and.w	r2, r2, #31
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d084      	beq.n	8001c02 <HAL_RCC_OscConfig+0x9b6>
 8001cf8:	e083      	b.n	8001e02 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7fe fed9 	bl	8000ab0 <HAL_GetTick>
 8001cfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d04:	f7fe fed4 	bl	8000ab0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e2e4      	b.n	80022e6 <HAL_RCC_OscConfig+0x109a>
 8001d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d20:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d24:	2202      	movs	r2, #2
 8001d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	fa93 f2a3 	rbit	r2, r3
 8001d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d44:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d48:	2202      	movs	r2, #2
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d50:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	fa93 f2a3 	rbit	r2, r3
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d62:	601a      	str	r2, [r3, #0]
  return result;
 8001d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d68:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d106      	bne.n	8001d90 <HAL_RCC_OscConfig+0xb44>
 8001d82:	4b02      	ldr	r3, [pc, #8]	; (8001d8c <HAL_RCC_OscConfig+0xb40>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	e017      	b.n	8001db8 <HAL_RCC_OscConfig+0xb6c>
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d94:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d98:	2202      	movs	r2, #2
 8001d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	fa93 f2a3 	rbit	r2, r3
 8001daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dae:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	4bb3      	ldr	r3, [pc, #716]	; (8002084 <HAL_RCC_OscConfig+0xe38>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dbc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	6011      	str	r1, [r2, #0]
 8001dc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dc8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	fa92 f1a2 	rbit	r1, r2
 8001dd2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dd6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001dda:	6011      	str	r1, [r2, #0]
  return result;
 8001ddc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001de0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	fab2 f282 	clz	r2, r2
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f002 021f 	and.w	r2, r2, #31
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d180      	bne.n	8001d04 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e02:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d105      	bne.n	8001e16 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0a:	4b9e      	ldr	r3, [pc, #632]	; (8002084 <HAL_RCC_OscConfig+0xe38>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a9d      	ldr	r2, [pc, #628]	; (8002084 <HAL_RCC_OscConfig+0xe38>)
 8001e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e14:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 825e 	beq.w	80022e4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b96      	ldr	r3, [pc, #600]	; (8002084 <HAL_RCC_OscConfig+0xe38>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	f000 821f 	beq.w	8002274 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	f040 8170 	bne.w	8002128 <HAL_RCC_OscConfig+0xedc>
 8001e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	fa93 f2a3 	rbit	r2, r3
 8001e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e68:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e6c:	601a      	str	r2, [r3, #0]
  return result;
 8001e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e72:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e76:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fe0f 	bl	8000ab0 <HAL_GetTick>
 8001e92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e96:	e009      	b.n	8001eac <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe fe0a 	bl	8000ab0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e21c      	b.n	80022e6 <HAL_RCC_OscConfig+0x109a>
 8001eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	fa93 f2a3 	rbit	r2, r3
 8001ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ecc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ed0:	601a      	str	r2, [r3, #0]
  return result;
 8001ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001eda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d102      	bne.n	8001ef6 <HAL_RCC_OscConfig+0xcaa>
 8001ef0:	4b64      	ldr	r3, [pc, #400]	; (8002084 <HAL_RCC_OscConfig+0xe38>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	e027      	b.n	8001f46 <HAL_RCC_OscConfig+0xcfa>
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f08:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f16:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f2a3 	rbit	r2, r3
 8001f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	4b50      	ldr	r3, [pc, #320]	; (8002084 <HAL_RCC_OscConfig+0xe38>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f4a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f52:	6011      	str	r1, [r2, #0]
 8001f54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f58:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	fa92 f1a2 	rbit	r1, r2
 8001f62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f66:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001f6a:	6011      	str	r1, [r2, #0]
  return result;
 8001f6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f70:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	fab2 f282 	clz	r2, r2
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f042 0220 	orr.w	r2, r2, #32
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f002 021f 	and.w	r2, r2, #31
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d182      	bne.n	8001e98 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f92:	4b3c      	ldr	r3, [pc, #240]	; (8002084 <HAL_RCC_OscConfig+0xe38>)
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	f023 020f 	bic.w	r2, r3, #15
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	4937      	ldr	r1, [pc, #220]	; (8002084 <HAL_RCC_OscConfig+0xe38>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001fac:	4b35      	ldr	r3, [pc, #212]	; (8002084 <HAL_RCC_OscConfig+0xe38>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a19      	ldr	r1, [r3, #32]
 8001fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	492d      	ldr	r1, [pc, #180]	; (8002084 <HAL_RCC_OscConfig+0xe38>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
 8001fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	fa93 f2a3 	rbit	r2, r3
 8001ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ff8:	601a      	str	r2, [r3, #0]
  return result;
 8001ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002002:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800200e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	461a      	mov	r2, r3
 8002016:	2301      	movs	r3, #1
 8002018:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7fe fd49 	bl	8000ab0 <HAL_GetTick>
 800201e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002022:	e009      	b.n	8002038 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002024:	f7fe fd44 	bl	8000ab0 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e156      	b.n	80022e6 <HAL_RCC_OscConfig+0x109a>
 8002038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002058:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800205c:	601a      	str	r2, [r3, #0]
  return result;
 800205e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002062:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002066:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_RCC_OscConfig+0xe3c>
 800207c:	4b01      	ldr	r3, [pc, #4]	; (8002084 <HAL_RCC_OscConfig+0xe38>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	e02a      	b.n	80020d8 <HAL_RCC_OscConfig+0xe8c>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	fa93 f2a3 	rbit	r2, r3
 80020a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80020b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ce:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	4b86      	ldr	r3, [pc, #536]	; (80022f0 <HAL_RCC_OscConfig+0x10a4>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020dc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020e4:	6011      	str	r1, [r2, #0]
 80020e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020ea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	fa92 f1a2 	rbit	r1, r2
 80020f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020f8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80020fc:	6011      	str	r1, [r2, #0]
  return result;
 80020fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002102:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	fab2 f282 	clz	r2, r2
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f042 0220 	orr.w	r2, r2, #32
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f002 021f 	and.w	r2, r2, #31
 8002118:	2101      	movs	r1, #1
 800211a:	fa01 f202 	lsl.w	r2, r1, r2
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	f43f af7f 	beq.w	8002024 <HAL_RCC_OscConfig+0xdd8>
 8002126:	e0dd      	b.n	80022e4 <HAL_RCC_OscConfig+0x1098>
 8002128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f2a3 	rbit	r2, r3
 8002144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002148:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800214c:	601a      	str	r2, [r3, #0]
  return result;
 800214e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002152:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002156:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002162:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	461a      	mov	r2, r3
 800216a:	2300      	movs	r3, #0
 800216c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7fe fc9f 	bl	8000ab0 <HAL_GetTick>
 8002172:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	e009      	b.n	800218c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002178:	f7fe fc9a 	bl	8000ab0 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0ac      	b.n	80022e6 <HAL_RCC_OscConfig+0x109a>
 800218c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002190:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	fa93 f2a3 	rbit	r2, r3
 80021a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021b0:	601a      	str	r2, [r3, #0]
  return result;
 80021b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_OscConfig+0xf8a>
 80021d0:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_OscConfig+0x10a4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	e027      	b.n	8002226 <HAL_RCC_OscConfig+0xfda>
 80021d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021da:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80021de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002200:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_RCC_OscConfig+0x10a4>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800222a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800222e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002232:	6011      	str	r1, [r2, #0]
 8002234:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002238:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	fa92 f1a2 	rbit	r1, r2
 8002242:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002246:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800224a:	6011      	str	r1, [r2, #0]
  return result;
 800224c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002250:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f002 021f 	and.w	r2, r2, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d182      	bne.n	8002178 <HAL_RCC_OscConfig+0xf2c>
 8002272:	e037      	b.n	80022e4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002278:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e02e      	b.n	80022e6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_OscConfig+0x10a4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_RCC_OscConfig+0x10a4>)
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002298:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800229c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80022a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d117      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80022b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80022b4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d10b      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80022c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022cc:	f003 020f 	and.w	r2, r3, #15
 80022d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000

080022f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b09e      	sub	sp, #120	; 0x78
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e162      	b.n	80025d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b90      	ldr	r3, [pc, #576]	; (8002550 <HAL_RCC_ClockConfig+0x25c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d910      	bls.n	800233c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b8d      	ldr	r3, [pc, #564]	; (8002550 <HAL_RCC_ClockConfig+0x25c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 0207 	bic.w	r2, r3, #7
 8002322:	498b      	ldr	r1, [pc, #556]	; (8002550 <HAL_RCC_ClockConfig+0x25c>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b89      	ldr	r3, [pc, #548]	; (8002550 <HAL_RCC_ClockConfig+0x25c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e14a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002348:	4b82      	ldr	r3, [pc, #520]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	497f      	ldr	r1, [pc, #508]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80dc 	beq.w	8002520 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d13c      	bne.n	80023ea <HAL_RCC_ClockConfig+0xf6>
 8002370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002374:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800237e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_RCC_ClockConfig+0xa6>
 8002394:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	e00f      	b.n	80023ba <HAL_RCC_ClockConfig+0xc6>
 800239a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800239e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	667b      	str	r3, [r7, #100]	; 0x64
 80023a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ac:	663b      	str	r3, [r7, #96]	; 0x60
 80023ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023be:	65ba      	str	r2, [r7, #88]	; 0x58
 80023c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023c2:	fa92 f2a2 	rbit	r2, r2
 80023c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80023c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023ca:	fab2 f282 	clz	r2, r2
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	f042 0220 	orr.w	r2, r2, #32
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	f002 021f 	and.w	r2, r2, #31
 80023da:	2101      	movs	r1, #1
 80023dc:	fa01 f202 	lsl.w	r2, r1, r2
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d17b      	bne.n	80024de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0f3      	b.n	80025d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d13c      	bne.n	800246c <HAL_RCC_ClockConfig+0x178>
 80023f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_RCC_ClockConfig+0x128>
 8002416:	4b4f      	ldr	r3, [pc, #316]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e00f      	b.n	800243c <HAL_RCC_ClockConfig+0x148>
 800241c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002420:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	647b      	str	r3, [r7, #68]	; 0x44
 800242a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800242e:	643b      	str	r3, [r7, #64]	; 0x40
 8002430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002440:	63ba      	str	r2, [r7, #56]	; 0x38
 8002442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002444:	fa92 f2a2 	rbit	r2, r2
 8002448:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800244a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800244c:	fab2 f282 	clz	r2, r2
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f042 0220 	orr.w	r2, r2, #32
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	f002 021f 	and.w	r2, r2, #31
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f202 	lsl.w	r2, r1, r2
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d13a      	bne.n	80024de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0b2      	b.n	80025d2 <HAL_RCC_ClockConfig+0x2de>
 800246c:	2302      	movs	r3, #2
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d102      	bne.n	8002494 <HAL_RCC_ClockConfig+0x1a0>
 800248e:	4b31      	ldr	r3, [pc, #196]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	e00d      	b.n	80024b0 <HAL_RCC_ClockConfig+0x1bc>
 8002494:	2302      	movs	r3, #2
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
 80024a0:	2302      	movs	r3, #2
 80024a2:	623b      	str	r3, [r7, #32]
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	2202      	movs	r2, #2
 80024b2:	61ba      	str	r2, [r7, #24]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	fa92 f2a2 	rbit	r2, r2
 80024ba:	617a      	str	r2, [r7, #20]
  return result;
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	fab2 f282 	clz	r2, r2
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f042 0220 	orr.w	r2, r2, #32
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f002 021f 	and.w	r2, r2, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f202 	lsl.w	r2, r1, r2
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e079      	b.n	80025d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f023 0203 	bic.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	491a      	ldr	r1, [pc, #104]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f0:	f7fe fade 	bl	8000ab0 <HAL_GetTick>
 80024f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	e00a      	b.n	800250e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f8:	f7fe fada 	bl	8000ab0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e061      	b.n	80025d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 020c 	and.w	r2, r3, #12
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	429a      	cmp	r2, r3
 800251e:	d1eb      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_ClockConfig+0x25c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d214      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_RCC_ClockConfig+0x25c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4906      	ldr	r1, [pc, #24]	; (8002550 <HAL_RCC_ClockConfig+0x25c>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_RCC_ClockConfig+0x25c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e040      	b.n	80025d2 <HAL_RCC_ClockConfig+0x2de>
 8002550:	40022000 	.word	0x40022000
 8002554:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCC_ClockConfig+0x2e8>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	491a      	ldr	r1, [pc, #104]	; (80025dc <HAL_RCC_ClockConfig+0x2e8>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <HAL_RCC_ClockConfig+0x2e8>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4912      	ldr	r1, [pc, #72]	; (80025dc <HAL_RCC_ClockConfig+0x2e8>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002596:	f000 f829 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 800259a:	4601      	mov	r1, r0
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <HAL_RCC_ClockConfig+0x2e8>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a4:	22f0      	movs	r2, #240	; 0xf0
 80025a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	fa92 f2a2 	rbit	r2, r2
 80025ae:	60fa      	str	r2, [r7, #12]
  return result;
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	fab2 f282 	clz	r2, r2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	40d3      	lsrs	r3, r2
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x2ec>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	fa21 f303 	lsr.w	r3, r1, r3
 80025c2:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <HAL_RCC_ClockConfig+0x2f0>)
 80025c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_RCC_ClockConfig+0x2f4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fa2c 	bl	8000a28 <HAL_InitTick>
  
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3778      	adds	r7, #120	; 0x78
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08003d9c 	.word	0x08003d9c
 80025e4:	20000000 	.word	0x20000000
 80025e8:	20000004 	.word	0x20000004

080025ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b08b      	sub	sp, #44	; 0x2c
 80025f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	2300      	movs	r3, #0
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002606:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d002      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x30>
 8002616:	2b08      	cmp	r3, #8
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x36>
 800261a:	e03f      	b.n	800269c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800261e:	623b      	str	r3, [r7, #32]
      break;
 8002620:	e03f      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002628:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800262c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	fa92 f2a2 	rbit	r2, r2
 8002634:	607a      	str	r2, [r7, #4]
  return result;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	fab2 f282 	clz	r2, r2
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	40d3      	lsrs	r3, r2
 8002640:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002642:	5cd3      	ldrb	r3, [r2, r3]
 8002644:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	220f      	movs	r2, #15
 8002650:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	fa92 f2a2 	rbit	r2, r2
 8002658:	60fa      	str	r2, [r7, #12]
  return result;
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	fab2 f282 	clz	r2, r2
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	40d3      	lsrs	r3, r2
 8002664:	4a15      	ldr	r2, [pc, #84]	; (80026bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002666:	5cd3      	ldrb	r3, [r2, r3]
 8002668:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002674:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	fbb2 f2f3 	udiv	r2, r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
 8002684:	e007      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002686:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fbb2 f2f3 	udiv	r2, r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	623b      	str	r3, [r7, #32]
      break;
 800269a:	e002      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800269e:	623b      	str	r3, [r7, #32]
      break;
 80026a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a2:	6a3b      	ldr	r3, [r7, #32]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	372c      	adds	r7, #44	; 0x2c
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	40021000 	.word	0x40021000
 80026b4:	007a1200 	.word	0x007a1200
 80026b8:	08003dac 	.word	0x08003dac
 80026bc:	08003dbc 	.word	0x08003dbc

080026c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b092      	sub	sp, #72	; 0x48
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80d4 	beq.w	800288c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e4:	4b4e      	ldr	r3, [pc, #312]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10e      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	4b4b      	ldr	r3, [pc, #300]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	4a4a      	ldr	r2, [pc, #296]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	61d3      	str	r3, [r2, #28]
 80026fc:	4b48      	ldr	r3, [pc, #288]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002708:	2301      	movs	r3, #1
 800270a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270e:	4b45      	ldr	r3, [pc, #276]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d118      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271a:	4b42      	ldr	r3, [pc, #264]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a41      	ldr	r2, [pc, #260]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002724:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002726:	f7fe f9c3 	bl	8000ab0 <HAL_GetTick>
 800272a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	e008      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272e:	f7fe f9bf 	bl	8000ab0 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	; 0x64
 800273a:	d901      	bls.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e1d6      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002740:	4b38      	ldr	r3, [pc, #224]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800274c:	4b34      	ldr	r3, [pc, #208]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002754:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8084 	beq.w	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002768:	429a      	cmp	r2, r3
 800276a:	d07c      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800276c:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	4b26      	ldr	r3, [pc, #152]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	461a      	mov	r2, r3
 8002796:	2301      	movs	r3, #1
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	461a      	mov	r2, r3
 80027ba:	2300      	movs	r3, #0
 80027bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027be:	4a18      	ldr	r2, [pc, #96]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d04b      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe f96f 	bl	8000ab0 <HAL_GetTick>
 80027d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe f96b 	bl	8000ab0 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e180      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80027ec:	2302      	movs	r3, #2
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
 80027f8:	2302      	movs	r3, #2
 80027fa:	623b      	str	r3, [r7, #32]
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	61fb      	str	r3, [r7, #28]
  return result;
 8002804:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d108      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800281a:	4b01      	ldr	r3, [pc, #4]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	e00d      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002820:	40021000 	.word	0x40021000
 8002824:	40007000 	.word	0x40007000
 8002828:	10908100 	.word	0x10908100
 800282c:	2302      	movs	r3, #2
 800282e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	4b9a      	ldr	r3, [pc, #616]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2202      	movs	r2, #2
 800283e:	613a      	str	r2, [r7, #16]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	fa92 f2a2 	rbit	r2, r2
 8002846:	60fa      	str	r2, [r7, #12]
  return result;
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	fab2 f282 	clz	r2, r2
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f002 021f 	and.w	r2, r2, #31
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f202 	lsl.w	r2, r1, r2
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0b7      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002866:	4b8f      	ldr	r3, [pc, #572]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	498c      	ldr	r1, [pc, #560]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002878:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002880:	4b88      	ldr	r3, [pc, #544]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	4a87      	ldr	r2, [pc, #540]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002898:	4b82      	ldr	r3, [pc, #520]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	f023 0203 	bic.w	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	497f      	ldr	r1, [pc, #508]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028b6:	4b7b      	ldr	r3, [pc, #492]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4978      	ldr	r1, [pc, #480]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028d4:	4b73      	ldr	r3, [pc, #460]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	4970      	ldr	r1, [pc, #448]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028f2:	4b6c      	ldr	r3, [pc, #432]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f023 0210 	bic.w	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4969      	ldr	r1, [pc, #420]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002910:	4b64      	ldr	r3, [pc, #400]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	4961      	ldr	r1, [pc, #388]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800292e:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f023 0220 	bic.w	r2, r3, #32
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	495a      	ldr	r1, [pc, #360]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800294c:	4b55      	ldr	r3, [pc, #340]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	4952      	ldr	r1, [pc, #328]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800296a:	4b4e      	ldr	r3, [pc, #312]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	494b      	ldr	r1, [pc, #300]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002978:	4313      	orrs	r3, r2
 800297a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002988:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4943      	ldr	r1, [pc, #268]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	493c      	ldr	r1, [pc, #240]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	4934      	ldr	r1, [pc, #208]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80029e2:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	492d      	ldr	r1, [pc, #180]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0c:	4925      	ldr	r1, [pc, #148]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	491e      	ldr	r1, [pc, #120]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	4916      	ldr	r1, [pc, #88]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	490f      	ldr	r1, [pc, #60]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	4907      	ldr	r1, [pc, #28]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a96:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aaa:	4913      	ldr	r1, [pc, #76]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	490b      	ldr	r1, [pc, #44]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	4904      	ldr	r1, [pc, #16]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3748      	adds	r7, #72	; 0x48
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000

08002afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e049      	b.n	8002ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fd fdca 	bl	80006bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f000 fb80 	bl	8003240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e049      	b.n	8002c50 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d106      	bne.n	8002bd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f841 	bl	8002c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3304      	adds	r3, #4
 8002be6:	4619      	mov	r1, r3
 8002be8:	4610      	mov	r0, r2
 8002bea:	f000 fb29 	bl	8003240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_TIM_PWM_Start+0x24>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e03c      	b.n	8002d0a <HAL_TIM_PWM_Start+0x9e>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d109      	bne.n	8002caa <HAL_TIM_PWM_Start+0x3e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e02f      	b.n	8002d0a <HAL_TIM_PWM_Start+0x9e>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d109      	bne.n	8002cc4 <HAL_TIM_PWM_Start+0x58>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e022      	b.n	8002d0a <HAL_TIM_PWM_Start+0x9e>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d109      	bne.n	8002cde <HAL_TIM_PWM_Start+0x72>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	bf14      	ite	ne
 8002cd6:	2301      	movne	r3, #1
 8002cd8:	2300      	moveq	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	e015      	b.n	8002d0a <HAL_TIM_PWM_Start+0x9e>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d109      	bne.n	8002cf8 <HAL_TIM_PWM_Start+0x8c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e008      	b.n	8002d0a <HAL_TIM_PWM_Start+0x9e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0a1      	b.n	8002e56 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d104      	bne.n	8002d22 <HAL_TIM_PWM_Start+0xb6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d20:	e023      	b.n	8002d6a <HAL_TIM_PWM_Start+0xfe>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_PWM_Start+0xc6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d30:	e01b      	b.n	8002d6a <HAL_TIM_PWM_Start+0xfe>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_PWM_Start+0xd6>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d40:	e013      	b.n	8002d6a <HAL_TIM_PWM_Start+0xfe>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_PWM_Start+0xe6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d50:	e00b      	b.n	8002d6a <HAL_TIM_PWM_Start+0xfe>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d104      	bne.n	8002d62 <HAL_TIM_PWM_Start+0xf6>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d60:	e003      	b.n	8002d6a <HAL_TIM_PWM_Start+0xfe>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fea2 	bl	8003abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <HAL_TIM_PWM_Start+0x1f4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d018      	beq.n	8002db4 <HAL_TIM_PWM_Start+0x148>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a37      	ldr	r2, [pc, #220]	; (8002e64 <HAL_TIM_PWM_Start+0x1f8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <HAL_TIM_PWM_Start+0x148>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a35      	ldr	r2, [pc, #212]	; (8002e68 <HAL_TIM_PWM_Start+0x1fc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00e      	beq.n	8002db4 <HAL_TIM_PWM_Start+0x148>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a34      	ldr	r2, [pc, #208]	; (8002e6c <HAL_TIM_PWM_Start+0x200>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_TIM_PWM_Start+0x148>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a32      	ldr	r2, [pc, #200]	; (8002e70 <HAL_TIM_PWM_Start+0x204>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_TIM_PWM_Start+0x148>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a31      	ldr	r2, [pc, #196]	; (8002e74 <HAL_TIM_PWM_Start+0x208>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d101      	bne.n	8002db8 <HAL_TIM_PWM_Start+0x14c>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_TIM_PWM_Start+0x14e>
 8002db8:	2300      	movs	r3, #0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a23      	ldr	r2, [pc, #140]	; (8002e60 <HAL_TIM_PWM_Start+0x1f4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d01d      	beq.n	8002e14 <HAL_TIM_PWM_Start+0x1a8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de0:	d018      	beq.n	8002e14 <HAL_TIM_PWM_Start+0x1a8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <HAL_TIM_PWM_Start+0x20c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <HAL_TIM_PWM_Start+0x1a8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_TIM_PWM_Start+0x210>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00e      	beq.n	8002e14 <HAL_TIM_PWM_Start+0x1a8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1a      	ldr	r2, [pc, #104]	; (8002e64 <HAL_TIM_PWM_Start+0x1f8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <HAL_TIM_PWM_Start+0x1a8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_TIM_PWM_Start+0x1fc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <HAL_TIM_PWM_Start+0x1a8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <HAL_TIM_PWM_Start+0x208>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d115      	bne.n	8002e40 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_TIM_PWM_Start+0x214>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d015      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x1e6>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2c:	d011      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3e:	e008      	b.n	8002e52 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e000      	b.n	8002e54 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40013400 	.word	0x40013400
 8002e68:	40014000 	.word	0x40014000
 8002e6c:	40014400 	.word	0x40014400
 8002e70:	40014800 	.word	0x40014800
 8002e74:	40015000 	.word	0x40015000
 8002e78:	40000400 	.word	0x40000400
 8002e7c:	40000800 	.word	0x40000800
 8002e80:	00010007 	.word	0x00010007

08002e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e0ff      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b14      	cmp	r3, #20
 8002eae:	f200 80f0 	bhi.w	8003092 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002f0d 	.word	0x08002f0d
 8002ebc:	08003093 	.word	0x08003093
 8002ec0:	08003093 	.word	0x08003093
 8002ec4:	08003093 	.word	0x08003093
 8002ec8:	08002f4d 	.word	0x08002f4d
 8002ecc:	08003093 	.word	0x08003093
 8002ed0:	08003093 	.word	0x08003093
 8002ed4:	08003093 	.word	0x08003093
 8002ed8:	08002f8f 	.word	0x08002f8f
 8002edc:	08003093 	.word	0x08003093
 8002ee0:	08003093 	.word	0x08003093
 8002ee4:	08003093 	.word	0x08003093
 8002ee8:	08002fcf 	.word	0x08002fcf
 8002eec:	08003093 	.word	0x08003093
 8002ef0:	08003093 	.word	0x08003093
 8002ef4:	08003093 	.word	0x08003093
 8002ef8:	08003011 	.word	0x08003011
 8002efc:	08003093 	.word	0x08003093
 8002f00:	08003093 	.word	0x08003093
 8002f04:	08003093 	.word	0x08003093
 8002f08:	08003051 	.word	0x08003051
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fa32 	bl	800337c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0208 	orr.w	r2, r2, #8
 8002f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0204 	bic.w	r2, r2, #4
 8002f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6999      	ldr	r1, [r3, #24]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	619a      	str	r2, [r3, #24]
      break;
 8002f4a:	e0a5      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 faac 	bl	80034b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6999      	ldr	r1, [r3, #24]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	021a      	lsls	r2, r3, #8
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	619a      	str	r2, [r3, #24]
      break;
 8002f8c:	e084      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fb1f 	bl	80035d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0208 	orr.w	r2, r2, #8
 8002fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0204 	bic.w	r2, r2, #4
 8002fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69d9      	ldr	r1, [r3, #28]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	61da      	str	r2, [r3, #28]
      break;
 8002fcc:	e064      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fb91 	bl	80036fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69d9      	ldr	r1, [r3, #28]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	021a      	lsls	r2, r3, #8
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	61da      	str	r2, [r3, #28]
      break;
 800300e:	e043      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fbe0 	bl	80037dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0208 	orr.w	r2, r2, #8
 800302a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0204 	bic.w	r2, r2, #4
 800303a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800304e:	e023      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fc2a 	bl	80038b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	021a      	lsls	r2, r3, #8
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003090:	e002      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	75fb      	strb	r3, [r7, #23]
      break;
 8003096:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop

080030ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_TIM_ConfigClockSource+0x1c>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0b6      	b.n	8003236 <HAL_TIM_ConfigClockSource+0x18a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	d03e      	beq.n	8003184 <HAL_TIM_ConfigClockSource+0xd8>
 8003106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310a:	f200 8087 	bhi.w	800321c <HAL_TIM_ConfigClockSource+0x170>
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003112:	f000 8086 	beq.w	8003222 <HAL_TIM_ConfigClockSource+0x176>
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	d87f      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x170>
 800311c:	2b70      	cmp	r3, #112	; 0x70
 800311e:	d01a      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0xaa>
 8003120:	2b70      	cmp	r3, #112	; 0x70
 8003122:	d87b      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x170>
 8003124:	2b60      	cmp	r3, #96	; 0x60
 8003126:	d050      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x11e>
 8003128:	2b60      	cmp	r3, #96	; 0x60
 800312a:	d877      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x170>
 800312c:	2b50      	cmp	r3, #80	; 0x50
 800312e:	d03c      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0xfe>
 8003130:	2b50      	cmp	r3, #80	; 0x50
 8003132:	d873      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x170>
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d058      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x13e>
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d86f      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x170>
 800313c:	2b30      	cmp	r3, #48	; 0x30
 800313e:	d064      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15e>
 8003140:	2b30      	cmp	r3, #48	; 0x30
 8003142:	d86b      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x170>
 8003144:	2b20      	cmp	r3, #32
 8003146:	d060      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15e>
 8003148:	2b20      	cmp	r3, #32
 800314a:	d867      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x170>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d05c      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15e>
 8003150:	2b10      	cmp	r3, #16
 8003152:	d05a      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15e>
 8003154:	e062      	b.n	800321c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003166:	f000 fc89 	bl	8003a7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	609a      	str	r2, [r3, #8]
      break;
 8003182:	e04f      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003194:	f000 fc72 	bl	8003a7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a6:	609a      	str	r2, [r3, #8]
      break;
 80031a8:	e03c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b6:	461a      	mov	r2, r3
 80031b8:	f000 fbe6 	bl	8003988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2150      	movs	r1, #80	; 0x50
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fc3f 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 80031c8:	e02c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d6:	461a      	mov	r2, r3
 80031d8:	f000 fc05 	bl	80039e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2160      	movs	r1, #96	; 0x60
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fc2f 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 80031e8:	e01c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f6:	461a      	mov	r2, r3
 80031f8:	f000 fbc6 	bl	8003988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2140      	movs	r1, #64	; 0x40
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fc1f 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 8003208:	e00c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f000 fc16 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 800321a:	e003      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e000      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a42      	ldr	r2, [pc, #264]	; (800335c <TIM_Base_SetConfig+0x11c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d00f      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3f      	ldr	r2, [pc, #252]	; (8003360 <TIM_Base_SetConfig+0x120>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3e      	ldr	r2, [pc, #248]	; (8003364 <TIM_Base_SetConfig+0x124>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3d      	ldr	r2, [pc, #244]	; (8003368 <TIM_Base_SetConfig+0x128>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3c      	ldr	r2, [pc, #240]	; (800336c <TIM_Base_SetConfig+0x12c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a31      	ldr	r2, [pc, #196]	; (800335c <TIM_Base_SetConfig+0x11c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01f      	beq.n	80032da <TIM_Base_SetConfig+0x9a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d01b      	beq.n	80032da <TIM_Base_SetConfig+0x9a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2e      	ldr	r2, [pc, #184]	; (8003360 <TIM_Base_SetConfig+0x120>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d017      	beq.n	80032da <TIM_Base_SetConfig+0x9a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2d      	ldr	r2, [pc, #180]	; (8003364 <TIM_Base_SetConfig+0x124>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <TIM_Base_SetConfig+0x9a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <TIM_Base_SetConfig+0x128>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00f      	beq.n	80032da <TIM_Base_SetConfig+0x9a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <TIM_Base_SetConfig+0x130>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_Base_SetConfig+0x9a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <TIM_Base_SetConfig+0x134>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_Base_SetConfig+0x9a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2a      	ldr	r2, [pc, #168]	; (8003378 <TIM_Base_SetConfig+0x138>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_Base_SetConfig+0x9a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a25      	ldr	r2, [pc, #148]	; (800336c <TIM_Base_SetConfig+0x12c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <TIM_Base_SetConfig+0x11c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <TIM_Base_SetConfig+0x100>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a13      	ldr	r2, [pc, #76]	; (8003368 <TIM_Base_SetConfig+0x128>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00f      	beq.n	8003340 <TIM_Base_SetConfig+0x100>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a13      	ldr	r2, [pc, #76]	; (8003370 <TIM_Base_SetConfig+0x130>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00b      	beq.n	8003340 <TIM_Base_SetConfig+0x100>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a12      	ldr	r2, [pc, #72]	; (8003374 <TIM_Base_SetConfig+0x134>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_Base_SetConfig+0x100>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a11      	ldr	r2, [pc, #68]	; (8003378 <TIM_Base_SetConfig+0x138>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_Base_SetConfig+0x100>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a0c      	ldr	r2, [pc, #48]	; (800336c <TIM_Base_SetConfig+0x12c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d103      	bne.n	8003348 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	615a      	str	r2, [r3, #20]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40013400 	.word	0x40013400
 800336c:	40015000 	.word	0x40015000
 8003370:	40014000 	.word	0x40014000
 8003374:	40014400 	.word	0x40014400
 8003378:	40014800 	.word	0x40014800

0800337c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f023 0201 	bic.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f023 0302 	bic.w	r3, r3, #2
 80033c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a30      	ldr	r2, [pc, #192]	; (8003498 <TIM_OC1_SetConfig+0x11c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d013      	beq.n	8003404 <TIM_OC1_SetConfig+0x88>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a2f      	ldr	r2, [pc, #188]	; (800349c <TIM_OC1_SetConfig+0x120>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00f      	beq.n	8003404 <TIM_OC1_SetConfig+0x88>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a2e      	ldr	r2, [pc, #184]	; (80034a0 <TIM_OC1_SetConfig+0x124>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00b      	beq.n	8003404 <TIM_OC1_SetConfig+0x88>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <TIM_OC1_SetConfig+0x128>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d007      	beq.n	8003404 <TIM_OC1_SetConfig+0x88>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a2c      	ldr	r2, [pc, #176]	; (80034a8 <TIM_OC1_SetConfig+0x12c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d003      	beq.n	8003404 <TIM_OC1_SetConfig+0x88>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <TIM_OC1_SetConfig+0x130>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10c      	bne.n	800341e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0308 	bic.w	r3, r3, #8
 800340a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <TIM_OC1_SetConfig+0x11c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <TIM_OC1_SetConfig+0xd2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1c      	ldr	r2, [pc, #112]	; (800349c <TIM_OC1_SetConfig+0x120>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00f      	beq.n	800344e <TIM_OC1_SetConfig+0xd2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <TIM_OC1_SetConfig+0x124>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00b      	beq.n	800344e <TIM_OC1_SetConfig+0xd2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <TIM_OC1_SetConfig+0x128>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d007      	beq.n	800344e <TIM_OC1_SetConfig+0xd2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a19      	ldr	r2, [pc, #100]	; (80034a8 <TIM_OC1_SetConfig+0x12c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <TIM_OC1_SetConfig+0xd2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a18      	ldr	r2, [pc, #96]	; (80034ac <TIM_OC1_SetConfig+0x130>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d111      	bne.n	8003472 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800345c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	621a      	str	r2, [r3, #32]
}
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40013400 	.word	0x40013400
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800
 80034ac:	40015000 	.word	0x40015000

080034b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0210 	bic.w	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f023 0320 	bic.w	r3, r3, #32
 80034fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a2c      	ldr	r2, [pc, #176]	; (80035c0 <TIM_OC2_SetConfig+0x110>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <TIM_OC2_SetConfig+0x74>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a2b      	ldr	r2, [pc, #172]	; (80035c4 <TIM_OC2_SetConfig+0x114>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_OC2_SetConfig+0x74>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <TIM_OC2_SetConfig+0x118>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d10d      	bne.n	8003540 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800352a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800353e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a1f      	ldr	r2, [pc, #124]	; (80035c0 <TIM_OC2_SetConfig+0x110>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <TIM_OC2_SetConfig+0xc0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <TIM_OC2_SetConfig+0x114>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00f      	beq.n	8003570 <TIM_OC2_SetConfig+0xc0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <TIM_OC2_SetConfig+0x11c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00b      	beq.n	8003570 <TIM_OC2_SetConfig+0xc0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <TIM_OC2_SetConfig+0x120>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_OC2_SetConfig+0xc0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <TIM_OC2_SetConfig+0x124>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_OC2_SetConfig+0xc0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <TIM_OC2_SetConfig+0x118>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d113      	bne.n	8003598 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003576:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800357e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40013400 	.word	0x40013400
 80035c8:	40015000 	.word	0x40015000
 80035cc:	40014000 	.word	0x40014000
 80035d0:	40014400 	.word	0x40014400
 80035d4:	40014800 	.word	0x40014800

080035d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0303 	bic.w	r3, r3, #3
 8003612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2b      	ldr	r2, [pc, #172]	; (80036e4 <TIM_OC3_SetConfig+0x10c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d007      	beq.n	800364a <TIM_OC3_SetConfig+0x72>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <TIM_OC3_SetConfig+0x110>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d003      	beq.n	800364a <TIM_OC3_SetConfig+0x72>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a29      	ldr	r2, [pc, #164]	; (80036ec <TIM_OC3_SetConfig+0x114>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10d      	bne.n	8003666 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003664:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <TIM_OC3_SetConfig+0x10c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <TIM_OC3_SetConfig+0xbe>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <TIM_OC3_SetConfig+0x110>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00f      	beq.n	8003696 <TIM_OC3_SetConfig+0xbe>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <TIM_OC3_SetConfig+0x118>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00b      	beq.n	8003696 <TIM_OC3_SetConfig+0xbe>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <TIM_OC3_SetConfig+0x11c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <TIM_OC3_SetConfig+0xbe>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <TIM_OC3_SetConfig+0x120>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <TIM_OC3_SetConfig+0xbe>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a16      	ldr	r2, [pc, #88]	; (80036ec <TIM_OC3_SetConfig+0x114>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d113      	bne.n	80036be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800369c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40013400 	.word	0x40013400
 80036ec:	40015000 	.word	0x40015000
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800

080036fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800374a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	031b      	lsls	r3, r3, #12
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <TIM_OC4_SetConfig+0xc8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <TIM_OC4_SetConfig+0x8c>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a19      	ldr	r2, [pc, #100]	; (80037c8 <TIM_OC4_SetConfig+0xcc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00f      	beq.n	8003788 <TIM_OC4_SetConfig+0x8c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a18      	ldr	r2, [pc, #96]	; (80037cc <TIM_OC4_SetConfig+0xd0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00b      	beq.n	8003788 <TIM_OC4_SetConfig+0x8c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <TIM_OC4_SetConfig+0xd4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <TIM_OC4_SetConfig+0x8c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <TIM_OC4_SetConfig+0xd8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_OC4_SetConfig+0x8c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <TIM_OC4_SetConfig+0xdc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d109      	bne.n	800379c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800378e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	621a      	str	r2, [r3, #32]
}
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40013400 	.word	0x40013400
 80037cc:	40014000 	.word	0x40014000
 80037d0:	40014400 	.word	0x40014400
 80037d4:	40014800 	.word	0x40014800
 80037d8:	40015000 	.word	0x40015000

080037dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003820:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a19      	ldr	r2, [pc, #100]	; (8003898 <TIM_OC5_SetConfig+0xbc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <TIM_OC5_SetConfig+0x82>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a18      	ldr	r2, [pc, #96]	; (800389c <TIM_OC5_SetConfig+0xc0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00f      	beq.n	800385e <TIM_OC5_SetConfig+0x82>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a17      	ldr	r2, [pc, #92]	; (80038a0 <TIM_OC5_SetConfig+0xc4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00b      	beq.n	800385e <TIM_OC5_SetConfig+0x82>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <TIM_OC5_SetConfig+0xc8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d007      	beq.n	800385e <TIM_OC5_SetConfig+0x82>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <TIM_OC5_SetConfig+0xcc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d003      	beq.n	800385e <TIM_OC5_SetConfig+0x82>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a14      	ldr	r2, [pc, #80]	; (80038ac <TIM_OC5_SetConfig+0xd0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d109      	bne.n	8003872 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003864:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	621a      	str	r2, [r3, #32]
}
 800388c:	bf00      	nop
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	40012c00 	.word	0x40012c00
 800389c:	40013400 	.word	0x40013400
 80038a0:	40014000 	.word	0x40014000
 80038a4:	40014400 	.word	0x40014400
 80038a8:	40014800 	.word	0x40014800
 80038ac:	40015000 	.word	0x40015000

080038b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	051b      	lsls	r3, r3, #20
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <TIM_OC6_SetConfig+0xc0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <TIM_OC6_SetConfig+0x84>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a19      	ldr	r2, [pc, #100]	; (8003974 <TIM_OC6_SetConfig+0xc4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00f      	beq.n	8003934 <TIM_OC6_SetConfig+0x84>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a18      	ldr	r2, [pc, #96]	; (8003978 <TIM_OC6_SetConfig+0xc8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00b      	beq.n	8003934 <TIM_OC6_SetConfig+0x84>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a17      	ldr	r2, [pc, #92]	; (800397c <TIM_OC6_SetConfig+0xcc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <TIM_OC6_SetConfig+0x84>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a16      	ldr	r2, [pc, #88]	; (8003980 <TIM_OC6_SetConfig+0xd0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_OC6_SetConfig+0x84>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a15      	ldr	r2, [pc, #84]	; (8003984 <TIM_OC6_SetConfig+0xd4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d109      	bne.n	8003948 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	029b      	lsls	r3, r3, #10
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40013400 	.word	0x40013400
 8003978:	40014000 	.word	0x40014000
 800397c:	40014400 	.word	0x40014400
 8003980:	40014800 	.word	0x40014800
 8003984:	40015000 	.word	0x40015000

08003988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f023 030a 	bic.w	r3, r3, #10
 80039c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	621a      	str	r2, [r3, #32]
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b087      	sub	sp, #28
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f023 0210 	bic.w	r2, r3, #16
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	031b      	lsls	r3, r3, #12
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f043 0307 	orr.w	r3, r3, #7
 8003a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	609a      	str	r2, [r3, #8]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	021a      	lsls	r2, r3, #8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	609a      	str	r2, [r3, #8]
}
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2201      	movs	r2, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1a      	ldr	r2, [r3, #32]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	401a      	ands	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	fa01 f303 	lsl.w	r3, r1, r3
 8003af4:	431a      	orrs	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e06d      	b.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a30      	ldr	r2, [pc, #192]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2f      	ldr	r2, [pc, #188]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2d      	ldr	r2, [pc, #180]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d108      	bne.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1e      	ldr	r2, [pc, #120]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d01d      	beq.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9c:	d018      	beq.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1a      	ldr	r2, [pc, #104]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00e      	beq.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a11      	ldr	r2, [pc, #68]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10c      	bne.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40013400 	.word	0x40013400
 8003c10:	40015000 	.word	0x40015000
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40000800 	.word	0x40000800
 8003c1c:	40014000 	.word	0x40014000

08003c20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e06a      	b.n	8003d12 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	041b      	lsls	r3, r3, #16
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d009      	beq.n	8003cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d115      	bne.n	8003d00 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	051b      	lsls	r3, r3, #20
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40013400 	.word	0x40013400
 8003d28:	40015000 	.word	0x40015000

08003d2c <memset>:
 8003d2c:	4402      	add	r2, r0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d100      	bne.n	8003d36 <memset+0xa>
 8003d34:	4770      	bx	lr
 8003d36:	f803 1b01 	strb.w	r1, [r3], #1
 8003d3a:	e7f9      	b.n	8003d30 <memset+0x4>

08003d3c <__libc_init_array>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	4d0d      	ldr	r5, [pc, #52]	; (8003d74 <__libc_init_array+0x38>)
 8003d40:	4c0d      	ldr	r4, [pc, #52]	; (8003d78 <__libc_init_array+0x3c>)
 8003d42:	1b64      	subs	r4, r4, r5
 8003d44:	10a4      	asrs	r4, r4, #2
 8003d46:	2600      	movs	r6, #0
 8003d48:	42a6      	cmp	r6, r4
 8003d4a:	d109      	bne.n	8003d60 <__libc_init_array+0x24>
 8003d4c:	4d0b      	ldr	r5, [pc, #44]	; (8003d7c <__libc_init_array+0x40>)
 8003d4e:	4c0c      	ldr	r4, [pc, #48]	; (8003d80 <__libc_init_array+0x44>)
 8003d50:	f000 f818 	bl	8003d84 <_init>
 8003d54:	1b64      	subs	r4, r4, r5
 8003d56:	10a4      	asrs	r4, r4, #2
 8003d58:	2600      	movs	r6, #0
 8003d5a:	42a6      	cmp	r6, r4
 8003d5c:	d105      	bne.n	8003d6a <__libc_init_array+0x2e>
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}
 8003d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d64:	4798      	blx	r3
 8003d66:	3601      	adds	r6, #1
 8003d68:	e7ee      	b.n	8003d48 <__libc_init_array+0xc>
 8003d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6e:	4798      	blx	r3
 8003d70:	3601      	adds	r6, #1
 8003d72:	e7f2      	b.n	8003d5a <__libc_init_array+0x1e>
 8003d74:	08003dcc 	.word	0x08003dcc
 8003d78:	08003dcc 	.word	0x08003dcc
 8003d7c:	08003dcc 	.word	0x08003dcc
 8003d80:	08003dd0 	.word	0x08003dd0

08003d84 <_init>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	bf00      	nop
 8003d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8a:	bc08      	pop	{r3}
 8003d8c:	469e      	mov	lr, r3
 8003d8e:	4770      	bx	lr

08003d90 <_fini>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	bf00      	nop
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr
