
Test_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045cc  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004794  08004794  00005794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a4  080047a4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080047a4  080047a4  000057a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047ac  080047ac  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047ac  080047ac  000057ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047b0  080047b0  000057b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080047b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  080047c0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080047c0  0000617c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be0a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219c  00000000  00000000  00011e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00013fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a0  00000000  00000000  00014b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021980  00000000  00000000  000153d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4a6  00000000  00000000  00036d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cafa3  00000000  00000000  000461fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001111a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e14  00000000  00000000  001111e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00113ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800477c 	.word	0x0800477c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800477c 	.word	0x0800477c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b96a 	b.w	8000cd0 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	460c      	mov	r4, r1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d14e      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a20:	4694      	mov	ip, r2
 8000a22:	458c      	cmp	ip, r1
 8000a24:	4686      	mov	lr, r0
 8000a26:	fab2 f282 	clz	r2, r2
 8000a2a:	d962      	bls.n	8000af2 <__udivmoddi4+0xde>
 8000a2c:	b14a      	cbz	r2, 8000a42 <__udivmoddi4+0x2e>
 8000a2e:	f1c2 0320 	rsb	r3, r2, #32
 8000a32:	4091      	lsls	r1, r2
 8000a34:	fa20 f303 	lsr.w	r3, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	4319      	orrs	r1, r3
 8000a3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a46:	fa1f f68c 	uxth.w	r6, ip
 8000a4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a52:	fb07 1114 	mls	r1, r7, r4, r1
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb04 f106 	mul.w	r1, r4, r6
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a6a:	f080 8112 	bcs.w	8000c92 <__udivmoddi4+0x27e>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 810f 	bls.w	8000c92 <__udivmoddi4+0x27e>
 8000a74:	3c02      	subs	r4, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a59      	subs	r1, r3, r1
 8000a7a:	fa1f f38e 	uxth.w	r3, lr
 8000a7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a82:	fb07 1110 	mls	r1, r7, r0, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb00 f606 	mul.w	r6, r0, r6
 8000a8e:	429e      	cmp	r6, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x94>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a9a:	f080 80fc 	bcs.w	8000c96 <__udivmoddi4+0x282>
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	f240 80f9 	bls.w	8000c96 <__udivmoddi4+0x282>
 8000aa4:	4463      	add	r3, ip
 8000aa6:	3802      	subs	r0, #2
 8000aa8:	1b9b      	subs	r3, r3, r6
 8000aaa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aae:	2100      	movs	r1, #0
 8000ab0:	b11d      	cbz	r5, 8000aba <__udivmoddi4+0xa6>
 8000ab2:	40d3      	lsrs	r3, r2
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d905      	bls.n	8000ace <__udivmoddi4+0xba>
 8000ac2:	b10d      	cbz	r5, 8000ac8 <__udivmoddi4+0xb4>
 8000ac4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4608      	mov	r0, r1
 8000acc:	e7f5      	b.n	8000aba <__udivmoddi4+0xa6>
 8000ace:	fab3 f183 	clz	r1, r3
 8000ad2:	2900      	cmp	r1, #0
 8000ad4:	d146      	bne.n	8000b64 <__udivmoddi4+0x150>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d302      	bcc.n	8000ae0 <__udivmoddi4+0xcc>
 8000ada:	4290      	cmp	r0, r2
 8000adc:	f0c0 80f0 	bcc.w	8000cc0 <__udivmoddi4+0x2ac>
 8000ae0:	1a86      	subs	r6, r0, r2
 8000ae2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d0e6      	beq.n	8000aba <__udivmoddi4+0xa6>
 8000aec:	e9c5 6300 	strd	r6, r3, [r5]
 8000af0:	e7e3      	b.n	8000aba <__udivmoddi4+0xa6>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	f040 8090 	bne.w	8000c18 <__udivmoddi4+0x204>
 8000af8:	eba1 040c 	sub.w	r4, r1, ip
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	fa1f f78c 	uxth.w	r7, ip
 8000b04:	2101      	movs	r1, #1
 8000b06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b16:	fb07 f006 	mul.w	r0, r7, r6
 8000b1a:	4298      	cmp	r0, r3
 8000b1c:	d908      	bls.n	8000b30 <__udivmoddi4+0x11c>
 8000b1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x11a>
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	f200 80cd 	bhi.w	8000cc8 <__udivmoddi4+0x2b4>
 8000b2e:	4626      	mov	r6, r4
 8000b30:	1a1c      	subs	r4, r3, r0
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b42:	fb00 f707 	mul.w	r7, r0, r7
 8000b46:	429f      	cmp	r7, r3
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x148>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b52:	d202      	bcs.n	8000b5a <__udivmoddi4+0x146>
 8000b54:	429f      	cmp	r7, r3
 8000b56:	f200 80b0 	bhi.w	8000cba <__udivmoddi4+0x2a6>
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	1bdb      	subs	r3, r3, r7
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	e7a5      	b.n	8000ab0 <__udivmoddi4+0x9c>
 8000b64:	f1c1 0620 	rsb	r6, r1, #32
 8000b68:	408b      	lsls	r3, r1
 8000b6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b6e:	431f      	orrs	r7, r3
 8000b70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b74:	fa04 f301 	lsl.w	r3, r4, r1
 8000b78:	ea43 030c 	orr.w	r3, r3, ip
 8000b7c:	40f4      	lsrs	r4, r6
 8000b7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b82:	0c38      	lsrs	r0, r7, #16
 8000b84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b88:	fbb4 fef0 	udiv	lr, r4, r0
 8000b8c:	fa1f fc87 	uxth.w	ip, r7
 8000b90:	fb00 441e 	mls	r4, r0, lr, r4
 8000b94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b98:	fb0e f90c 	mul.w	r9, lr, ip
 8000b9c:	45a1      	cmp	r9, r4
 8000b9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ba2:	d90a      	bls.n	8000bba <__udivmoddi4+0x1a6>
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000baa:	f080 8084 	bcs.w	8000cb6 <__udivmoddi4+0x2a2>
 8000bae:	45a1      	cmp	r9, r4
 8000bb0:	f240 8081 	bls.w	8000cb6 <__udivmoddi4+0x2a2>
 8000bb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb8:	443c      	add	r4, r7
 8000bba:	eba4 0409 	sub.w	r4, r4, r9
 8000bbe:	fa1f f983 	uxth.w	r9, r3
 8000bc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bd2:	45a4      	cmp	ip, r4
 8000bd4:	d907      	bls.n	8000be6 <__udivmoddi4+0x1d2>
 8000bd6:	193c      	adds	r4, r7, r4
 8000bd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bdc:	d267      	bcs.n	8000cae <__udivmoddi4+0x29a>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0x29a>
 8000be2:	3b02      	subs	r3, #2
 8000be4:	443c      	add	r4, r7
 8000be6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bea:	fba0 9302 	umull	r9, r3, r0, r2
 8000bee:	eba4 040c 	sub.w	r4, r4, ip
 8000bf2:	429c      	cmp	r4, r3
 8000bf4:	46ce      	mov	lr, r9
 8000bf6:	469c      	mov	ip, r3
 8000bf8:	d351      	bcc.n	8000c9e <__udivmoddi4+0x28a>
 8000bfa:	d04e      	beq.n	8000c9a <__udivmoddi4+0x286>
 8000bfc:	b155      	cbz	r5, 8000c14 <__udivmoddi4+0x200>
 8000bfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000c02:	eb64 040c 	sbc.w	r4, r4, ip
 8000c06:	fa04 f606 	lsl.w	r6, r4, r6
 8000c0a:	40cb      	lsrs	r3, r1
 8000c0c:	431e      	orrs	r6, r3
 8000c0e:	40cc      	lsrs	r4, r1
 8000c10:	e9c5 6400 	strd	r6, r4, [r5]
 8000c14:	2100      	movs	r1, #0
 8000c16:	e750      	b.n	8000aba <__udivmoddi4+0xa6>
 8000c18:	f1c2 0320 	rsb	r3, r2, #32
 8000c1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c24:	fa24 f303 	lsr.w	r3, r4, r3
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	430c      	orrs	r4, r1
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c34:	fa1f f78c 	uxth.w	r7, ip
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c40:	0c23      	lsrs	r3, r4, #16
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f107 	mul.w	r1, r0, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x24c>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c56:	d22c      	bcs.n	8000cb2 <__udivmoddi4+0x29e>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d92a      	bls.n	8000cb2 <__udivmoddi4+0x29e>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c68:	fb08 3311 	mls	r3, r8, r1, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb01 f307 	mul.w	r3, r1, r7
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x276>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c80:	d213      	bcs.n	8000caa <__udivmoddi4+0x296>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d911      	bls.n	8000caa <__udivmoddi4+0x296>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4464      	add	r4, ip
 8000c8a:	1ae4      	subs	r4, r4, r3
 8000c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c90:	e739      	b.n	8000b06 <__udivmoddi4+0xf2>
 8000c92:	4604      	mov	r4, r0
 8000c94:	e6f0      	b.n	8000a78 <__udivmoddi4+0x64>
 8000c96:	4608      	mov	r0, r1
 8000c98:	e706      	b.n	8000aa8 <__udivmoddi4+0x94>
 8000c9a:	45c8      	cmp	r8, r9
 8000c9c:	d2ae      	bcs.n	8000bfc <__udivmoddi4+0x1e8>
 8000c9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ca2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ca6:	3801      	subs	r0, #1
 8000ca8:	e7a8      	b.n	8000bfc <__udivmoddi4+0x1e8>
 8000caa:	4631      	mov	r1, r6
 8000cac:	e7ed      	b.n	8000c8a <__udivmoddi4+0x276>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	e799      	b.n	8000be6 <__udivmoddi4+0x1d2>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e7d4      	b.n	8000c60 <__udivmoddi4+0x24c>
 8000cb6:	46d6      	mov	lr, sl
 8000cb8:	e77f      	b.n	8000bba <__udivmoddi4+0x1a6>
 8000cba:	4463      	add	r3, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	e74d      	b.n	8000b5c <__udivmoddi4+0x148>
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e70f      	b.n	8000ae8 <__udivmoddi4+0xd4>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	e730      	b.n	8000b30 <__udivmoddi4+0x11c>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_idiv0>:
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <DrivingAPIs_LineMove>:

/*************************************************************************************************************************************************
 *					                 							APIs implementation
 *************************************************************************************************************************************************/
void DrivingAPIs_LineMove(uint16_t Speed, uint8_t Direction)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460a      	mov	r2, r1
 8000cde:	80fb      	strh	r3, [r7, #6]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	717b      	strb	r3, [r7, #5]


	Wheels.BackLeftWheel = ENABLE;
 8000ce4:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <DrivingAPIs_LineMove+0x78>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	805a      	strh	r2, [r3, #2]
	Wheels.BackRightWheel = ENABLE;
 8000cea:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <DrivingAPIs_LineMove+0x78>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	801a      	strh	r2, [r3, #0]

	if (Direction == FORWARD)
 8000cf0:	797b      	ldrb	r3, [r7, #5]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d10c      	bne.n	8000d10 <DrivingAPIs_LineMove+0x3c>
	{
		Directions.RotateBackward.BackLeftWheel = DISABLE;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <DrivingAPIs_LineMove+0x7c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	80da      	strh	r2, [r3, #6]
		Directions.RotateBackward.BackRightWheel = DISABLE;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <DrivingAPIs_LineMove+0x7c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	809a      	strh	r2, [r3, #4]
		Directions.RotateForward.BackLeftWheel = ENABLE;
 8000d02:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <DrivingAPIs_LineMove+0x7c>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	805a      	strh	r2, [r3, #2]
		Directions.RotateForward.BackRightWheel = ENABLE;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <DrivingAPIs_LineMove+0x7c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	801a      	strh	r2, [r3, #0]
 8000d0e:	e00e      	b.n	8000d2e <DrivingAPIs_LineMove+0x5a>

	}
	else if (Direction == BACKWARD)
 8000d10:	797b      	ldrb	r3, [r7, #5]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d10b      	bne.n	8000d2e <DrivingAPIs_LineMove+0x5a>
	{
		Directions.RotateForward.BackLeftWheel = DISABLE;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <DrivingAPIs_LineMove+0x7c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	805a      	strh	r2, [r3, #2]
		Directions.RotateForward.BackRightWheel = DISABLE;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <DrivingAPIs_LineMove+0x7c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	801a      	strh	r2, [r3, #0]
		Directions.RotateBackward.BackLeftWheel = ENABLE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <DrivingAPIs_LineMove+0x7c>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	80da      	strh	r2, [r3, #6]
		Directions.RotateBackward.BackRightWheel = ENABLE;
 8000d28:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <DrivingAPIs_LineMove+0x7c>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	809a      	strh	r2, [r3, #4]
	}

	Speeds.Speeds.BackLeftWheel = Speed;
 8000d2e:	4a09      	ldr	r2, [pc, #36]	@ (8000d54 <DrivingAPIs_LineMove+0x80>)
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	8053      	strh	r3, [r2, #2]
	Speeds.Speeds.BackRightWheel = Speed;
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <DrivingAPIs_LineMove+0x80>)
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	8013      	strh	r3, [r2, #0]

	//SoftStart(Speed); //TODO
	HBridge_MotorControl(&Wheels, &Directions, &Speeds);
 8000d3a:	4a06      	ldr	r2, [pc, #24]	@ (8000d54 <DrivingAPIs_LineMove+0x80>)
 8000d3c:	4904      	ldr	r1, [pc, #16]	@ (8000d50 <DrivingAPIs_LineMove+0x7c>)
 8000d3e:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <DrivingAPIs_LineMove+0x78>)
 8000d40:	f000 f8f6 	bl	8000f30 <HBridge_MotorControl>
	//HAL_Delay(1000);
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000028 	.word	0x20000028
 8000d50:	2000002c 	.word	0x2000002c
 8000d54:	20000034 	.word	0x20000034

08000d58 <DrivingAPIs_TurnMove>:


void DrivingAPIs_TurnMove(uint16_t Dir, uint8_t Angle, uint16_t Speed)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
 8000d62:	460b      	mov	r3, r1
 8000d64:	717b      	strb	r3, [r7, #5]
 8000d66:	4613      	mov	r3, r2
 8000d68:	807b      	strh	r3, [r7, #2]
	ServoSG90_SteeringWheelCtrl(Dir);
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 faef 	bl	8001350 <ServoSG90_SteeringWheelCtrl>

	Wheels.BackLeftWheel = ENABLE;
 8000d72:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <DrivingAPIs_TurnMove+0xb0>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	805a      	strh	r2, [r3, #2]
	Wheels.BackRightWheel = ENABLE;
 8000d78:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <DrivingAPIs_TurnMove+0xb0>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	801a      	strh	r2, [r3, #0]

	Directions.RotateBackward.BackLeftWheel = DISABLE;
 8000d7e:	4b23      	ldr	r3, [pc, #140]	@ (8000e0c <DrivingAPIs_TurnMove+0xb4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	80da      	strh	r2, [r3, #6]
	Directions.RotateBackward.BackRightWheel = DISABLE;
 8000d84:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <DrivingAPIs_TurnMove+0xb4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	809a      	strh	r2, [r3, #4]
	Directions.RotateForward.BackLeftWheel = ENABLE;
 8000d8a:	4b20      	ldr	r3, [pc, #128]	@ (8000e0c <DrivingAPIs_TurnMove+0xb4>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	805a      	strh	r2, [r3, #2]
	Directions.RotateForward.BackRightWheel = ENABLE;
 8000d90:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <DrivingAPIs_TurnMove+0xb4>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	801a      	strh	r2, [r3, #0]

	if(Dir == TURN_LEFT)
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000d9c:	d10b      	bne.n	8000db6 <DrivingAPIs_TurnMove+0x5e>
	{
		Speeds.Speeds.BackLeftWheel = Speed/3; // speed/2
 8000d9e:	887b      	ldrh	r3, [r7, #2]
 8000da0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e10 <DrivingAPIs_TurnMove+0xb8>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	085b      	lsrs	r3, r3, #1
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <DrivingAPIs_TurnMove+0xbc>)
 8000dac:	805a      	strh	r2, [r3, #2]
		Speeds.Speeds.BackRightWheel = Speed;
 8000dae:	4a19      	ldr	r2, [pc, #100]	@ (8000e14 <DrivingAPIs_TurnMove+0xbc>)
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	8013      	strh	r3, [r2, #0]
 8000db4:	e00e      	b.n	8000dd4 <DrivingAPIs_TurnMove+0x7c>

	}
	else if(Dir == TURN_RIGHT)
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000dbc:	d10a      	bne.n	8000dd4 <DrivingAPIs_TurnMove+0x7c>
	{
		Speeds.Speeds.BackLeftWheel = Speed;
 8000dbe:	4a15      	ldr	r2, [pc, #84]	@ (8000e14 <DrivingAPIs_TurnMove+0xbc>)
 8000dc0:	887b      	ldrh	r3, [r7, #2]
 8000dc2:	8053      	strh	r3, [r2, #2]
		Speeds.Speeds.BackRightWheel = Speed/3; // speed/2
 8000dc4:	887b      	ldrh	r3, [r7, #2]
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <DrivingAPIs_TurnMove+0xb8>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	085b      	lsrs	r3, r3, #1
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <DrivingAPIs_TurnMove+0xbc>)
 8000dd2:	801a      	strh	r2, [r3, #0]
		Speeds.Speeds.BackRightWheel = Speed;
	}*/



		HBridge_MotorControl(&Wheels, &Directions, &Speeds);
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000e14 <DrivingAPIs_TurnMove+0xbc>)
 8000dd6:	490d      	ldr	r1, [pc, #52]	@ (8000e0c <DrivingAPIs_TurnMove+0xb4>)
 8000dd8:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <DrivingAPIs_TurnMove+0xb0>)
 8000dda:	f000 f8a9 	bl	8000f30 <HBridge_MotorControl>
		HAL_Delay(1000);
 8000dde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000de2:	f001 f81b 	bl	8001e1c <HAL_Delay>
		ServoSG90_SteeringWheelCtrl(TURN_BACK);
 8000de6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000dea:	f000 fab1 	bl	8001350 <ServoSG90_SteeringWheelCtrl>
		Wheels.BackLeftWheel = DISABLE;
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <DrivingAPIs_TurnMove+0xb0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	805a      	strh	r2, [r3, #2]
		Wheels.BackRightWheel = DISABLE;
 8000df4:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <DrivingAPIs_TurnMove+0xb0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	801a      	strh	r2, [r3, #0]
		HBridge_MotorStop(&Wheels);
 8000dfa:	4803      	ldr	r0, [pc, #12]	@ (8000e08 <DrivingAPIs_TurnMove+0xb0>)
 8000dfc:	f000 f966 	bl	80010cc <HBridge_MotorStop>

}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000028 	.word	0x20000028
 8000e0c:	2000002c 	.word	0x2000002c
 8000e10:	aaaaaaab 	.word	0xaaaaaaab
 8000e14:	20000034 	.word	0x20000034

08000e18 <DrivingAPIs_Break>:


void DrivingAPIs_Break(uint8_t BreakType)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]


	switch(BreakType)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d002      	beq.n	8000e2e <DrivingAPIs_Break+0x16>
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d007      	beq.n	8000e3c <DrivingAPIs_Break+0x24>
 8000e2c:	e00d      	b.n	8000e4a <DrivingAPIs_Break+0x32>
	{
	case 1:
		Wheels.BackLeftWheel = BREAK;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <DrivingAPIs_Break+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	805a      	strh	r2, [r3, #2]
		HBridge_MotorStop(&Wheels);
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <DrivingAPIs_Break+0x50>)
 8000e36:	f000 f949 	bl	80010cc <HBridge_MotorStop>
		break;
 8000e3a:	e010      	b.n	8000e5e <DrivingAPIs_Break+0x46>
	case 2:
		Wheels.BackRightWheel = BREAK;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <DrivingAPIs_Break+0x50>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	801a      	strh	r2, [r3, #0]
		HBridge_MotorStop(&Wheels);
 8000e42:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <DrivingAPIs_Break+0x50>)
 8000e44:	f000 f942 	bl	80010cc <HBridge_MotorStop>
		break;
 8000e48:	e009      	b.n	8000e5e <DrivingAPIs_Break+0x46>
	default:
		Wheels.BackLeftWheel = BREAK;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <DrivingAPIs_Break+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	805a      	strh	r2, [r3, #2]
		Wheels.BackRightWheel = BREAK;
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <DrivingAPIs_Break+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	801a      	strh	r2, [r3, #0]
		HBridge_MotorStop(&Wheels);
 8000e56:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <DrivingAPIs_Break+0x50>)
 8000e58:	f000 f938 	bl	80010cc <HBridge_MotorStop>
	}

}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000028 	.word	0x20000028

08000e6c <state_machine>:


uint8_t Encoding(SensorsPosition_t data);

void state_machine(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	//	uint8_t lu8_LastSensPos =0;
	//	uint8_t lu8_ActSensPos =0;

		//static uint8_t State;

		DrivingAPIs_Break(BREAK);
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff ffd1 	bl	8000e18 <DrivingAPIs_Break>
		HAL_Delay(1000);
 8000e76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e7a:	f000 ffcf 	bl	8001e1c <HAL_Delay>
		SensorMapping_Read(&ActSensPos);
 8000e7e:	4814      	ldr	r0, [pc, #80]	@ (8000ed0 <state_machine+0x64>)
 8000e80:	f000 f828 	bl	8000ed4 <SensorMapping_Read>

				}*/
		//DrivingAPIs_TurnMove(TURN_LEFT, 0, SPEED_30);
		//HAL_Delay(1000);

if(ActSensPos.FronLeft.Detection)
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <state_machine+0x64>)
 8000e86:	78db      	ldrb	r3, [r3, #3]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00a      	beq.n	8000ea2 <state_machine+0x36>
{
	DrivingAPIs_Break(BREAK);
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff ffc3 	bl	8000e18 <DrivingAPIs_Break>
	DrivingAPIs_TurnMove(TURN_RIGHT, 0, SPEED_30);
 8000e92:	f644 42cd 	movw	r2, #19661	@ 0x4ccd
 8000e96:	2100      	movs	r1, #0
 8000e98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e9c:	f7ff ff5c 	bl	8000d58 <DrivingAPIs_TurnMove>
		//	lu8_LastSensPos=lu8_ActSensPos;

			//DrivingAPIs_LineMove(SPEED_100,FORWARD);
		//	lu8_LastSensPos=lu8_ActSensPos;

}
 8000ea0:	e013      	b.n	8000eca <state_machine+0x5e>
else if(ActSensPos.FrontRight.Detection==1)
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <state_machine+0x64>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d10a      	bne.n	8000ec0 <state_machine+0x54>
	DrivingAPIs_Break(BREAK);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f7ff ffb4 	bl	8000e18 <DrivingAPIs_Break>
	DrivingAPIs_TurnMove(TURN_LEFT, 0, SPEED_30);
 8000eb0:	f644 42cd 	movw	r2, #19661	@ 0x4ccd
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000eba:	f7ff ff4d 	bl	8000d58 <DrivingAPIs_TurnMove>
}
 8000ebe:	e004      	b.n	8000eca <state_machine+0x5e>
	DrivingAPIs_LineMove(SPEED_50,FORWARD);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000ec6:	f7ff ff05 	bl	8000cd4 <DrivingAPIs_LineMove>
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000038 	.word	0x20000038

08000ed4 <SensorMapping_Read>:




void SensorMapping_Read(SensorsPosition_t *SensorMapping)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

	static uint8_t flag;

	HCSR04_Read();
 8000edc:	f000 fa18 	bl	8001310 <HCSR04_Read>
	HAL_Delay(200);
 8000ee0:	20c8      	movs	r0, #200	@ 0xc8
 8000ee2:	f000 ff9b 	bl	8001e1c <HAL_Delay>

	if(Distance <50)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <SensorMapping_Read+0x54>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b31      	cmp	r3, #49	@ 0x31
 8000eec:	d80f      	bhi.n	8000f0e <SensorMapping_Read+0x3a>
	{
	SensorMapping->FronLeft.Detection= 1;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	70da      	strb	r2, [r3, #3]
	SensorMapping->FronLeft.ActualDistance = Distance;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <SensorMapping_Read+0x54>)
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	715a      	strb	r2, [r3, #5]

	flag = Distance;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <SensorMapping_Read+0x54>)
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <SensorMapping_Read+0x58>)
 8000f02:	701a      	strb	r2, [r3, #0]
	SensorMapping->FronLeft.PreviousDistance = flag;
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <SensorMapping_Read+0x58>)
 8000f06:	781a      	ldrb	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	711a      	strb	r2, [r3, #4]
	{
	SensorMapping->FronLeft.Detection= 0;
	SensorMapping->FronLeft.ActualDistance = 0;
	SensorMapping->FronLeft.PreviousDistance = 0;
	}
}
 8000f0c:	e008      	b.n	8000f20 <SensorMapping_Read+0x4c>
	SensorMapping->FronLeft.Detection= 0;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	70da      	strb	r2, [r3, #3]
	SensorMapping->FronLeft.ActualDistance = 0;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	715a      	strb	r2, [r3, #5]
	SensorMapping->FronLeft.PreviousDistance = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	711a      	strb	r2, [r3, #4]
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000055 	.word	0x20000055
 8000f2c:	20000044 	.word	0x20000044

08000f30 <HBridge_MotorControl>:
void AdjustDutyCycle(uint16_t Speed, uint8_t Motor);



void HBridge_MotorControl(Wheels_t *Wheels, RotateDir_t *Directions, Speeds_t *Speeds)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
	if ((Wheels->BackLeftWheel) && (!Wheels->BackRightWheel))
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	885b      	ldrh	r3, [r3, #2]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02e      	beq.n	8000fa2 <HBridge_MotorControl+0x72>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d12a      	bne.n	8000fa2 <HBridge_MotorControl+0x72>
	{
		/** Rotate only left wheel*/
		if (Directions->RotateForward.BackLeftWheel)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	885b      	ldrh	r3, [r3, #2]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d010      	beq.n	8000f76 <HBridge_MotorControl+0x46>
		{
			AdjustDutyCycle(Speeds->Speeds.BackLeftWheel, LEFTMOTOR);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	885b      	ldrh	r3, [r3, #2]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f8fc 	bl	8001158 <AdjustDutyCycle>
			HAL_GPIO_WritePin(LeftWheel_IN1_GPIO_Port, LeftWheel_IN1_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2110      	movs	r1, #16
 8000f64:	4858      	ldr	r0, [pc, #352]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8000f66:	f001 fa23 	bl	80023b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftWheel_IN2_GPIO_Port, LeftWheel_IN2_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	4856      	ldr	r0, [pc, #344]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8000f70:	f001 fa1e 	bl	80023b0 <HAL_GPIO_WritePin>
		if (Directions->RotateForward.BackLeftWheel)
 8000f74:	e0a1      	b.n	80010ba <HBridge_MotorControl+0x18a>
		}
		else if(Directions->RotateBackward.BackLeftWheel)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	88db      	ldrh	r3, [r3, #6]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 809d 	beq.w	80010ba <HBridge_MotorControl+0x18a>
		{
			AdjustDutyCycle(Speeds->Speeds.BackLeftWheel, LEFTMOTOR);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	885b      	ldrh	r3, [r3, #2]
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f8e6 	bl	8001158 <AdjustDutyCycle>
			HAL_GPIO_WritePin(LeftWheel_IN1_GPIO_Port, LeftWheel_IN1_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2110      	movs	r1, #16
 8000f90:	484d      	ldr	r0, [pc, #308]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8000f92:	f001 fa0d 	bl	80023b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftWheel_IN2_GPIO_Port, LeftWheel_IN2_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2120      	movs	r1, #32
 8000f9a:	484b      	ldr	r0, [pc, #300]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8000f9c:	f001 fa08 	bl	80023b0 <HAL_GPIO_WritePin>
		if (Directions->RotateForward.BackLeftWheel)
 8000fa0:	e08b      	b.n	80010ba <HBridge_MotorControl+0x18a>
		}
	}
	else if((!Wheels->BackLeftWheel) && (Wheels->BackRightWheel))
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	885b      	ldrh	r3, [r3, #2]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d12d      	bne.n	8001006 <HBridge_MotorControl+0xd6>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d029      	beq.n	8001006 <HBridge_MotorControl+0xd6>
	{
		/** Rotate only right wheel*/
		if (Directions->RotateForward.BackRightWheel)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d010      	beq.n	8000fdc <HBridge_MotorControl+0xac>
		{
			AdjustDutyCycle(Speeds->Speeds.BackRightWheel, RIGHTMOTOR);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f8c9 	bl	8001158 <AdjustDutyCycle>
			HAL_GPIO_WritePin(RightWheel_IN3_GPIO_Port, RightWheel_IN3_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2140      	movs	r1, #64	@ 0x40
 8000fca:	483f      	ldr	r0, [pc, #252]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8000fcc:	f001 f9f0 	bl	80023b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN4_GPIO_Port, RightWheel_IN4_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2180      	movs	r1, #128	@ 0x80
 8000fd4:	483c      	ldr	r0, [pc, #240]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8000fd6:	f001 f9eb 	bl	80023b0 <HAL_GPIO_WritePin>
		if (Directions->RotateForward.BackRightWheel)
 8000fda:	e070      	b.n	80010be <HBridge_MotorControl+0x18e>
		}
		else if(Directions->RotateBackward.BackRightWheel)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	889b      	ldrh	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d06c      	beq.n	80010be <HBridge_MotorControl+0x18e>
		{
			AdjustDutyCycle(Speeds->Speeds.BackRightWheel, RIGHTMOTOR);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f8b4 	bl	8001158 <AdjustDutyCycle>
			HAL_GPIO_WritePin(RightWheel_IN3_GPIO_Port, RightWheel_IN3_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2140      	movs	r1, #64	@ 0x40
 8000ff4:	4834      	ldr	r0, [pc, #208]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8000ff6:	f001 f9db 	bl	80023b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN4_GPIO_Port, RightWheel_IN4_Pin, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2180      	movs	r1, #128	@ 0x80
 8000ffe:	4832      	ldr	r0, [pc, #200]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8001000:	f001 f9d6 	bl	80023b0 <HAL_GPIO_WritePin>
		if (Directions->RotateForward.BackRightWheel)
 8001004:	e05b      	b.n	80010be <HBridge_MotorControl+0x18e>
		}
	}
	else if((Wheels->BackLeftWheel) && (Wheels->BackRightWheel))
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	885b      	ldrh	r3, [r3, #2]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d058      	beq.n	80010c0 <HBridge_MotorControl+0x190>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d054      	beq.n	80010c0 <HBridge_MotorControl+0x190>
	{
		/** Rotate both wheels */
		if ((Directions->RotateForward.BackLeftWheel)&&(Directions->RotateForward.BackRightWheel))
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	885b      	ldrh	r3, [r3, #2]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d024      	beq.n	8001068 <HBridge_MotorControl+0x138>
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d020      	beq.n	8001068 <HBridge_MotorControl+0x138>
		{
			AdjustDutyCycle(Speeds->Speeds.BackLeftWheel, LEFTMOTOR);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	885b      	ldrh	r3, [r3, #2]
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f893 	bl	8001158 <AdjustDutyCycle>
			AdjustDutyCycle(Speeds->Speeds.BackRightWheel, RIGHTMOTOR);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	2101      	movs	r1, #1
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f88d 	bl	8001158 <AdjustDutyCycle>
			HAL_GPIO_WritePin(LeftWheel_IN1_GPIO_Port, LeftWheel_IN1_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2110      	movs	r1, #16
 8001042:	4821      	ldr	r0, [pc, #132]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8001044:	f001 f9b4 	bl	80023b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftWheel_IN2_GPIO_Port, LeftWheel_IN2_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	481e      	ldr	r0, [pc, #120]	@ (80010c8 <HBridge_MotorControl+0x198>)
 800104e:	f001 f9af 	bl	80023b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN3_GPIO_Port, RightWheel_IN3_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2140      	movs	r1, #64	@ 0x40
 8001056:	481c      	ldr	r0, [pc, #112]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8001058:	f001 f9aa 	bl	80023b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN4_GPIO_Port, RightWheel_IN4_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2180      	movs	r1, #128	@ 0x80
 8001060:	4819      	ldr	r0, [pc, #100]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8001062:	f001 f9a5 	bl	80023b0 <HAL_GPIO_WritePin>
 8001066:	e02b      	b.n	80010c0 <HBridge_MotorControl+0x190>
		}
		else if((Directions->RotateBackward.BackLeftWheel)&&(Directions->RotateBackward.BackRightWheel))
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	88db      	ldrh	r3, [r3, #6]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d027      	beq.n	80010c0 <HBridge_MotorControl+0x190>
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	889b      	ldrh	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d023      	beq.n	80010c0 <HBridge_MotorControl+0x190>
		{
			AdjustDutyCycle(Speeds->Speeds.BackLeftWheel, LEFTMOTOR);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	885b      	ldrh	r3, [r3, #2]
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f86a 	bl	8001158 <AdjustDutyCycle>
			AdjustDutyCycle(Speeds->Speeds.BackRightWheel, RIGHTMOTOR);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f864 	bl	8001158 <AdjustDutyCycle>
			HAL_GPIO_WritePin(LeftWheel_IN1_GPIO_Port, LeftWheel_IN1_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2110      	movs	r1, #16
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <HBridge_MotorControl+0x198>)
 8001096:	f001 f98b 	bl	80023b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftWheel_IN2_GPIO_Port, LeftWheel_IN2_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2120      	movs	r1, #32
 800109e:	480a      	ldr	r0, [pc, #40]	@ (80010c8 <HBridge_MotorControl+0x198>)
 80010a0:	f001 f986 	bl	80023b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN3_GPIO_Port, RightWheel_IN3_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2140      	movs	r1, #64	@ 0x40
 80010a8:	4807      	ldr	r0, [pc, #28]	@ (80010c8 <HBridge_MotorControl+0x198>)
 80010aa:	f001 f981 	bl	80023b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN4_GPIO_Port, RightWheel_IN4_Pin, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2180      	movs	r1, #128	@ 0x80
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <HBridge_MotorControl+0x198>)
 80010b4:	f001 f97c 	bl	80023b0 <HAL_GPIO_WritePin>
		}
	}
}
 80010b8:	e002      	b.n	80010c0 <HBridge_MotorControl+0x190>
		if (Directions->RotateForward.BackLeftWheel)
 80010ba:	bf00      	nop
 80010bc:	e000      	b.n	80010c0 <HBridge_MotorControl+0x190>
		if (Directions->RotateForward.BackRightWheel)
 80010be:	bf00      	nop
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40020000 	.word	0x40020000

080010cc <HBridge_MotorStop>:


void HBridge_MotorStop(Wheels_t *Wheels)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if ((!Wheels->BackLeftWheel) && (Wheels->BackRightWheel))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	885b      	ldrh	r3, [r3, #2]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10e      	bne.n	80010fa <HBridge_MotorStop+0x2e>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00a      	beq.n	80010fa <HBridge_MotorStop+0x2e>
	{
		//AdjustDutyCycle(PWM1, DUTYCYCLE_0); //TODO: Set duty cycle for PWM1 to 0
		HAL_GPIO_WritePin(LeftWheel_IN1_GPIO_Port, LeftWheel_IN1_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2110      	movs	r1, #16
 80010e8:	481a      	ldr	r0, [pc, #104]	@ (8001154 <HBridge_MotorStop+0x88>)
 80010ea:	f001 f961 	bl	80023b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LeftWheel_IN2_GPIO_Port, LeftWheel_IN2_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2120      	movs	r1, #32
 80010f2:	4818      	ldr	r0, [pc, #96]	@ (8001154 <HBridge_MotorStop+0x88>)
 80010f4:	f001 f95c 	bl	80023b0 <HAL_GPIO_WritePin>
 80010f8:	e027      	b.n	800114a <HBridge_MotorStop+0x7e>
	}
	else if((!Wheels->BackRightWheel) && (Wheels->BackLeftWheel))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10e      	bne.n	8001120 <HBridge_MotorStop+0x54>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	885b      	ldrh	r3, [r3, #2]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <HBridge_MotorStop+0x54>
	{
		//AdjustDutyCycle(PWM2, DUTYCYCLE_0); //TODO: Set duty cycle for PWM2 to 0
		HAL_GPIO_WritePin(RightWheel_IN3_GPIO_Port, RightWheel_IN3_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2140      	movs	r1, #64	@ 0x40
 800110e:	4811      	ldr	r0, [pc, #68]	@ (8001154 <HBridge_MotorStop+0x88>)
 8001110:	f001 f94e 	bl	80023b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RightWheel_IN4_GPIO_Port, RightWheel_IN4_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2180      	movs	r1, #128	@ 0x80
 8001118:	480e      	ldr	r0, [pc, #56]	@ (8001154 <HBridge_MotorStop+0x88>)
 800111a:	f001 f949 	bl	80023b0 <HAL_GPIO_WritePin>
 800111e:	e014      	b.n	800114a <HBridge_MotorStop+0x7e>
	}
	else
	{
		//AdjustDutyCycle(PWM, DUTYCYCLE_0); //TODO: Set duty cycle for both PWM to 0
		HAL_GPIO_WritePin(LeftWheel_IN1_GPIO_Port, LeftWheel_IN1_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2110      	movs	r1, #16
 8001124:	480b      	ldr	r0, [pc, #44]	@ (8001154 <HBridge_MotorStop+0x88>)
 8001126:	f001 f943 	bl	80023b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LeftWheel_IN2_GPIO_Port, LeftWheel_IN2_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2120      	movs	r1, #32
 800112e:	4809      	ldr	r0, [pc, #36]	@ (8001154 <HBridge_MotorStop+0x88>)
 8001130:	f001 f93e 	bl	80023b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RightWheel_IN3_GPIO_Port, RightWheel_IN3_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2140      	movs	r1, #64	@ 0x40
 8001138:	4806      	ldr	r0, [pc, #24]	@ (8001154 <HBridge_MotorStop+0x88>)
 800113a:	f001 f939 	bl	80023b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RightWheel_IN4_GPIO_Port, RightWheel_IN4_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2180      	movs	r1, #128	@ 0x80
 8001142:	4804      	ldr	r0, [pc, #16]	@ (8001154 <HBridge_MotorStop+0x88>)
 8001144:	f001 f934 	bl	80023b0 <HAL_GPIO_WritePin>
	}
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40020000 	.word	0x40020000

08001158 <AdjustDutyCycle>:

}


void AdjustDutyCycle(uint16_t Speed, uint8_t Motor)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	80fb      	strh	r3, [r7, #6]
 8001164:	4613      	mov	r3, r2
 8001166:	717b      	strb	r3, [r7, #5]
	if(Motor == LEFTMOTOR)
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d104      	bne.n	8001178 <AdjustDutyCycle+0x20>
	{
		htim1.Instance->CCR3 = Speed;
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <AdjustDutyCycle+0x3c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if(Motor == RIGHTMOTOR)
	{
		htim8.Instance->CCR2 = Speed;
	}
}
 8001176:	e006      	b.n	8001186 <AdjustDutyCycle+0x2e>
	else if(Motor == RIGHTMOTOR)
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d103      	bne.n	8001186 <AdjustDutyCycle+0x2e>
		htim8.Instance->CCR2 = Speed;
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <AdjustDutyCycle+0x40>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	88fa      	ldrh	r2, [r7, #6]
 8001184:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000058 	.word	0x20000058
 8001198:	20000130 	.word	0x20000130

0800119c <delay>:

extern TIM_HandleTypeDef htim3;


void delay (uint16_t time)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <delay+0x30>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < time);
 80011ae:	bf00      	nop
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <delay+0x30>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3f9      	bcc.n	80011b0 <delay+0x14>
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200000e8 	.word	0x200000e8

080011d0 <HAL_TIM_IC_CaptureCallback>:

#define TRIG_PIN GPIO_PIN_9
#define TRIG_Port GPIOA

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7f1b      	ldrb	r3, [r3, #28]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	f040 8083 	bne.w	80012e8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if(Is_First_Captured==0)
 80011e2:	4b45      	ldr	r3, [pc, #276]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d11a      	bne.n	8001220 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80011ea:	210c      	movs	r1, #12
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f002 fd05 	bl	8003bfc <HAL_TIM_ReadCapturedValue>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a41      	ldr	r2, [pc, #260]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011f6:	6013      	str	r3, [r2, #0]
			Is_First_Captured =1;
 80011f8:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6a1a      	ldr	r2, [r3, #32]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800120c:	621a      	str	r2, [r3, #32]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a1a      	ldr	r2, [r3, #32]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800121c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC4);

		}
	}
}
 800121e:	e063      	b.n	80012e8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if(Is_First_Captured == 1)
 8001220:	4b35      	ldr	r3, [pc, #212]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d15f      	bne.n	80012e8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001228:	210c      	movs	r1, #12
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f002 fce6 	bl	8003bfc <HAL_TIM_ReadCapturedValue>
 8001230:	4603      	mov	r3, r0
 8001232:	4a33      	ldr	r2, [pc, #204]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001234:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	@ 0x24
			if( IC_Val2 > IC_Val1)
 800123e:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b2e      	ldr	r3, [pc, #184]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d907      	bls.n	800125a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 800124a:	4b2d      	ldr	r3, [pc, #180]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0x130>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	4a2b      	ldr	r2, [pc, #172]	@ (8001304 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e00f      	b.n	800127a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if(IC_Val2 > IC_Val1)
 800125a:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0x130>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b27      	ldr	r3, [pc, #156]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d909      	bls.n	800127a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1)+ IC_Val2;
 8001266:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001274:	33ff      	adds	r3, #255	@ 0xff
 8001276:	4a23      	ldr	r2, [pc, #140]	@ (8001304 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001278:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 800127a:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <HAL_TIM_IC_CaptureCallback+0x134>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f904 	bl	800048c <__aeabi_ui2d>
 8001284:	a31a      	add	r3, pc, #104	@ (adr r3, 80012f0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f979 	bl	8000580 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800129e:	f7ff fa99 	bl	80007d4 <__aeabi_ddiv>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fb7b 	bl	80009a4 <__aeabi_d2uiz>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_TIM_IC_CaptureCallback+0x138>)
 80012b4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0;
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6a1a      	ldr	r2, [r3, #32]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80012ca:	621a      	str	r2, [r3, #32]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6a12      	ldr	r2, [r2, #32]
 80012d6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC4);
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0210 	bic.w	r2, r2, #16
 80012e6:	60da      	str	r2, [r3, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	b020c49c 	.word	0xb020c49c
 80012f4:	3fa16872 	.word	0x3fa16872
 80012f8:	20000054 	.word	0x20000054
 80012fc:	20000048 	.word	0x20000048
 8001300:	2000004c 	.word	0x2000004c
 8001304:	20000050 	.word	0x20000050
 8001308:	20000055 	.word	0x20000055
 800130c:	200000e8 	.word	0x200000e8

08001310 <HCSR04_Read>:

void HCSR04_Read(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_Port, TRIG_PIN, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800131a:	480b      	ldr	r0, [pc, #44]	@ (8001348 <HCSR04_Read+0x38>)
 800131c:	f001 f848 	bl	80023b0 <HAL_GPIO_WritePin>
	delay(10);
 8001320:	200a      	movs	r0, #10
 8001322:	f7ff ff3b 	bl	800119c <delay>
	HAL_GPIO_WritePin(TRIG_Port, TRIG_PIN, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800132c:	4806      	ldr	r0, [pc, #24]	@ (8001348 <HCSR04_Read+0x38>)
 800132e:	f001 f83f 	bl	80023b0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC4);
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HCSR04_Read+0x3c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <HCSR04_Read+0x3c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0210 	orr.w	r2, r2, #16
 8001340:	60da      	str	r2, [r3, #12]
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40020000 	.word	0x40020000
 800134c:	200000e8 	.word	0x200000e8

08001350 <ServoSG90_SteeringWheelCtrl>:




void ServoSG90_SteeringWheelCtrl(uint16_t Direction)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
	htim2.Instance->CCR1 = Direction;
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <ServoSG90_SteeringWheelCtrl+0x20>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	88fa      	ldrh	r2, [r7, #6]
 8001360:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200000a0 	.word	0x200000a0

08001374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001378:	f000 fcde 	bl	8001d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 f82a 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f000 fac0 	bl	8001904 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001384:	f000 f898 	bl	80014b8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001388:	f000 fa1c 	bl	80017c4 <MX_TIM8_Init>
  MX_TIM2_Init();
 800138c:	f000 f934 	bl	80015f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001390:	f000 f9a8 	bl	80016e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001394:	2108      	movs	r1, #8
 8001396:	480b      	ldr	r0, [pc, #44]	@ (80013c4 <main+0x50>)
 8001398:	f001 fed0 	bl	800313c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800139c:	2104      	movs	r1, #4
 800139e:	480a      	ldr	r0, [pc, #40]	@ (80013c8 <main+0x54>)
 80013a0:	f001 fecc 	bl	800313c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013a4:	2100      	movs	r1, #0
 80013a6:	4809      	ldr	r0, [pc, #36]	@ (80013cc <main+0x58>)
 80013a8:	f001 fec8 	bl	800313c <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80013ac:	210c      	movs	r1, #12
 80013ae:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <main+0x5c>)
 80013b0:	f001 ffe6 	bl	8003380 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 state_machine();
 80013b4:	f7ff fd5a 	bl	8000e6c <state_machine>
	 HAL_Delay(200);
 80013b8:	20c8      	movs	r0, #200	@ 0xc8
 80013ba:	f000 fd2f 	bl	8001e1c <HAL_Delay>
	 state_machine();
 80013be:	bf00      	nop
 80013c0:	e7f8      	b.n	80013b4 <main+0x40>
 80013c2:	bf00      	nop
 80013c4:	20000058 	.word	0x20000058
 80013c8:	20000130 	.word	0x20000130
 80013cc:	200000a0 	.word	0x200000a0
 80013d0:	200000e8 	.word	0x200000e8

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	@ 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	2234      	movs	r2, #52	@ 0x34
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 f99e 	bl	8004724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	4b2c      	ldr	r3, [pc, #176]	@ (80014b0 <SystemClock_Config+0xdc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a2b      	ldr	r2, [pc, #172]	@ (80014b0 <SystemClock_Config+0xdc>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
 8001408:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <SystemClock_Config+0xdc>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <SystemClock_Config+0xe0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a25      	ldr	r2, [pc, #148]	@ (80014b4 <SystemClock_Config+0xe0>)
 800141e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <SystemClock_Config+0xe0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	2301      	movs	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001438:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001442:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001444:	2304      	movs	r3, #4
 8001446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001448:	23b4      	movs	r3, #180	@ 0xb4
 800144a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001450:	2302      	movs	r3, #2
 8001452:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001454:	2302      	movs	r3, #2
 8001456:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fb27 	bl	8002ab0 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001468:	f000 faac 	bl	80019c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800146c:	f000 ffba 	bl	80023e4 <HAL_PWREx_EnableOverDrive>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001476:	f000 faa5 	bl	80019c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	230f      	movs	r3, #15
 800147c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147e:	2302      	movs	r3, #2
 8001480:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001486:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800148a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800148c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001490:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	2105      	movs	r1, #5
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fff3 	bl	8002484 <HAL_RCC_ClockConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80014a4:	f000 fa8e 	bl	80019c4 <Error_Handler>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3750      	adds	r7, #80	@ 0x50
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b096      	sub	sp, #88	@ 0x58
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2220      	movs	r2, #32
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 f917 	bl	8004724 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f6:	4b3e      	ldr	r3, [pc, #248]	@ (80015f0 <MX_TIM1_Init+0x138>)
 80014f8:	4a3e      	ldr	r2, [pc, #248]	@ (80015f4 <MX_TIM1_Init+0x13c>)
 80014fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 80014fc:	4b3c      	ldr	r3, [pc, #240]	@ (80015f0 <MX_TIM1_Init+0x138>)
 80014fe:	22b3      	movs	r2, #179	@ 0xb3
 8001500:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b3b      	ldr	r3, [pc, #236]	@ (80015f0 <MX_TIM1_Init+0x138>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001508:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <MX_TIM1_Init+0x138>)
 800150a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800150e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001510:	4b37      	ldr	r3, [pc, #220]	@ (80015f0 <MX_TIM1_Init+0x138>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001516:	4b36      	ldr	r3, [pc, #216]	@ (80015f0 <MX_TIM1_Init+0x138>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b34      	ldr	r3, [pc, #208]	@ (80015f0 <MX_TIM1_Init+0x138>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001522:	4833      	ldr	r0, [pc, #204]	@ (80015f0 <MX_TIM1_Init+0x138>)
 8001524:	f001 fd62 	bl	8002fec <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800152e:	f000 fa49 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001536:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001538:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800153c:	4619      	mov	r1, r3
 800153e:	482c      	ldr	r0, [pc, #176]	@ (80015f0 <MX_TIM1_Init+0x138>)
 8001540:	f002 fa94 	bl	8003a6c <HAL_TIM_ConfigClockSource>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800154a:	f000 fa3b 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800154e:	4828      	ldr	r0, [pc, #160]	@ (80015f0 <MX_TIM1_Init+0x138>)
 8001550:	f001 fd9b 	bl	800308a <HAL_TIM_PWM_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800155a:	f000 fa33 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001566:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800156a:	4619      	mov	r1, r3
 800156c:	4820      	ldr	r0, [pc, #128]	@ (80015f0 <MX_TIM1_Init+0x138>)
 800156e:	f002 fff7 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001578:	f000 fa24 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157c:	2360      	movs	r3, #96	@ 0x60
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159c:	2208      	movs	r2, #8
 800159e:	4619      	mov	r1, r3
 80015a0:	4813      	ldr	r0, [pc, #76]	@ (80015f0 <MX_TIM1_Init+0x138>)
 80015a2:	f002 f9a1 	bl	80038e8 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015ac:	f000 fa0a 	bl	80019c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <MX_TIM1_Init+0x138>)
 80015d4:	f003 f840 	bl	8004658 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80015de:	f000 f9f1 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015e2:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <MX_TIM1_Init+0x138>)
 80015e4:	f000 faac 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	3758      	adds	r7, #88	@ 0x58
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000058 	.word	0x20000058
 80015f4:	40010000 	.word	0x40010000

080015f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	@ 0x38
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 0320 	add.w	r3, r7, #32
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001628:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 800162a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800162e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001630:	4b2b      	ldr	r3, [pc, #172]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 8001632:	2259      	movs	r2, #89	@ 0x59
 8001634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b2a      	ldr	r3, [pc, #168]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800163c:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 800163e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001642:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b25      	ldr	r3, [pc, #148]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001650:	4823      	ldr	r0, [pc, #140]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 8001652:	f001 fccb 	bl	8002fec <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800165c:	f000 f9b2 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001664:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800166a:	4619      	mov	r1, r3
 800166c:	481c      	ldr	r0, [pc, #112]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 800166e:	f002 f9fd 	bl	8003a6c <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001678:	f000 f9a4 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800167c:	4818      	ldr	r0, [pc, #96]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 800167e:	f001 fd04 	bl	800308a <HAL_TIM_PWM_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001688:	f000 f99c 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	4619      	mov	r1, r3
 800169a:	4811      	ldr	r0, [pc, #68]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 800169c:	f002 ff60 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80016a6:	f000 f98d 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016aa:	2360      	movs	r3, #96	@ 0x60
 80016ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	4619      	mov	r1, r3
 80016c0:	4807      	ldr	r0, [pc, #28]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 80016c2:	f002 f911 	bl	80038e8 <HAL_TIM_PWM_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80016cc:	f000 f97a 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016d0:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <MX_TIM2_Init+0xe8>)
 80016d2:	f000 fa35 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 80016d6:	bf00      	nop
 80016d8:	3738      	adds	r7, #56	@ 0x38
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200000a0 	.word	0x200000a0

080016e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800170e:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <MX_TIM3_Init+0xd8>)
 8001710:	4a2b      	ldr	r2, [pc, #172]	@ (80017c0 <MX_TIM3_Init+0xdc>)
 8001712:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001714:	4b29      	ldr	r3, [pc, #164]	@ (80017bc <MX_TIM3_Init+0xd8>)
 8001716:	2259      	movs	r2, #89	@ 0x59
 8001718:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <MX_TIM3_Init+0xd8>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001720:	4b26      	ldr	r3, [pc, #152]	@ (80017bc <MX_TIM3_Init+0xd8>)
 8001722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001726:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <MX_TIM3_Init+0xd8>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	4b23      	ldr	r3, [pc, #140]	@ (80017bc <MX_TIM3_Init+0xd8>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001734:	4821      	ldr	r0, [pc, #132]	@ (80017bc <MX_TIM3_Init+0xd8>)
 8001736:	f001 fc59 	bl	8002fec <HAL_TIM_Base_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001740:	f000 f940 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001748:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800174a:	f107 0318 	add.w	r3, r7, #24
 800174e:	4619      	mov	r1, r3
 8001750:	481a      	ldr	r0, [pc, #104]	@ (80017bc <MX_TIM3_Init+0xd8>)
 8001752:	f002 f98b 	bl	8003a6c <HAL_TIM_ConfigClockSource>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800175c:	f000 f932 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001760:	4816      	ldr	r0, [pc, #88]	@ (80017bc <MX_TIM3_Init+0xd8>)
 8001762:	f001 fdb3 	bl	80032cc <HAL_TIM_IC_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800176c:	f000 f92a 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	4619      	mov	r1, r3
 800177e:	480f      	ldr	r0, [pc, #60]	@ (80017bc <MX_TIM3_Init+0xd8>)
 8001780:	f002 feee 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800178a:	f000 f91b 	bl	80019c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001792:	2301      	movs	r3, #1
 8001794:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	220c      	movs	r2, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	@ (80017bc <MX_TIM3_Init+0xd8>)
 80017a6:	f002 f803 	bl	80037b0 <HAL_TIM_IC_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80017b0:	f000 f908 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	@ 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200000e8 	.word	0x200000e8
 80017c0:	40000400 	.word	0x40000400

080017c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b096      	sub	sp, #88	@ 0x58
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]
 80017f2:	615a      	str	r2, [r3, #20]
 80017f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2220      	movs	r2, #32
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 ff91 	bl	8004724 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001802:	4b3e      	ldr	r3, [pc, #248]	@ (80018fc <MX_TIM8_Init+0x138>)
 8001804:	4a3e      	ldr	r2, [pc, #248]	@ (8001900 <MX_TIM8_Init+0x13c>)
 8001806:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8001808:	4b3c      	ldr	r3, [pc, #240]	@ (80018fc <MX_TIM8_Init+0x138>)
 800180a:	22b3      	movs	r2, #179	@ 0xb3
 800180c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b3b      	ldr	r3, [pc, #236]	@ (80018fc <MX_TIM8_Init+0x138>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001814:	4b39      	ldr	r3, [pc, #228]	@ (80018fc <MX_TIM8_Init+0x138>)
 8001816:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800181a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181c:	4b37      	ldr	r3, [pc, #220]	@ (80018fc <MX_TIM8_Init+0x138>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001822:	4b36      	ldr	r3, [pc, #216]	@ (80018fc <MX_TIM8_Init+0x138>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001828:	4b34      	ldr	r3, [pc, #208]	@ (80018fc <MX_TIM8_Init+0x138>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800182e:	4833      	ldr	r0, [pc, #204]	@ (80018fc <MX_TIM8_Init+0x138>)
 8001830:	f001 fbdc 	bl	8002fec <HAL_TIM_Base_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800183a:	f000 f8c3 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001842:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001844:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001848:	4619      	mov	r1, r3
 800184a:	482c      	ldr	r0, [pc, #176]	@ (80018fc <MX_TIM8_Init+0x138>)
 800184c:	f002 f90e 	bl	8003a6c <HAL_TIM_ConfigClockSource>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001856:	f000 f8b5 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800185a:	4828      	ldr	r0, [pc, #160]	@ (80018fc <MX_TIM8_Init+0x138>)
 800185c:	f001 fc15 	bl	800308a <HAL_TIM_PWM_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001866:	f000 f8ad 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001872:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001876:	4619      	mov	r1, r3
 8001878:	4820      	ldr	r0, [pc, #128]	@ (80018fc <MX_TIM8_Init+0x138>)
 800187a:	f002 fe71 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001884:	f000 f89e 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001888:	2360      	movs	r3, #96	@ 0x60
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001894:	2300      	movs	r3, #0
 8001896:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a8:	2204      	movs	r2, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4813      	ldr	r0, [pc, #76]	@ (80018fc <MX_TIM8_Init+0x138>)
 80018ae:	f002 f81b 	bl	80038e8 <HAL_TIM_PWM_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80018b8:	f000 f884 	bl	80019c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	4619      	mov	r1, r3
 80018de:	4807      	ldr	r0, [pc, #28]	@ (80018fc <MX_TIM8_Init+0x138>)
 80018e0:	f002 feba 	bl	8004658 <HAL_TIMEx_ConfigBreakDeadTime>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80018ea:	f000 f86b 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80018ee:	4803      	ldr	r0, [pc, #12]	@ (80018fc <MX_TIM8_Init+0x138>)
 80018f0:	f000 f926 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 80018f4:	bf00      	nop
 80018f6:	3758      	adds	r7, #88	@ 0x58
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000130 	.word	0x20000130
 8001900:	40010400 	.word	0x40010400

08001904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	@ 0x28
 8001908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <MX_GPIO_Init+0xb8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a26      	ldr	r2, [pc, #152]	@ (80019bc <MX_GPIO_Init+0xb8>)
 8001924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <MX_GPIO_Init+0xb8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <MX_GPIO_Init+0xb8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a1f      	ldr	r2, [pc, #124]	@ (80019bc <MX_GPIO_Init+0xb8>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <MX_GPIO_Init+0xb8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <MX_GPIO_Init+0xb8>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a18      	ldr	r2, [pc, #96]	@ (80019bc <MX_GPIO_Init+0xb8>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <MX_GPIO_Init+0xb8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <MX_GPIO_Init+0xb8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <MX_GPIO_Init+0xb8>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <MX_GPIO_Init+0xb8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LeftWheel_IN1_Pin|LeftWheel_IN2_Pin|RightWheel_IN3_Pin|RightWheel_IN4_Pin
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 8001990:	480b      	ldr	r0, [pc, #44]	@ (80019c0 <MX_GPIO_Init+0xbc>)
 8001992:	f000 fd0d 	bl	80023b0 <HAL_GPIO_WritePin>
                          |Sens_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LeftWheel_IN1_Pin LeftWheel_IN2_Pin RightWheel_IN3_Pin RightWheel_IN4_Pin
                           Sens_Pin */
  GPIO_InitStruct.Pin = LeftWheel_IN1_Pin|LeftWheel_IN2_Pin|RightWheel_IN3_Pin|RightWheel_IN4_Pin
 8001996:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 800199a:	617b      	str	r3, [r7, #20]
                          |Sens_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	4804      	ldr	r0, [pc, #16]	@ (80019c0 <MX_GPIO_Init+0xbc>)
 80019b0:	f000 fb6a 	bl	8002088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019b4:	bf00      	nop
 80019b6:	3728      	adds	r7, #40	@ 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <Error_Handler+0x8>

080019d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <HAL_MspInit+0x4c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	4a0f      	ldr	r2, [pc, #60]	@ (8001a1c <HAL_MspInit+0x4c>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_MspInit+0x4c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <HAL_MspInit+0x4c>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a0e:	2007      	movs	r0, #7
 8001a10:	f000 faf8 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	@ 0x30
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b2c <HAL_TIM_Base_MspInit+0x10c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10e      	bne.n	8001a60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	4b3a      	ldr	r3, [pc, #232]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a39      	ldr	r2, [pc, #228]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b37      	ldr	r3, [pc, #220]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001a5e:	e060      	b.n	8001b22 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a68:	d10e      	bne.n	8001a88 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	4b30      	ldr	r3, [pc, #192]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	4a2f      	ldr	r2, [pc, #188]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
}
 8001a86:	e04c      	b.n	8001b22 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a29      	ldr	r2, [pc, #164]	@ (8001b34 <HAL_TIM_Base_MspInit+0x114>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d134      	bne.n	8001afc <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a25      	ldr	r2, [pc, #148]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ada:	2302      	movs	r3, #2
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4814      	ldr	r0, [pc, #80]	@ (8001b38 <HAL_TIM_Base_MspInit+0x118>)
 8001ae6:	f000 facf 	bl	8002088 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	201d      	movs	r0, #29
 8001af0:	f000 fa93 	bl	800201a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001af4:	201d      	movs	r0, #29
 8001af6:	f000 faac 	bl	8002052 <HAL_NVIC_EnableIRQ>
}
 8001afa:	e012      	b.n	8001b22 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <HAL_TIM_Base_MspInit+0x11c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10d      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_TIM_Base_MspInit+0x110>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
}
 8001b22:	bf00      	nop
 8001b24:	3730      	adds	r7, #48	@ 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	@ 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a36      	ldr	r2, [pc, #216]	@ (8001c38 <HAL_TIM_MspPostInit+0xf8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d11f      	bne.n	8001ba2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b35      	ldr	r3, [pc, #212]	@ (8001c3c <HAL_TIM_MspPostInit+0xfc>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a34      	ldr	r2, [pc, #208]	@ (8001c3c <HAL_TIM_MspPostInit+0xfc>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b32      	ldr	r3, [pc, #200]	@ (8001c3c <HAL_TIM_MspPostInit+0xfc>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4829      	ldr	r0, [pc, #164]	@ (8001c40 <HAL_TIM_MspPostInit+0x100>)
 8001b9c:	f000 fa74 	bl	8002088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001ba0:	e046      	b.n	8001c30 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001baa:	d11e      	bne.n	8001bea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <HAL_TIM_MspPostInit+0xfc>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	4a21      	ldr	r2, [pc, #132]	@ (8001c3c <HAL_TIM_MspPostInit+0xfc>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <HAL_TIM_MspPostInit+0xfc>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4817      	ldr	r0, [pc, #92]	@ (8001c40 <HAL_TIM_MspPostInit+0x100>)
 8001be4:	f000 fa50 	bl	8002088 <HAL_GPIO_Init>
}
 8001be8:	e022      	b.n	8001c30 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM8)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a15      	ldr	r2, [pc, #84]	@ (8001c44 <HAL_TIM_MspPostInit+0x104>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d11d      	bne.n	8001c30 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <HAL_TIM_MspPostInit+0xfc>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c3c <HAL_TIM_MspPostInit+0xfc>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c04:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <HAL_TIM_MspPostInit+0xfc>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c20:	2303      	movs	r3, #3
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <HAL_TIM_MspPostInit+0x108>)
 8001c2c:	f000 fa2c 	bl	8002088 <HAL_GPIO_Init>
}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	@ 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40010400 	.word	0x40010400
 8001c48:	40020800 	.word	0x40020800

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <NMI_Handler+0x4>

08001c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <MemManage_Handler+0x4>

08001c64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca2:	f000 f89b 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cb0:	4802      	ldr	r0, [pc, #8]	@ (8001cbc <TIM3_IRQHandler+0x10>)
 8001cb2:	f001 fc8d 	bl	80035d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200000e8 	.word	0x200000e8

08001cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <SystemInit+0x20>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cca:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <SystemInit+0x20>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ce8:	f7ff ffea 	bl	8001cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cec:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cee:	490d      	ldr	r1, [pc, #52]	@ (8001d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d04:	4c0a      	ldr	r4, [pc, #40]	@ (8001d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d12:	f002 fd0f 	bl	8004734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d16:	f7ff fb2d 	bl	8001374 <main>
  bx  lr    
 8001d1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d28:	080047b4 	.word	0x080047b4
  ldr r2, =_sbss
 8001d2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d30:	2000017c 	.word	0x2000017c

08001d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC_IRQHandler>
	...

08001d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <HAL_Init+0x40>)
 8001d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_Init+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <HAL_Init+0x40>)
 8001d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_Init+0x40>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 f94f 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f808 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff fe30 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_InitTick+0x54>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_InitTick+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f967 	bl	800206e <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 f92f 	bl	800201a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	@ (8001dd8 <HAL_InitTick+0x5c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	20000178 	.word	0x20000178

08001e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000178 	.word	0x20000178

08001e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff ffee 	bl	8001e04 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008

08001e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4907      	ldr	r1, [pc, #28]	@ (8001f00 <__NVIC_EnableIRQ+0x38>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000e100 	.word	0xe000e100

08001f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db0a      	blt.n	8001f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	490c      	ldr	r1, [pc, #48]	@ (8001f50 <__NVIC_SetPriority+0x4c>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f2c:	e00a      	b.n	8001f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4908      	ldr	r1, [pc, #32]	@ (8001f54 <__NVIC_SetPriority+0x50>)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	0112      	lsls	r2, r2, #4
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	761a      	strb	r2, [r3, #24]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f1c3 0307 	rsb	r3, r3, #7
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	bf28      	it	cs
 8001f76:	2304      	movcs	r3, #4
 8001f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d902      	bls.n	8001f88 <NVIC_EncodePriority+0x30>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3b03      	subs	r3, #3
 8001f86:	e000      	b.n	8001f8a <NVIC_EncodePriority+0x32>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	4313      	orrs	r3, r2
         );
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	@ 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd0:	d301      	bcc.n	8001fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00f      	b.n	8001ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <SysTick_Config+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fde:	210f      	movs	r1, #15
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f7ff ff8e 	bl	8001f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <SysTick_Config+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fee:	4b04      	ldr	r3, [pc, #16]	@ (8002000 <SysTick_Config+0x40>)
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010

08002004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff29 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202c:	f7ff ff3e 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8002030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff ff8e 	bl	8001f58 <NVIC_EncodePriority>
 800203c:	4602      	mov	r2, r0
 800203e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff5d 	bl	8001f04 <__NVIC_SetPriority>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff31 	bl	8001ec8 <__NVIC_EnableIRQ>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ffa2 	bl	8001fc0 <SysTick_Config>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e165      	b.n	8002370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 8154 	bne.w	800236a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d005      	beq.n	80020da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d130      	bne.n	800213c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 0201 	and.w	r2, r3, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b03      	cmp	r3, #3
 8002146:	d017      	beq.n	8002178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d123      	bne.n	80021cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80ae 	beq.w	800236a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b5d      	ldr	r3, [pc, #372]	@ (8002388 <HAL_GPIO_Init+0x300>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	4a5c      	ldr	r2, [pc, #368]	@ (8002388 <HAL_GPIO_Init+0x300>)
 8002218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800221c:	6453      	str	r3, [r2, #68]	@ 0x44
 800221e:	4b5a      	ldr	r3, [pc, #360]	@ (8002388 <HAL_GPIO_Init+0x300>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222a:	4a58      	ldr	r2, [pc, #352]	@ (800238c <HAL_GPIO_Init+0x304>)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4f      	ldr	r2, [pc, #316]	@ (8002390 <HAL_GPIO_Init+0x308>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d025      	beq.n	80022a2 <HAL_GPIO_Init+0x21a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4e      	ldr	r2, [pc, #312]	@ (8002394 <HAL_GPIO_Init+0x30c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01f      	beq.n	800229e <HAL_GPIO_Init+0x216>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4d      	ldr	r2, [pc, #308]	@ (8002398 <HAL_GPIO_Init+0x310>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_GPIO_Init+0x212>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4c      	ldr	r2, [pc, #304]	@ (800239c <HAL_GPIO_Init+0x314>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0x20e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4b      	ldr	r2, [pc, #300]	@ (80023a0 <HAL_GPIO_Init+0x318>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00d      	beq.n	8002292 <HAL_GPIO_Init+0x20a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4a      	ldr	r2, [pc, #296]	@ (80023a4 <HAL_GPIO_Init+0x31c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <HAL_GPIO_Init+0x206>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a49      	ldr	r2, [pc, #292]	@ (80023a8 <HAL_GPIO_Init+0x320>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_GPIO_Init+0x202>
 8002286:	2306      	movs	r3, #6
 8002288:	e00c      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800228a:	2307      	movs	r3, #7
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800228e:	2305      	movs	r3, #5
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 80022a2:	2300      	movs	r3, #0
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	@ (800238c <HAL_GPIO_Init+0x304>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c2:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <HAL_GPIO_Init+0x324>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e6:	4a31      	ldr	r2, [pc, #196]	@ (80023ac <HAL_GPIO_Init+0x324>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ec:	4b2f      	ldr	r3, [pc, #188]	@ (80023ac <HAL_GPIO_Init+0x324>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002310:	4a26      	ldr	r2, [pc, #152]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002316:	4b25      	ldr	r3, [pc, #148]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <HAL_GPIO_Init+0x324>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002340:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002364:	4a11      	ldr	r2, [pc, #68]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f ae96 	bls.w	80020a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	@ 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40013800 	.word	0x40013800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40021400 	.word	0x40021400
 80023a8:	40021800 	.word	0x40021800
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023cc:	e003      	b.n	80023d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	041a      	lsls	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_PWREx_EnableOverDrive+0x90>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002474 <HAL_PWREx_EnableOverDrive+0x90>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002474 <HAL_PWREx_EnableOverDrive+0x90>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800240a:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <HAL_PWREx_EnableOverDrive+0x94>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002410:	f7ff fcf8 	bl	8001e04 <HAL_GetTick>
 8002414:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002416:	e009      	b.n	800242c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002418:	f7ff fcf4 	bl	8001e04 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002426:	d901      	bls.n	800242c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e01f      	b.n	800246c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800242c:	4b13      	ldr	r3, [pc, #76]	@ (800247c <HAL_PWREx_EnableOverDrive+0x98>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002438:	d1ee      	bne.n	8002418 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002440:	f7ff fce0 	bl	8001e04 <HAL_GetTick>
 8002444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002446:	e009      	b.n	800245c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002448:	f7ff fcdc 	bl	8001e04 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002456:	d901      	bls.n	800245c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e007      	b.n	800246c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800245c:	4b07      	ldr	r3, [pc, #28]	@ (800247c <HAL_PWREx_EnableOverDrive+0x98>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002464:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002468:	d1ee      	bne.n	8002448 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	420e0040 	.word	0x420e0040
 800247c:	40007000 	.word	0x40007000
 8002480:	420e0044 	.word	0x420e0044

08002484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0cc      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b68      	ldr	r3, [pc, #416]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d90c      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b65      	ldr	r3, [pc, #404]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b63      	ldr	r3, [pc, #396]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0b8      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d8:	4b59      	ldr	r3, [pc, #356]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a58      	ldr	r2, [pc, #352]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f0:	4b53      	ldr	r3, [pc, #332]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a52      	ldr	r2, [pc, #328]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b50      	ldr	r3, [pc, #320]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	494d      	ldr	r1, [pc, #308]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d044      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b47      	ldr	r3, [pc, #284]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d119      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e07f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d003      	beq.n	8002542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253e:	2b03      	cmp	r3, #3
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b3f      	ldr	r3, [pc, #252]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e06f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b3b      	ldr	r3, [pc, #236]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e067      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b37      	ldr	r3, [pc, #220]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4934      	ldr	r1, [pc, #208]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002574:	f7ff fc46 	bl	8001e04 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7ff fc42 	bl	8001e04 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e04f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b2b      	ldr	r3, [pc, #172]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b25      	ldr	r3, [pc, #148]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d20c      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b22      	ldr	r3, [pc, #136]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b20      	ldr	r3, [pc, #128]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e032      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d8:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4916      	ldr	r1, [pc, #88]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f6:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	490e      	ldr	r1, [pc, #56]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800260a:	f000 f821 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 800260e:	4602      	mov	r2, r0
 8002610:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	490a      	ldr	r1, [pc, #40]	@ (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	4a09      	ldr	r2, [pc, #36]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002626:	4b09      	ldr	r3, [pc, #36]	@ (800264c <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fba6 	bl	8001d7c <HAL_InitTick>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023c00 	.word	0x40023c00
 8002640:	40023800 	.word	0x40023800
 8002644:	08004794 	.word	0x08004794
 8002648:	20000000 	.word	0x20000000
 800264c:	20000004 	.word	0x20000004

08002650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002654:	b0ae      	sub	sp, #184	@ 0xb8
 8002656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002676:	4bcb      	ldr	r3, [pc, #812]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b0c      	cmp	r3, #12
 8002680:	f200 8206 	bhi.w	8002a90 <HAL_RCC_GetSysClockFreq+0x440>
 8002684:	a201      	add	r2, pc, #4	@ (adr r2, 800268c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268a:	bf00      	nop
 800268c:	080026c1 	.word	0x080026c1
 8002690:	08002a91 	.word	0x08002a91
 8002694:	08002a91 	.word	0x08002a91
 8002698:	08002a91 	.word	0x08002a91
 800269c:	080026c9 	.word	0x080026c9
 80026a0:	08002a91 	.word	0x08002a91
 80026a4:	08002a91 	.word	0x08002a91
 80026a8:	08002a91 	.word	0x08002a91
 80026ac:	080026d1 	.word	0x080026d1
 80026b0:	08002a91 	.word	0x08002a91
 80026b4:	08002a91 	.word	0x08002a91
 80026b8:	08002a91 	.word	0x08002a91
 80026bc:	080028c1 	.word	0x080028c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4bb9      	ldr	r3, [pc, #740]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80026c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80026c6:	e1e7      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026c8:	4bb8      	ldr	r3, [pc, #736]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x35c>)
 80026ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026ce:	e1e3      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4bb4      	ldr	r3, [pc, #720]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026dc:	4bb1      	ldr	r3, [pc, #708]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d071      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e8:	4bae      	ldr	r3, [pc, #696]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026f4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80026f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002700:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800270a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800270e:	4622      	mov	r2, r4
 8002710:	462b      	mov	r3, r5
 8002712:	f04f 0000 	mov.w	r0, #0
 8002716:	f04f 0100 	mov.w	r1, #0
 800271a:	0159      	lsls	r1, r3, #5
 800271c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002720:	0150      	lsls	r0, r2, #5
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4621      	mov	r1, r4
 8002728:	1a51      	subs	r1, r2, r1
 800272a:	6439      	str	r1, [r7, #64]	@ 0x40
 800272c:	4629      	mov	r1, r5
 800272e:	eb63 0301 	sbc.w	r3, r3, r1
 8002732:	647b      	str	r3, [r7, #68]	@ 0x44
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002740:	4649      	mov	r1, r9
 8002742:	018b      	lsls	r3, r1, #6
 8002744:	4641      	mov	r1, r8
 8002746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800274a:	4641      	mov	r1, r8
 800274c:	018a      	lsls	r2, r1, #6
 800274e:	4641      	mov	r1, r8
 8002750:	1a51      	subs	r1, r2, r1
 8002752:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002754:	4649      	mov	r1, r9
 8002756:	eb63 0301 	sbc.w	r3, r3, r1
 800275a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002768:	4649      	mov	r1, r9
 800276a:	00cb      	lsls	r3, r1, #3
 800276c:	4641      	mov	r1, r8
 800276e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002772:	4641      	mov	r1, r8
 8002774:	00ca      	lsls	r2, r1, #3
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	4603      	mov	r3, r0
 800277c:	4622      	mov	r2, r4
 800277e:	189b      	adds	r3, r3, r2
 8002780:	633b      	str	r3, [r7, #48]	@ 0x30
 8002782:	462b      	mov	r3, r5
 8002784:	460a      	mov	r2, r1
 8002786:	eb42 0303 	adc.w	r3, r2, r3
 800278a:	637b      	str	r3, [r7, #52]	@ 0x34
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002798:	4629      	mov	r1, r5
 800279a:	024b      	lsls	r3, r1, #9
 800279c:	4621      	mov	r1, r4
 800279e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027a2:	4621      	mov	r1, r4
 80027a4:	024a      	lsls	r2, r1, #9
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027ae:	2200      	movs	r2, #0
 80027b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80027bc:	f7fe f912 	bl	80009e4 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027ca:	e067      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027cc:	4b75      	ldr	r3, [pc, #468]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027d8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80027dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027e6:	2300      	movs	r3, #0
 80027e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80027ee:	4622      	mov	r2, r4
 80027f0:	462b      	mov	r3, r5
 80027f2:	f04f 0000 	mov.w	r0, #0
 80027f6:	f04f 0100 	mov.w	r1, #0
 80027fa:	0159      	lsls	r1, r3, #5
 80027fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002800:	0150      	lsls	r0, r2, #5
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4621      	mov	r1, r4
 8002808:	1a51      	subs	r1, r2, r1
 800280a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800280c:	4629      	mov	r1, r5
 800280e:	eb63 0301 	sbc.w	r3, r3, r1
 8002812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002820:	4649      	mov	r1, r9
 8002822:	018b      	lsls	r3, r1, #6
 8002824:	4641      	mov	r1, r8
 8002826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800282a:	4641      	mov	r1, r8
 800282c:	018a      	lsls	r2, r1, #6
 800282e:	4641      	mov	r1, r8
 8002830:	ebb2 0a01 	subs.w	sl, r2, r1
 8002834:	4649      	mov	r1, r9
 8002836:	eb63 0b01 	sbc.w	fp, r3, r1
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002846:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800284a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800284e:	4692      	mov	sl, r2
 8002850:	469b      	mov	fp, r3
 8002852:	4623      	mov	r3, r4
 8002854:	eb1a 0303 	adds.w	r3, sl, r3
 8002858:	623b      	str	r3, [r7, #32]
 800285a:	462b      	mov	r3, r5
 800285c:	eb4b 0303 	adc.w	r3, fp, r3
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800286e:	4629      	mov	r1, r5
 8002870:	028b      	lsls	r3, r1, #10
 8002872:	4621      	mov	r1, r4
 8002874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002878:	4621      	mov	r1, r4
 800287a:	028a      	lsls	r2, r1, #10
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002884:	2200      	movs	r2, #0
 8002886:	673b      	str	r3, [r7, #112]	@ 0x70
 8002888:	677a      	str	r2, [r7, #116]	@ 0x74
 800288a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800288e:	f7fe f8a9 	bl	80009e4 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4613      	mov	r3, r2
 8002898:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800289c:	4b41      	ldr	r3, [pc, #260]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	3301      	adds	r3, #1
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80028ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028be:	e0eb      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c0:	4b38      	ldr	r3, [pc, #224]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028cc:	4b35      	ldr	r3, [pc, #212]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d06b      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d8:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	2200      	movs	r2, #0
 80028e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80028ec:	2300      	movs	r3, #0
 80028ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80028f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80028f4:	4622      	mov	r2, r4
 80028f6:	462b      	mov	r3, r5
 80028f8:	f04f 0000 	mov.w	r0, #0
 80028fc:	f04f 0100 	mov.w	r1, #0
 8002900:	0159      	lsls	r1, r3, #5
 8002902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002906:	0150      	lsls	r0, r2, #5
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4621      	mov	r1, r4
 800290e:	1a51      	subs	r1, r2, r1
 8002910:	61b9      	str	r1, [r7, #24]
 8002912:	4629      	mov	r1, r5
 8002914:	eb63 0301 	sbc.w	r3, r3, r1
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002926:	4659      	mov	r1, fp
 8002928:	018b      	lsls	r3, r1, #6
 800292a:	4651      	mov	r1, sl
 800292c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002930:	4651      	mov	r1, sl
 8002932:	018a      	lsls	r2, r1, #6
 8002934:	4651      	mov	r1, sl
 8002936:	ebb2 0801 	subs.w	r8, r2, r1
 800293a:	4659      	mov	r1, fp
 800293c:	eb63 0901 	sbc.w	r9, r3, r1
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800294c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002950:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002954:	4690      	mov	r8, r2
 8002956:	4699      	mov	r9, r3
 8002958:	4623      	mov	r3, r4
 800295a:	eb18 0303 	adds.w	r3, r8, r3
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	462b      	mov	r3, r5
 8002962:	eb49 0303 	adc.w	r3, r9, r3
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002974:	4629      	mov	r1, r5
 8002976:	024b      	lsls	r3, r1, #9
 8002978:	4621      	mov	r1, r4
 800297a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800297e:	4621      	mov	r1, r4
 8002980:	024a      	lsls	r2, r1, #9
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800298a:	2200      	movs	r2, #0
 800298c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800298e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002990:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002994:	f7fe f826 	bl	80009e4 <__aeabi_uldivmod>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4613      	mov	r3, r2
 800299e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029a2:	e065      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x420>
 80029a4:	40023800 	.word	0x40023800
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b0:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x458>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	2200      	movs	r2, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	4611      	mov	r1, r2
 80029bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80029c2:	2300      	movs	r3, #0
 80029c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80029c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80029ca:	4642      	mov	r2, r8
 80029cc:	464b      	mov	r3, r9
 80029ce:	f04f 0000 	mov.w	r0, #0
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	0159      	lsls	r1, r3, #5
 80029d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029dc:	0150      	lsls	r0, r2, #5
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4641      	mov	r1, r8
 80029e4:	1a51      	subs	r1, r2, r1
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	4649      	mov	r1, r9
 80029ea:	eb63 0301 	sbc.w	r3, r3, r1
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80029fc:	4659      	mov	r1, fp
 80029fe:	018b      	lsls	r3, r1, #6
 8002a00:	4651      	mov	r1, sl
 8002a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a06:	4651      	mov	r1, sl
 8002a08:	018a      	lsls	r2, r1, #6
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	1a54      	subs	r4, r2, r1
 8002a0e:	4659      	mov	r1, fp
 8002a10:	eb63 0501 	sbc.w	r5, r3, r1
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	00eb      	lsls	r3, r5, #3
 8002a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a22:	00e2      	lsls	r2, r4, #3
 8002a24:	4614      	mov	r4, r2
 8002a26:	461d      	mov	r5, r3
 8002a28:	4643      	mov	r3, r8
 8002a2a:	18e3      	adds	r3, r4, r3
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	464b      	mov	r3, r9
 8002a30:	eb45 0303 	adc.w	r3, r5, r3
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a42:	4629      	mov	r1, r5
 8002a44:	028b      	lsls	r3, r1, #10
 8002a46:	4621      	mov	r1, r4
 8002a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	028a      	lsls	r2, r1, #10
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a58:	2200      	movs	r2, #0
 8002a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a5c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002a5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a62:	f7fd ffbf 	bl	80009e4 <__aeabi_uldivmod>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a70:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0f1b      	lsrs	r3, r3, #28
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a8e:	e003      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	37b8      	adds	r7, #184	@ 0xb8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	00f42400 	.word	0x00f42400

08002ab0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e28d      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8083 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ad0:	4b94      	ldr	r3, [pc, #592]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d019      	beq.n	8002b10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002adc:	4b91      	ldr	r3, [pc, #580]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af4:	d00c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af6:	4b8b      	ldr	r3, [pc, #556]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d112      	bne.n	8002b28 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b88      	ldr	r3, [pc, #544]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b0e:	d10b      	bne.n	8002b28 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	4b84      	ldr	r3, [pc, #528]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d05b      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x124>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d157      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e25a      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b30:	d106      	bne.n	8002b40 <HAL_RCC_OscConfig+0x90>
 8002b32:	4b7c      	ldr	r3, [pc, #496]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a7b      	ldr	r2, [pc, #492]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e01d      	b.n	8002b7c <HAL_RCC_OscConfig+0xcc>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0xb4>
 8002b4a:	4b76      	ldr	r3, [pc, #472]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a75      	ldr	r2, [pc, #468]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b73      	ldr	r3, [pc, #460]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a72      	ldr	r2, [pc, #456]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0xcc>
 8002b64:	4b6f      	ldr	r3, [pc, #444]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6e      	ldr	r2, [pc, #440]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b6c      	ldr	r3, [pc, #432]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a6b      	ldr	r2, [pc, #428]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7ff f93e 	bl	8001e04 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7ff f93a 	bl	8001e04 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	@ 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e21f      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b61      	ldr	r3, [pc, #388]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0xdc>
 8002baa:	e014      	b.n	8002bd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7ff f92a 	bl	8001e04 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7ff f926 	bl	8001e04 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	@ 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e20b      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	4b57      	ldr	r3, [pc, #348]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x104>
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d06f      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002be2:	4b50      	ldr	r3, [pc, #320]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d017      	beq.n	8002c1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bee:	4b4d      	ldr	r3, [pc, #308]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b47      	ldr	r3, [pc, #284]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d11c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c12:	4b44      	ldr	r3, [pc, #272]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d116      	bne.n	8002c4c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	4b41      	ldr	r3, [pc, #260]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_RCC_OscConfig+0x186>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e1d3      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c36:	4b3b      	ldr	r3, [pc, #236]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4937      	ldr	r1, [pc, #220]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	e03a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c54:	4b34      	ldr	r3, [pc, #208]	@ (8002d28 <HAL_RCC_OscConfig+0x278>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7ff f8d3 	bl	8001e04 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c62:	f7ff f8cf 	bl	8001e04 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1b4      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	4b2b      	ldr	r3, [pc, #172]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c80:	4b28      	ldr	r3, [pc, #160]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4925      	ldr	r1, [pc, #148]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
 8002c94:	e015      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b24      	ldr	r3, [pc, #144]	@ (8002d28 <HAL_RCC_OscConfig+0x278>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7ff f8b2 	bl	8001e04 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca4:	f7ff f8ae 	bl	8001e04 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e193      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d036      	beq.n	8002d3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7ff f892 	bl	8001e04 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7ff f88e 	bl	8001e04 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e173      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x234>
 8002d02:	e01b      	b.n	8002d3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <HAL_RCC_OscConfig+0x27c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7ff f87b 	bl	8001e04 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	e00e      	b.n	8002d30 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d12:	f7ff f877 	bl	8001e04 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d907      	bls.n	8002d30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e15c      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
 8002d24:	40023800 	.word	0x40023800
 8002d28:	42470000 	.word	0x42470000
 8002d2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	4b8a      	ldr	r3, [pc, #552]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1ea      	bne.n	8002d12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8097 	beq.w	8002e78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4e:	4b83      	ldr	r3, [pc, #524]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	4a7e      	ldr	r2, [pc, #504]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7a:	4b79      	ldr	r3, [pc, #484]	@ (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d118      	bne.n	8002db8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d86:	4b76      	ldr	r3, [pc, #472]	@ (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a75      	ldr	r2, [pc, #468]	@ (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d92:	f7ff f837 	bl	8001e04 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9a:	f7ff f833 	bl	8001e04 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e118      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	4b6c      	ldr	r3, [pc, #432]	@ (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_OscConfig+0x31e>
 8002dc0:	4b66      	ldr	r3, [pc, #408]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	4a65      	ldr	r2, [pc, #404]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dcc:	e01c      	b.n	8002e08 <HAL_RCC_OscConfig+0x358>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b05      	cmp	r3, #5
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x340>
 8002dd6:	4b61      	ldr	r3, [pc, #388]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dda:	4a60      	ldr	r2, [pc, #384]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de2:	4b5e      	ldr	r3, [pc, #376]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de6:	4a5d      	ldr	r2, [pc, #372]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0x358>
 8002df0:	4b5a      	ldr	r3, [pc, #360]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df4:	4a59      	ldr	r2, [pc, #356]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dfc:	4b57      	ldr	r3, [pc, #348]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e00:	4a56      	ldr	r2, [pc, #344]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e02:	f023 0304 	bic.w	r3, r3, #4
 8002e06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d015      	beq.n	8002e3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe fff8 	bl	8001e04 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e18:	f7fe fff4 	bl	8001e04 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e0d7      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0ee      	beq.n	8002e18 <HAL_RCC_OscConfig+0x368>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe ffe2 	bl	8001e04 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fe ffde 	bl	8001e04 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0c1      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5a:	4b40      	ldr	r3, [pc, #256]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1ee      	bne.n	8002e44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	4a3a      	ldr	r2, [pc, #232]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80ad 	beq.w	8002fdc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e82:	4b36      	ldr	r3, [pc, #216]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d060      	beq.n	8002f50 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d145      	bne.n	8002f22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	4b33      	ldr	r3, [pc, #204]	@ (8002f64 <HAL_RCC_OscConfig+0x4b4>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe ffb2 	bl	8001e04 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe ffae 	bl	8001e04 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e093      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	4b29      	ldr	r3, [pc, #164]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	019b      	lsls	r3, r3, #6
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eec:	071b      	lsls	r3, r3, #28
 8002eee:	491b      	ldr	r1, [pc, #108]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f64 <HAL_RCC_OscConfig+0x4b4>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fe ff83 	bl	8001e04 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fe ff7f 	bl	8001e04 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e064      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f14:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x452>
 8002f20:	e05c      	b.n	8002fdc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b10      	ldr	r3, [pc, #64]	@ (8002f64 <HAL_RCC_OscConfig+0x4b4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe ff6c 	bl	8001e04 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe ff68 	bl	8001e04 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e04d      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x480>
 8002f4e:	e045      	b.n	8002fdc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d107      	bne.n	8002f68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e040      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000
 8002f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f68:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe8 <HAL_RCC_OscConfig+0x538>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d030      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d129      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d122      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f98:	4013      	ands	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d119      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d10f      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e041      	b.n	8003082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe fd04 	bl	8001a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 fe52 	bl	8003cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e041      	b.n	8003120 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f839 	bl	8003128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f000 fe03 	bl	8003cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_TIM_PWM_Start+0x24>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e022      	b.n	80031a6 <HAL_TIM_PWM_Start+0x6a>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b04      	cmp	r3, #4
 8003164:	d109      	bne.n	800317a <HAL_TIM_PWM_Start+0x3e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e015      	b.n	80031a6 <HAL_TIM_PWM_Start+0x6a>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d109      	bne.n	8003194 <HAL_TIM_PWM_Start+0x58>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e008      	b.n	80031a6 <HAL_TIM_PWM_Start+0x6a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e07c      	b.n	80032a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_TIM_PWM_Start+0x82>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031bc:	e013      	b.n	80031e6 <HAL_TIM_PWM_Start+0xaa>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_PWM_Start+0x92>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031cc:	e00b      	b.n	80031e6 <HAL_TIM_PWM_Start+0xaa>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d104      	bne.n	80031de <HAL_TIM_PWM_Start+0xa2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031dc:	e003      	b.n	80031e6 <HAL_TIM_PWM_Start+0xaa>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2201      	movs	r2, #1
 80031ec:	6839      	ldr	r1, [r7, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 f990 	bl	8004514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a2d      	ldr	r2, [pc, #180]	@ (80032b0 <HAL_TIM_PWM_Start+0x174>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d004      	beq.n	8003208 <HAL_TIM_PWM_Start+0xcc>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2c      	ldr	r2, [pc, #176]	@ (80032b4 <HAL_TIM_PWM_Start+0x178>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_TIM_PWM_Start+0xd0>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_TIM_PWM_Start+0xd2>
 800320c:	2300      	movs	r3, #0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003220:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a22      	ldr	r2, [pc, #136]	@ (80032b0 <HAL_TIM_PWM_Start+0x174>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d022      	beq.n	8003272 <HAL_TIM_PWM_Start+0x136>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003234:	d01d      	beq.n	8003272 <HAL_TIM_PWM_Start+0x136>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1f      	ldr	r2, [pc, #124]	@ (80032b8 <HAL_TIM_PWM_Start+0x17c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d018      	beq.n	8003272 <HAL_TIM_PWM_Start+0x136>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1d      	ldr	r2, [pc, #116]	@ (80032bc <HAL_TIM_PWM_Start+0x180>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_TIM_PWM_Start+0x136>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1c      	ldr	r2, [pc, #112]	@ (80032c0 <HAL_TIM_PWM_Start+0x184>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_TIM_PWM_Start+0x136>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a16      	ldr	r2, [pc, #88]	@ (80032b4 <HAL_TIM_PWM_Start+0x178>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d009      	beq.n	8003272 <HAL_TIM_PWM_Start+0x136>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a18      	ldr	r2, [pc, #96]	@ (80032c4 <HAL_TIM_PWM_Start+0x188>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_TIM_PWM_Start+0x136>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a16      	ldr	r2, [pc, #88]	@ (80032c8 <HAL_TIM_PWM_Start+0x18c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d111      	bne.n	8003296 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b06      	cmp	r3, #6
 8003282:	d010      	beq.n	80032a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	e007      	b.n	80032a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40010000 	.word	0x40010000
 80032b4:	40010400 	.word	0x40010400
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40000c00 	.word	0x40000c00
 80032c4:	40014000 	.word	0x40014000
 80032c8:	40001800 	.word	0x40001800

080032cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e041      	b.n	8003362 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f839 	bl	800336a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f000 fce2 	bl	8003cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <HAL_TIM_IC_Start_IT+0x1e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800339a:	b2db      	uxtb	r3, r3
 800339c:	e013      	b.n	80033c6 <HAL_TIM_IC_Start_IT+0x46>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_IC_Start_IT+0x2e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	e00b      	b.n	80033c6 <HAL_TIM_IC_Start_IT+0x46>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d104      	bne.n	80033be <HAL_TIM_IC_Start_IT+0x3e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	e003      	b.n	80033c6 <HAL_TIM_IC_Start_IT+0x46>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <HAL_TIM_IC_Start_IT+0x58>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e013      	b.n	8003400 <HAL_TIM_IC_Start_IT+0x80>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d104      	bne.n	80033e8 <HAL_TIM_IC_Start_IT+0x68>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e00b      	b.n	8003400 <HAL_TIM_IC_Start_IT+0x80>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d104      	bne.n	80033f8 <HAL_TIM_IC_Start_IT+0x78>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e003      	b.n	8003400 <HAL_TIM_IC_Start_IT+0x80>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003402:	7bbb      	ldrb	r3, [r7, #14]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d102      	bne.n	800340e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003408:	7b7b      	ldrb	r3, [r7, #13]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d001      	beq.n	8003412 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0cc      	b.n	80035ac <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <HAL_TIM_IC_Start_IT+0xa2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003420:	e013      	b.n	800344a <HAL_TIM_IC_Start_IT+0xca>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d104      	bne.n	8003432 <HAL_TIM_IC_Start_IT+0xb2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003430:	e00b      	b.n	800344a <HAL_TIM_IC_Start_IT+0xca>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d104      	bne.n	8003442 <HAL_TIM_IC_Start_IT+0xc2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003440:	e003      	b.n	800344a <HAL_TIM_IC_Start_IT+0xca>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <HAL_TIM_IC_Start_IT+0xda>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003458:	e013      	b.n	8003482 <HAL_TIM_IC_Start_IT+0x102>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d104      	bne.n	800346a <HAL_TIM_IC_Start_IT+0xea>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003468:	e00b      	b.n	8003482 <HAL_TIM_IC_Start_IT+0x102>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d104      	bne.n	800347a <HAL_TIM_IC_Start_IT+0xfa>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003478:	e003      	b.n	8003482 <HAL_TIM_IC_Start_IT+0x102>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d841      	bhi.n	800350c <HAL_TIM_IC_Start_IT+0x18c>
 8003488:	a201      	add	r2, pc, #4	@ (adr r2, 8003490 <HAL_TIM_IC_Start_IT+0x110>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034c5 	.word	0x080034c5
 8003494:	0800350d 	.word	0x0800350d
 8003498:	0800350d 	.word	0x0800350d
 800349c:	0800350d 	.word	0x0800350d
 80034a0:	080034d7 	.word	0x080034d7
 80034a4:	0800350d 	.word	0x0800350d
 80034a8:	0800350d 	.word	0x0800350d
 80034ac:	0800350d 	.word	0x0800350d
 80034b0:	080034e9 	.word	0x080034e9
 80034b4:	0800350d 	.word	0x0800350d
 80034b8:	0800350d 	.word	0x0800350d
 80034bc:	0800350d 	.word	0x0800350d
 80034c0:	080034fb 	.word	0x080034fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0202 	orr.w	r2, r2, #2
 80034d2:	60da      	str	r2, [r3, #12]
      break;
 80034d4:	e01d      	b.n	8003512 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0204 	orr.w	r2, r2, #4
 80034e4:	60da      	str	r2, [r3, #12]
      break;
 80034e6:	e014      	b.n	8003512 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0208 	orr.w	r2, r2, #8
 80034f6:	60da      	str	r2, [r3, #12]
      break;
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0210 	orr.w	r2, r2, #16
 8003508:	60da      	str	r2, [r3, #12]
      break;
 800350a:	e002      	b.n	8003512 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      break;
 8003510:	bf00      	nop
  }

  if (status == HAL_OK)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d148      	bne.n	80035aa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2201      	movs	r2, #1
 800351e:	6839      	ldr	r1, [r7, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fff7 	bl	8004514 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a22      	ldr	r2, [pc, #136]	@ (80035b4 <HAL_TIM_IC_Start_IT+0x234>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d022      	beq.n	8003576 <HAL_TIM_IC_Start_IT+0x1f6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003538:	d01d      	beq.n	8003576 <HAL_TIM_IC_Start_IT+0x1f6>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1e      	ldr	r2, [pc, #120]	@ (80035b8 <HAL_TIM_IC_Start_IT+0x238>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d018      	beq.n	8003576 <HAL_TIM_IC_Start_IT+0x1f6>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1c      	ldr	r2, [pc, #112]	@ (80035bc <HAL_TIM_IC_Start_IT+0x23c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_TIM_IC_Start_IT+0x1f6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1b      	ldr	r2, [pc, #108]	@ (80035c0 <HAL_TIM_IC_Start_IT+0x240>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00e      	beq.n	8003576 <HAL_TIM_IC_Start_IT+0x1f6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a19      	ldr	r2, [pc, #100]	@ (80035c4 <HAL_TIM_IC_Start_IT+0x244>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d009      	beq.n	8003576 <HAL_TIM_IC_Start_IT+0x1f6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a18      	ldr	r2, [pc, #96]	@ (80035c8 <HAL_TIM_IC_Start_IT+0x248>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_TIM_IC_Start_IT+0x1f6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a16      	ldr	r2, [pc, #88]	@ (80035cc <HAL_TIM_IC_Start_IT+0x24c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d111      	bne.n	800359a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b06      	cmp	r3, #6
 8003586:	d010      	beq.n	80035aa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003598:	e007      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40000800 	.word	0x40000800
 80035c0:	40000c00 	.word	0x40000c00
 80035c4:	40010400 	.word	0x40010400
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40001800 	.word	0x40001800

080035d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d020      	beq.n	8003634 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0202 	mvn.w	r2, #2
 8003604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fdd8 	bl	80011d0 <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fb38 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fb3f 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d020      	beq.n	8003680 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0204 	mvn.w	r2, #4
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fdb2 	bl	80011d0 <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fb12 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fb19 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d020      	beq.n	80036cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01b      	beq.n	80036cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0208 	mvn.w	r2, #8
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2204      	movs	r2, #4
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fd8c 	bl	80011d0 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 faec 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 faf3 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d020      	beq.n	8003718 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01b      	beq.n	8003718 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0210 	mvn.w	r2, #16
 80036e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2208      	movs	r2, #8
 80036ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd fd66 	bl	80011d0 <HAL_TIM_IC_CaptureCallback>
 8003704:	e005      	b.n	8003712 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fac6 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 facd 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0201 	mvn.w	r2, #1
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 faa4 	bl	8003c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 ffd8 	bl	8004710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa9e 	bl	8003cc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00c      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0220 	mvn.w	r2, #32
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 ffaa 	bl	80046fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e088      	b.n	80038e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d11b      	bne.n	8003814 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80037ec:	f000 fcce 	bl	800418c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 020c 	bic.w	r2, r2, #12
 80037fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6999      	ldr	r1, [r3, #24]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	619a      	str	r2, [r3, #24]
 8003812:	e060      	b.n	80038d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b04      	cmp	r3, #4
 8003818:	d11c      	bne.n	8003854 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800382a:	f000 fd52 	bl	80042d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800383c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6999      	ldr	r1, [r3, #24]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	021a      	lsls	r2, r3, #8
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	619a      	str	r2, [r3, #24]
 8003852:	e040      	b.n	80038d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11b      	bne.n	8003892 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800386a:	f000 fd9f 	bl	80043ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 020c 	bic.w	r2, r2, #12
 800387c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69d9      	ldr	r1, [r3, #28]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	61da      	str	r2, [r3, #28]
 8003890:	e021      	b.n	80038d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d11c      	bne.n	80038d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80038a8:	f000 fdbc 	bl	8004424 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80038ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69d9      	ldr	r1, [r3, #28]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	021a      	lsls	r2, r3, #8
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	61da      	str	r2, [r3, #28]
 80038d0:	e001      	b.n	80038d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038de:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003902:	2302      	movs	r3, #2
 8003904:	e0ae      	b.n	8003a64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b0c      	cmp	r3, #12
 8003912:	f200 809f 	bhi.w	8003a54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003916:	a201      	add	r2, pc, #4	@ (adr r2, 800391c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	08003951 	.word	0x08003951
 8003920:	08003a55 	.word	0x08003a55
 8003924:	08003a55 	.word	0x08003a55
 8003928:	08003a55 	.word	0x08003a55
 800392c:	08003991 	.word	0x08003991
 8003930:	08003a55 	.word	0x08003a55
 8003934:	08003a55 	.word	0x08003a55
 8003938:	08003a55 	.word	0x08003a55
 800393c:	080039d3 	.word	0x080039d3
 8003940:	08003a55 	.word	0x08003a55
 8003944:	08003a55 	.word	0x08003a55
 8003948:	08003a55 	.word	0x08003a55
 800394c:	08003a13 	.word	0x08003a13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fa68 	bl	8003e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0208 	orr.w	r2, r2, #8
 800396a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0204 	bic.w	r2, r2, #4
 800397a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6999      	ldr	r1, [r3, #24]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	619a      	str	r2, [r3, #24]
      break;
 800398e:	e064      	b.n	8003a5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fab8 	bl	8003f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6999      	ldr	r1, [r3, #24]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	021a      	lsls	r2, r3, #8
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	619a      	str	r2, [r3, #24]
      break;
 80039d0:	e043      	b.n	8003a5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fb0d 	bl	8003ff8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0208 	orr.w	r2, r2, #8
 80039ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0204 	bic.w	r2, r2, #4
 80039fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69d9      	ldr	r1, [r3, #28]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	61da      	str	r2, [r3, #28]
      break;
 8003a10:	e023      	b.n	8003a5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fb61 	bl	80040e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69d9      	ldr	r1, [r3, #28]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	021a      	lsls	r2, r3, #8
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	61da      	str	r2, [r3, #28]
      break;
 8003a52:	e002      	b.n	8003a5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
      break;
 8003a58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_TIM_ConfigClockSource+0x1c>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e0b4      	b.n	8003bf2 <HAL_TIM_ConfigClockSource+0x186>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac0:	d03e      	beq.n	8003b40 <HAL_TIM_ConfigClockSource+0xd4>
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac6:	f200 8087 	bhi.w	8003bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ace:	f000 8086 	beq.w	8003bde <HAL_TIM_ConfigClockSource+0x172>
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad6:	d87f      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b70      	cmp	r3, #112	@ 0x70
 8003ada:	d01a      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0xa6>
 8003adc:	2b70      	cmp	r3, #112	@ 0x70
 8003ade:	d87b      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b60      	cmp	r3, #96	@ 0x60
 8003ae2:	d050      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x11a>
 8003ae4:	2b60      	cmp	r3, #96	@ 0x60
 8003ae6:	d877      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b50      	cmp	r3, #80	@ 0x50
 8003aea:	d03c      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0xfa>
 8003aec:	2b50      	cmp	r3, #80	@ 0x50
 8003aee:	d873      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b40      	cmp	r3, #64	@ 0x40
 8003af2:	d058      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x13a>
 8003af4:	2b40      	cmp	r3, #64	@ 0x40
 8003af6:	d86f      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b30      	cmp	r3, #48	@ 0x30
 8003afa:	d064      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003afc:	2b30      	cmp	r3, #48	@ 0x30
 8003afe:	d86b      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d060      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d867      	bhi.n	8003bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d05c      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d05a      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b10:	e062      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b22:	f000 fcd7 	bl	80044d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	609a      	str	r2, [r3, #8]
      break;
 8003b3e:	e04f      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b50:	f000 fcc0 	bl	80044d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b62:	609a      	str	r2, [r3, #8]
      break;
 8003b64:	e03c      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b72:	461a      	mov	r2, r3
 8003b74:	f000 fb7e 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2150      	movs	r1, #80	@ 0x50
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fc8d 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003b84:	e02c      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b92:	461a      	mov	r2, r3
 8003b94:	f000 fbda 	bl	800434c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2160      	movs	r1, #96	@ 0x60
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fc7d 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003ba4:	e01c      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f000 fb5e 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2140      	movs	r1, #64	@ 0x40
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fc6d 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003bc4:	e00c      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	f000 fc64 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003bd6:	e003      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      break;
 8003bdc:	e000      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b0c      	cmp	r3, #12
 8003c0e:	d831      	bhi.n	8003c74 <HAL_TIM_ReadCapturedValue+0x78>
 8003c10:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c4d 	.word	0x08003c4d
 8003c1c:	08003c75 	.word	0x08003c75
 8003c20:	08003c75 	.word	0x08003c75
 8003c24:	08003c75 	.word	0x08003c75
 8003c28:	08003c57 	.word	0x08003c57
 8003c2c:	08003c75 	.word	0x08003c75
 8003c30:	08003c75 	.word	0x08003c75
 8003c34:	08003c75 	.word	0x08003c75
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c75 	.word	0x08003c75
 8003c40:	08003c75 	.word	0x08003c75
 8003c44:	08003c75 	.word	0x08003c75
 8003c48:	08003c6b 	.word	0x08003c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c52:	60fb      	str	r3, [r7, #12]

      break;
 8003c54:	e00f      	b.n	8003c76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5c:	60fb      	str	r3, [r7, #12]

      break;
 8003c5e:	e00a      	b.n	8003c76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c66:	60fb      	str	r3, [r7, #12]

      break;
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	60fb      	str	r3, [r7, #12]

      break;
 8003c72:	e000      	b.n	8003c76 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c74:	bf00      	nop
  }

  return tmpreg;
 8003c76:	68fb      	ldr	r3, [r7, #12]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a46      	ldr	r2, [pc, #280]	@ (8003e00 <TIM_Base_SetConfig+0x12c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d013      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf2:	d00f      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a43      	ldr	r2, [pc, #268]	@ (8003e04 <TIM_Base_SetConfig+0x130>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00b      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a42      	ldr	r2, [pc, #264]	@ (8003e08 <TIM_Base_SetConfig+0x134>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d007      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a41      	ldr	r2, [pc, #260]	@ (8003e0c <TIM_Base_SetConfig+0x138>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a40      	ldr	r2, [pc, #256]	@ (8003e10 <TIM_Base_SetConfig+0x13c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d108      	bne.n	8003d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a35      	ldr	r2, [pc, #212]	@ (8003e00 <TIM_Base_SetConfig+0x12c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d02b      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d34:	d027      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a32      	ldr	r2, [pc, #200]	@ (8003e04 <TIM_Base_SetConfig+0x130>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d023      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a31      	ldr	r2, [pc, #196]	@ (8003e08 <TIM_Base_SetConfig+0x134>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01f      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a30      	ldr	r2, [pc, #192]	@ (8003e0c <TIM_Base_SetConfig+0x138>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01b      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2f      	ldr	r2, [pc, #188]	@ (8003e10 <TIM_Base_SetConfig+0x13c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d017      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2e      	ldr	r2, [pc, #184]	@ (8003e14 <TIM_Base_SetConfig+0x140>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2d      	ldr	r2, [pc, #180]	@ (8003e18 <TIM_Base_SetConfig+0x144>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00f      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2c      	ldr	r2, [pc, #176]	@ (8003e1c <TIM_Base_SetConfig+0x148>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00b      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	@ (8003e20 <TIM_Base_SetConfig+0x14c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2a      	ldr	r2, [pc, #168]	@ (8003e24 <TIM_Base_SetConfig+0x150>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a29      	ldr	r2, [pc, #164]	@ (8003e28 <TIM_Base_SetConfig+0x154>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d108      	bne.n	8003d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a10      	ldr	r2, [pc, #64]	@ (8003e00 <TIM_Base_SetConfig+0x12c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_Base_SetConfig+0xf8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a12      	ldr	r2, [pc, #72]	@ (8003e10 <TIM_Base_SetConfig+0x13c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d103      	bne.n	8003dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d105      	bne.n	8003df2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f023 0201 	bic.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]
  }
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40000c00 	.word	0x40000c00
 8003e10:	40010400 	.word	0x40010400
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800
 8003e20:	40001800 	.word	0x40001800
 8003e24:	40001c00 	.word	0x40001c00
 8003e28:	40002000 	.word	0x40002000

08003e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f023 0201 	bic.w	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f023 0302 	bic.w	r3, r3, #2
 8003e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a20      	ldr	r2, [pc, #128]	@ (8003f04 <TIM_OC1_SetConfig+0xd8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_OC1_SetConfig+0x64>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f08 <TIM_OC1_SetConfig+0xdc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10c      	bne.n	8003eaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0308 	bic.w	r3, r3, #8
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a15      	ldr	r2, [pc, #84]	@ (8003f04 <TIM_OC1_SetConfig+0xd8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_OC1_SetConfig+0x8e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a14      	ldr	r2, [pc, #80]	@ (8003f08 <TIM_OC1_SetConfig+0xdc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d111      	bne.n	8003ede <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	621a      	str	r2, [r3, #32]
}
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40010000 	.word	0x40010000
 8003f08:	40010400 	.word	0x40010400

08003f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f023 0210 	bic.w	r2, r3, #16
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0320 	bic.w	r3, r3, #32
 8003f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a22      	ldr	r2, [pc, #136]	@ (8003ff0 <TIM_OC2_SetConfig+0xe4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_OC2_SetConfig+0x68>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a21      	ldr	r2, [pc, #132]	@ (8003ff4 <TIM_OC2_SetConfig+0xe8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10d      	bne.n	8003f90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a17      	ldr	r2, [pc, #92]	@ (8003ff0 <TIM_OC2_SetConfig+0xe4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_OC2_SetConfig+0x94>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a16      	ldr	r2, [pc, #88]	@ (8003ff4 <TIM_OC2_SetConfig+0xe8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d113      	bne.n	8003fc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0303 	bic.w	r3, r3, #3
 800402e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a21      	ldr	r2, [pc, #132]	@ (80040d8 <TIM_OC3_SetConfig+0xe0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d003      	beq.n	800405e <TIM_OC3_SetConfig+0x66>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a20      	ldr	r2, [pc, #128]	@ (80040dc <TIM_OC3_SetConfig+0xe4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10d      	bne.n	800407a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a16      	ldr	r2, [pc, #88]	@ (80040d8 <TIM_OC3_SetConfig+0xe0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_OC3_SetConfig+0x92>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a15      	ldr	r2, [pc, #84]	@ (80040dc <TIM_OC3_SetConfig+0xe4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d113      	bne.n	80040b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	621a      	str	r2, [r3, #32]
}
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40010400 	.word	0x40010400

080040e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800412a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	031b      	lsls	r3, r3, #12
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a12      	ldr	r2, [pc, #72]	@ (8004184 <TIM_OC4_SetConfig+0xa4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_OC4_SetConfig+0x68>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a11      	ldr	r2, [pc, #68]	@ (8004188 <TIM_OC4_SetConfig+0xa8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d109      	bne.n	800415c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800414e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	019b      	lsls	r3, r3, #6
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	621a      	str	r2, [r3, #32]
}
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40010400 	.word	0x40010400

0800418c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f023 0201 	bic.w	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4a28      	ldr	r2, [pc, #160]	@ (8004258 <TIM_TI1_SetConfig+0xcc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d01b      	beq.n	80041f2 <TIM_TI1_SetConfig+0x66>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c0:	d017      	beq.n	80041f2 <TIM_TI1_SetConfig+0x66>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a25      	ldr	r2, [pc, #148]	@ (800425c <TIM_TI1_SetConfig+0xd0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <TIM_TI1_SetConfig+0x66>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4a24      	ldr	r2, [pc, #144]	@ (8004260 <TIM_TI1_SetConfig+0xd4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00f      	beq.n	80041f2 <TIM_TI1_SetConfig+0x66>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4a23      	ldr	r2, [pc, #140]	@ (8004264 <TIM_TI1_SetConfig+0xd8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_TI1_SetConfig+0x66>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4a22      	ldr	r2, [pc, #136]	@ (8004268 <TIM_TI1_SetConfig+0xdc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <TIM_TI1_SetConfig+0x66>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a21      	ldr	r2, [pc, #132]	@ (800426c <TIM_TI1_SetConfig+0xe0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_TI1_SetConfig+0x66>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a20      	ldr	r2, [pc, #128]	@ (8004270 <TIM_TI1_SetConfig+0xe4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <TIM_TI1_SetConfig+0x6a>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <TIM_TI1_SetConfig+0x6c>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e003      	b.n	8004216 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800421c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	b2db      	uxtb	r3, r3
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f023 030a 	bic.w	r3, r3, #10
 8004230:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 030a 	and.w	r3, r3, #10
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40010400 	.word	0x40010400
 800426c:	40014000 	.word	0x40014000
 8004270:	40001800 	.word	0x40001800

08004274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800429e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 030a 	bic.w	r3, r3, #10
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b087      	sub	sp, #28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f023 0210 	bic.w	r2, r3, #16
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	031b      	lsls	r3, r3, #12
 8004316:	b29b      	uxth	r3, r3
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004324:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	621a      	str	r2, [r3, #32]
}
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0210 	bic.w	r2, r3, #16
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	031b      	lsls	r3, r3, #12
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004388:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	621a      	str	r2, [r3, #32]
}
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f023 0303 	bic.w	r3, r3, #3
 80043d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80043fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	621a      	str	r2, [r3, #32]
}
 8004418:	bf00      	nop
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004450:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004462:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	031b      	lsls	r3, r3, #12
 8004468:	b29b      	uxth	r3, r3
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004476:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	031b      	lsls	r3, r3, #12
 800447c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f043 0307 	orr.w	r3, r3, #7
 80044c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	609a      	str	r2, [r3, #8]
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	021a      	lsls	r2, r3, #8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	609a      	str	r2, [r3, #8]
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	2201      	movs	r2, #1
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1a      	ldr	r2, [r3, #32]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	43db      	mvns	r3, r3
 8004536:	401a      	ands	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1a      	ldr	r2, [r3, #32]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	fa01 f303 	lsl.w	r3, r1, r3
 800454c:	431a      	orrs	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004574:	2302      	movs	r3, #2
 8004576:	e05a      	b.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a21      	ldr	r2, [pc, #132]	@ (800463c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c4:	d01d      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1a      	ldr	r2, [pc, #104]	@ (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a18      	ldr	r2, [pc, #96]	@ (800464c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a15      	ldr	r2, [pc, #84]	@ (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10c      	bne.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	4313      	orrs	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40010400 	.word	0x40010400
 8004650:	40014000 	.word	0x40014000
 8004654:	40001800 	.word	0x40001800

08004658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004670:	2302      	movs	r3, #2
 8004672:	e03d      	b.n	80046f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <memset>:
 8004724:	4402      	add	r2, r0
 8004726:	4603      	mov	r3, r0
 8004728:	4293      	cmp	r3, r2
 800472a:	d100      	bne.n	800472e <memset+0xa>
 800472c:	4770      	bx	lr
 800472e:	f803 1b01 	strb.w	r1, [r3], #1
 8004732:	e7f9      	b.n	8004728 <memset+0x4>

08004734 <__libc_init_array>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	4d0d      	ldr	r5, [pc, #52]	@ (800476c <__libc_init_array+0x38>)
 8004738:	4c0d      	ldr	r4, [pc, #52]	@ (8004770 <__libc_init_array+0x3c>)
 800473a:	1b64      	subs	r4, r4, r5
 800473c:	10a4      	asrs	r4, r4, #2
 800473e:	2600      	movs	r6, #0
 8004740:	42a6      	cmp	r6, r4
 8004742:	d109      	bne.n	8004758 <__libc_init_array+0x24>
 8004744:	4d0b      	ldr	r5, [pc, #44]	@ (8004774 <__libc_init_array+0x40>)
 8004746:	4c0c      	ldr	r4, [pc, #48]	@ (8004778 <__libc_init_array+0x44>)
 8004748:	f000 f818 	bl	800477c <_init>
 800474c:	1b64      	subs	r4, r4, r5
 800474e:	10a4      	asrs	r4, r4, #2
 8004750:	2600      	movs	r6, #0
 8004752:	42a6      	cmp	r6, r4
 8004754:	d105      	bne.n	8004762 <__libc_init_array+0x2e>
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	f855 3b04 	ldr.w	r3, [r5], #4
 800475c:	4798      	blx	r3
 800475e:	3601      	adds	r6, #1
 8004760:	e7ee      	b.n	8004740 <__libc_init_array+0xc>
 8004762:	f855 3b04 	ldr.w	r3, [r5], #4
 8004766:	4798      	blx	r3
 8004768:	3601      	adds	r6, #1
 800476a:	e7f2      	b.n	8004752 <__libc_init_array+0x1e>
 800476c:	080047ac 	.word	0x080047ac
 8004770:	080047ac 	.word	0x080047ac
 8004774:	080047ac 	.word	0x080047ac
 8004778:	080047b0 	.word	0x080047b0

0800477c <_init>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	bf00      	nop
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr

08004788 <_fini>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	bf00      	nop
 800478c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478e:	bc08      	pop	{r3}
 8004790:	469e      	mov	lr, r3
 8004792:	4770      	bx	lr
