
Test_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007460  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007630  08007630  00008630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007690  08007690  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007690  08007690  00008690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007698  08007698  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007698  08007698  00008698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800769c  0800769c  0000869c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080076a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ce8  20000060  08007700  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d48  08007700  00009d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a3f  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003990  00000000  00000000  00020acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00024460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efe  00000000  00000000  000257f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023428  00000000  00000000  000266f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001819b  00000000  00000000  00049b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8e12  00000000  00000000  00061cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013aacb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005404  00000000  00000000  0013ab10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0013ff14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007618 	.word	0x08007618

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007618 	.word	0x08007618

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <__aeabi_uldivmod>:
 80009ec:	b953      	cbnz	r3, 8000a04 <__aeabi_uldivmod+0x18>
 80009ee:	b94a      	cbnz	r2, 8000a04 <__aeabi_uldivmod+0x18>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bf08      	it	eq
 80009f4:	2800      	cmpeq	r0, #0
 80009f6:	bf1c      	itt	ne
 80009f8:	f04f 31ff 	movne.w	r1, #4294967295
 80009fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000a00:	f000 b96a 	b.w	8000cd8 <__aeabi_idiv0>
 8000a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a0c:	f000 f806 	bl	8000a1c <__udivmoddi4>
 8000a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	9d08      	ldr	r5, [sp, #32]
 8000a22:	460c      	mov	r4, r1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d14e      	bne.n	8000ac6 <__udivmoddi4+0xaa>
 8000a28:	4694      	mov	ip, r2
 8000a2a:	458c      	cmp	ip, r1
 8000a2c:	4686      	mov	lr, r0
 8000a2e:	fab2 f282 	clz	r2, r2
 8000a32:	d962      	bls.n	8000afa <__udivmoddi4+0xde>
 8000a34:	b14a      	cbz	r2, 8000a4a <__udivmoddi4+0x2e>
 8000a36:	f1c2 0320 	rsb	r3, r2, #32
 8000a3a:	4091      	lsls	r1, r2
 8000a3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a44:	4319      	orrs	r1, r3
 8000a46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4e:	fa1f f68c 	uxth.w	r6, ip
 8000a52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a62:	fb04 f106 	mul.w	r1, r4, r6
 8000a66:	4299      	cmp	r1, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x64>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a72:	f080 8112 	bcs.w	8000c9a <__udivmoddi4+0x27e>
 8000a76:	4299      	cmp	r1, r3
 8000a78:	f240 810f 	bls.w	8000c9a <__udivmoddi4+0x27e>
 8000a7c:	3c02      	subs	r4, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	1a59      	subs	r1, r3, r1
 8000a82:	fa1f f38e 	uxth.w	r3, lr
 8000a86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a92:	fb00 f606 	mul.w	r6, r0, r6
 8000a96:	429e      	cmp	r6, r3
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x94>
 8000a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa2:	f080 80fc 	bcs.w	8000c9e <__udivmoddi4+0x282>
 8000aa6:	429e      	cmp	r6, r3
 8000aa8:	f240 80f9 	bls.w	8000c9e <__udivmoddi4+0x282>
 8000aac:	4463      	add	r3, ip
 8000aae:	3802      	subs	r0, #2
 8000ab0:	1b9b      	subs	r3, r3, r6
 8000ab2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	b11d      	cbz	r5, 8000ac2 <__udivmoddi4+0xa6>
 8000aba:	40d3      	lsrs	r3, r2
 8000abc:	2200      	movs	r2, #0
 8000abe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d905      	bls.n	8000ad6 <__udivmoddi4+0xba>
 8000aca:	b10d      	cbz	r5, 8000ad0 <__udivmoddi4+0xb4>
 8000acc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e7f5      	b.n	8000ac2 <__udivmoddi4+0xa6>
 8000ad6:	fab3 f183 	clz	r1, r3
 8000ada:	2900      	cmp	r1, #0
 8000adc:	d146      	bne.n	8000b6c <__udivmoddi4+0x150>
 8000ade:	42a3      	cmp	r3, r4
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xcc>
 8000ae2:	4290      	cmp	r0, r2
 8000ae4:	f0c0 80f0 	bcc.w	8000cc8 <__udivmoddi4+0x2ac>
 8000ae8:	1a86      	subs	r6, r0, r2
 8000aea:	eb64 0303 	sbc.w	r3, r4, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	2d00      	cmp	r5, #0
 8000af2:	d0e6      	beq.n	8000ac2 <__udivmoddi4+0xa6>
 8000af4:	e9c5 6300 	strd	r6, r3, [r5]
 8000af8:	e7e3      	b.n	8000ac2 <__udivmoddi4+0xa6>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	f040 8090 	bne.w	8000c20 <__udivmoddi4+0x204>
 8000b00:	eba1 040c 	sub.w	r4, r1, ip
 8000b04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b08:	fa1f f78c 	uxth.w	r7, ip
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b16:	fb08 4416 	mls	r4, r8, r6, r4
 8000b1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b1e:	fb07 f006 	mul.w	r0, r7, r6
 8000b22:	4298      	cmp	r0, r3
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0x11c>
 8000b26:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x11a>
 8000b30:	4298      	cmp	r0, r3
 8000b32:	f200 80cd 	bhi.w	8000cd0 <__udivmoddi4+0x2b4>
 8000b36:	4626      	mov	r6, r4
 8000b38:	1a1c      	subs	r4, r3, r0
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b42:	fb08 4410 	mls	r4, r8, r0, r4
 8000b46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b4a:	fb00 f707 	mul.w	r7, r0, r7
 8000b4e:	429f      	cmp	r7, r3
 8000b50:	d908      	bls.n	8000b64 <__udivmoddi4+0x148>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b5a:	d202      	bcs.n	8000b62 <__udivmoddi4+0x146>
 8000b5c:	429f      	cmp	r7, r3
 8000b5e:	f200 80b0 	bhi.w	8000cc2 <__udivmoddi4+0x2a6>
 8000b62:	4620      	mov	r0, r4
 8000b64:	1bdb      	subs	r3, r3, r7
 8000b66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6a:	e7a5      	b.n	8000ab8 <__udivmoddi4+0x9c>
 8000b6c:	f1c1 0620 	rsb	r6, r1, #32
 8000b70:	408b      	lsls	r3, r1
 8000b72:	fa22 f706 	lsr.w	r7, r2, r6
 8000b76:	431f      	orrs	r7, r3
 8000b78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b80:	ea43 030c 	orr.w	r3, r3, ip
 8000b84:	40f4      	lsrs	r4, r6
 8000b86:	fa00 f801 	lsl.w	r8, r0, r1
 8000b8a:	0c38      	lsrs	r0, r7, #16
 8000b8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b90:	fbb4 fef0 	udiv	lr, r4, r0
 8000b94:	fa1f fc87 	uxth.w	ip, r7
 8000b98:	fb00 441e 	mls	r4, r0, lr, r4
 8000b9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ba4:	45a1      	cmp	r9, r4
 8000ba6:	fa02 f201 	lsl.w	r2, r2, r1
 8000baa:	d90a      	bls.n	8000bc2 <__udivmoddi4+0x1a6>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bb2:	f080 8084 	bcs.w	8000cbe <__udivmoddi4+0x2a2>
 8000bb6:	45a1      	cmp	r9, r4
 8000bb8:	f240 8081 	bls.w	8000cbe <__udivmoddi4+0x2a2>
 8000bbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bc0:	443c      	add	r4, r7
 8000bc2:	eba4 0409 	sub.w	r4, r4, r9
 8000bc6:	fa1f f983 	uxth.w	r9, r3
 8000bca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bce:	fb00 4413 	mls	r4, r0, r3, r4
 8000bd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bda:	45a4      	cmp	ip, r4
 8000bdc:	d907      	bls.n	8000bee <__udivmoddi4+0x1d2>
 8000bde:	193c      	adds	r4, r7, r4
 8000be0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000be4:	d267      	bcs.n	8000cb6 <__udivmoddi4+0x29a>
 8000be6:	45a4      	cmp	ip, r4
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0x29a>
 8000bea:	3b02      	subs	r3, #2
 8000bec:	443c      	add	r4, r7
 8000bee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000bf6:	eba4 040c 	sub.w	r4, r4, ip
 8000bfa:	429c      	cmp	r4, r3
 8000bfc:	46ce      	mov	lr, r9
 8000bfe:	469c      	mov	ip, r3
 8000c00:	d351      	bcc.n	8000ca6 <__udivmoddi4+0x28a>
 8000c02:	d04e      	beq.n	8000ca2 <__udivmoddi4+0x286>
 8000c04:	b155      	cbz	r5, 8000c1c <__udivmoddi4+0x200>
 8000c06:	ebb8 030e 	subs.w	r3, r8, lr
 8000c0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c12:	40cb      	lsrs	r3, r1
 8000c14:	431e      	orrs	r6, r3
 8000c16:	40cc      	lsrs	r4, r1
 8000c18:	e9c5 6400 	strd	r6, r4, [r5]
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	e750      	b.n	8000ac2 <__udivmoddi4+0xa6>
 8000c20:	f1c2 0320 	rsb	r3, r2, #32
 8000c24:	fa20 f103 	lsr.w	r1, r0, r3
 8000c28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c30:	4094      	lsls	r4, r2
 8000c32:	430c      	orrs	r4, r1
 8000c34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c3c:	fa1f f78c 	uxth.w	r7, ip
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3110 	mls	r1, r8, r0, r3
 8000c48:	0c23      	lsrs	r3, r4, #16
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f107 	mul.w	r1, r0, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x24c>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c5e:	d22c      	bcs.n	8000cba <__udivmoddi4+0x29e>
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d92a      	bls.n	8000cba <__udivmoddi4+0x29e>
 8000c64:	3802      	subs	r0, #2
 8000c66:	4463      	add	r3, ip
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c70:	fb08 3311 	mls	r3, r8, r1, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb01 f307 	mul.w	r3, r1, r7
 8000c7c:	42a3      	cmp	r3, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x276>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c88:	d213      	bcs.n	8000cb2 <__udivmoddi4+0x296>
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	d911      	bls.n	8000cb2 <__udivmoddi4+0x296>
 8000c8e:	3902      	subs	r1, #2
 8000c90:	4464      	add	r4, ip
 8000c92:	1ae4      	subs	r4, r4, r3
 8000c94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c98:	e739      	b.n	8000b0e <__udivmoddi4+0xf2>
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	e6f0      	b.n	8000a80 <__udivmoddi4+0x64>
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e706      	b.n	8000ab0 <__udivmoddi4+0x94>
 8000ca2:	45c8      	cmp	r8, r9
 8000ca4:	d2ae      	bcs.n	8000c04 <__udivmoddi4+0x1e8>
 8000ca6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000caa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cae:	3801      	subs	r0, #1
 8000cb0:	e7a8      	b.n	8000c04 <__udivmoddi4+0x1e8>
 8000cb2:	4631      	mov	r1, r6
 8000cb4:	e7ed      	b.n	8000c92 <__udivmoddi4+0x276>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	e799      	b.n	8000bee <__udivmoddi4+0x1d2>
 8000cba:	4630      	mov	r0, r6
 8000cbc:	e7d4      	b.n	8000c68 <__udivmoddi4+0x24c>
 8000cbe:	46d6      	mov	lr, sl
 8000cc0:	e77f      	b.n	8000bc2 <__udivmoddi4+0x1a6>
 8000cc2:	4463      	add	r3, ip
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	e74d      	b.n	8000b64 <__udivmoddi4+0x148>
 8000cc8:	4606      	mov	r6, r0
 8000cca:	4623      	mov	r3, r4
 8000ccc:	4608      	mov	r0, r1
 8000cce:	e70f      	b.n	8000af0 <__udivmoddi4+0xd4>
 8000cd0:	3e02      	subs	r6, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	e730      	b.n	8000b38 <__udivmoddi4+0x11c>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_idiv0>:
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <DrivingAPIs_LineMove>:

/*************************************************************************************************************************************************
 *					                 							APIs implementation
 *************************************************************************************************************************************************/
void DrivingAPIs_LineMove(uint16_t Speed, uint8_t Direction)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	80fb      	strh	r3, [r7, #6]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	717b      	strb	r3, [r7, #5]

	ServoSG90_SteeringWheelCtrl(TURN_BACK);
 8000cec:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000cf0:	f000 faf6 	bl	80012e0 <ServoSG90_SteeringWheelCtrl>
	Wheels.BackLeftWheel = ENABLE;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <DrivingAPIs_LineMove+0x80>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	805a      	strh	r2, [r3, #2]
	Wheels.BackRightWheel = ENABLE;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <DrivingAPIs_LineMove+0x80>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	801a      	strh	r2, [r3, #0]

	if (Direction == FORWARD)
 8000d00:	797b      	ldrb	r3, [r7, #5]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d10c      	bne.n	8000d20 <DrivingAPIs_LineMove+0x44>
	{
		Directions.RotateBackward.BackLeftWheel = DISABLE;
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <DrivingAPIs_LineMove+0x84>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	80da      	strh	r2, [r3, #6]
		Directions.RotateBackward.BackRightWheel = DISABLE;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <DrivingAPIs_LineMove+0x84>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	809a      	strh	r2, [r3, #4]
		Directions.RotateForward.BackLeftWheel = ENABLE;
 8000d12:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <DrivingAPIs_LineMove+0x84>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	805a      	strh	r2, [r3, #2]
		Directions.RotateForward.BackRightWheel = ENABLE;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <DrivingAPIs_LineMove+0x84>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	801a      	strh	r2, [r3, #0]
 8000d1e:	e00e      	b.n	8000d3e <DrivingAPIs_LineMove+0x62>

	}
	else if (Direction == BACKWARD)
 8000d20:	797b      	ldrb	r3, [r7, #5]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d10b      	bne.n	8000d3e <DrivingAPIs_LineMove+0x62>
	{
		Directions.RotateForward.BackLeftWheel = DISABLE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <DrivingAPIs_LineMove+0x84>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	805a      	strh	r2, [r3, #2]
		Directions.RotateForward.BackRightWheel = DISABLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <DrivingAPIs_LineMove+0x84>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	801a      	strh	r2, [r3, #0]
		Directions.RotateBackward.BackLeftWheel = ENABLE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <DrivingAPIs_LineMove+0x84>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	80da      	strh	r2, [r3, #6]
		Directions.RotateBackward.BackRightWheel = ENABLE;
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <DrivingAPIs_LineMove+0x84>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	809a      	strh	r2, [r3, #4]
	}

	Speeds.Speeds.BackLeftWheel = Speed;
 8000d3e:	4a09      	ldr	r2, [pc, #36]	@ (8000d64 <DrivingAPIs_LineMove+0x88>)
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	8053      	strh	r3, [r2, #2]
	Speeds.Speeds.BackRightWheel = Speed;
 8000d44:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <DrivingAPIs_LineMove+0x88>)
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	8013      	strh	r3, [r2, #0]

	//SoftStart(Speed); //TODO
	HBridge_MotorControl(&Wheels, &Directions, &Speeds);
 8000d4a:	4a06      	ldr	r2, [pc, #24]	@ (8000d64 <DrivingAPIs_LineMove+0x88>)
 8000d4c:	4904      	ldr	r1, [pc, #16]	@ (8000d60 <DrivingAPIs_LineMove+0x84>)
 8000d4e:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <DrivingAPIs_LineMove+0x80>)
 8000d50:	f000 f8fa 	bl	8000f48 <HBridge_MotorControl>
	//HAL_Delay(1000);
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2000007c 	.word	0x2000007c
 8000d60:	20000080 	.word	0x20000080
 8000d64:	20000088 	.word	0x20000088

08000d68 <DrivingAPIs_TurnMove>:


void DrivingAPIs_TurnMove(uint16_t Dir, uint8_t Angle, uint16_t Speed)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
 8000d72:	460b      	mov	r3, r1
 8000d74:	717b      	strb	r3, [r7, #5]
 8000d76:	4613      	mov	r3, r2
 8000d78:	807b      	strh	r3, [r7, #2]
	static uint8_t flag;
	static uint8_t flag2;
	static uint8_t last_Dir;


	if( (Dir != last_Dir)&&(flag2==10))
 8000d7a:	4b33      	ldr	r3, [pc, #204]	@ (8000e48 <DrivingAPIs_TurnMove+0xe0>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00b      	beq.n	8000d9e <DrivingAPIs_TurnMove+0x36>
 8000d86:	4b31      	ldr	r3, [pc, #196]	@ (8000e4c <DrivingAPIs_TurnMove+0xe4>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b0a      	cmp	r3, #10
 8000d8c:	d107      	bne.n	8000d9e <DrivingAPIs_TurnMove+0x36>
	{
		ServoSG90_SteeringWheelCtrl(Dir);
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 faa5 	bl	80012e0 <ServoSG90_SteeringWheelCtrl>
		last_Dir = Dir;
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e48 <DrivingAPIs_TurnMove+0xe0>)
 8000d9c:	701a      	strb	r2, [r3, #0]
	}


	Wheels.BackLeftWheel = ENABLE;
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e50 <DrivingAPIs_TurnMove+0xe8>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	805a      	strh	r2, [r3, #2]
	Wheels.BackRightWheel = ENABLE;
 8000da4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <DrivingAPIs_TurnMove+0xe8>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	801a      	strh	r2, [r3, #0]

	Directions.RotateBackward.BackLeftWheel = DISABLE;
 8000daa:	4b2a      	ldr	r3, [pc, #168]	@ (8000e54 <DrivingAPIs_TurnMove+0xec>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	80da      	strh	r2, [r3, #6]
	Directions.RotateBackward.BackRightWheel = DISABLE;
 8000db0:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <DrivingAPIs_TurnMove+0xec>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	809a      	strh	r2, [r3, #4]
	Directions.RotateForward.BackLeftWheel = ENABLE;
 8000db6:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <DrivingAPIs_TurnMove+0xec>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	805a      	strh	r2, [r3, #2]
	Directions.RotateForward.BackRightWheel = ENABLE;
 8000dbc:	4b25      	ldr	r3, [pc, #148]	@ (8000e54 <DrivingAPIs_TurnMove+0xec>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	801a      	strh	r2, [r3, #0]

	if(Dir == TURN_LEFT)
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000dc8:	d108      	bne.n	8000ddc <DrivingAPIs_TurnMove+0x74>
	{
		Speeds.Speeds.BackLeftWheel = HALF(Speed); // speed/2
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	085b      	lsrs	r3, r3, #1
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <DrivingAPIs_TurnMove+0xf0>)
 8000dd2:	805a      	strh	r2, [r3, #2]
		Speeds.Speeds.BackRightWheel = Speed;
 8000dd4:	4a20      	ldr	r2, [pc, #128]	@ (8000e58 <DrivingAPIs_TurnMove+0xf0>)
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	8013      	strh	r3, [r2, #0]
 8000dda:	e00b      	b.n	8000df4 <DrivingAPIs_TurnMove+0x8c>

	}
	else if(Dir == TURN_RIGHT)
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000de2:	d107      	bne.n	8000df4 <DrivingAPIs_TurnMove+0x8c>
	{
		Speeds.Speeds.BackLeftWheel = Speed;
 8000de4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e58 <DrivingAPIs_TurnMove+0xf0>)
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	8053      	strh	r3, [r2, #2]
		Speeds.Speeds.BackRightWheel = HALF(Speed);; // speed/2
 8000dea:	887b      	ldrh	r3, [r7, #2]
 8000dec:	085b      	lsrs	r3, r3, #1
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <DrivingAPIs_TurnMove+0xf0>)
 8000df2:	801a      	strh	r2, [r3, #0]
		Speeds.Speeds.BackRightWheel = Speed;
	}*/



		HBridge_MotorControl(&Wheels, &Directions, &Speeds);
 8000df4:	4a18      	ldr	r2, [pc, #96]	@ (8000e58 <DrivingAPIs_TurnMove+0xf0>)
 8000df6:	4917      	ldr	r1, [pc, #92]	@ (8000e54 <DrivingAPIs_TurnMove+0xec>)
 8000df8:	4815      	ldr	r0, [pc, #84]	@ (8000e50 <DrivingAPIs_TurnMove+0xe8>)
 8000dfa:	f000 f8a5 	bl	8000f48 <HBridge_MotorControl>

		if ((flag == CALC_ANGLE)&& (last_Dir = Dir))
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <DrivingAPIs_TurnMove+0xf4>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d112      	bne.n	8000e2c <DrivingAPIs_TurnMove+0xc4>
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <DrivingAPIs_TurnMove+0xe0>)
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <DrivingAPIs_TurnMove+0xe0>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00a      	beq.n	8000e2c <DrivingAPIs_TurnMove+0xc4>
		{

		ServoSG90_SteeringWheelCtrl(TURN_BACK);
 8000e16:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000e1a:	f000 fa61 	bl	80012e0 <ServoSG90_SteeringWheelCtrl>
		flag=0;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <DrivingAPIs_TurnMove+0xf4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
		flag2 = 10;
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <DrivingAPIs_TurnMove+0xe4>)
 8000e26:	220a      	movs	r2, #10
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	e009      	b.n	8000e40 <DrivingAPIs_TurnMove+0xd8>
		}
		else
		{
			flag++;
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <DrivingAPIs_TurnMove+0xf4>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <DrivingAPIs_TurnMove+0xf4>)
 8000e36:	701a      	strb	r2, [r3, #0]
			flag2= 20;
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <DrivingAPIs_TurnMove+0xe4>)
 8000e3a:	2214      	movs	r2, #20
 8000e3c:	701a      	strb	r2, [r3, #0]
		}
		//Wheels.BackLeftWheel = DISABLE;
		//Wheels.BackRightWheel = DISABLE;
		//HBridge_MotorStop(&Wheels);

}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000008c 	.word	0x2000008c
 8000e4c:	2000008d 	.word	0x2000008d
 8000e50:	2000007c 	.word	0x2000007c
 8000e54:	20000080 	.word	0x20000080
 8000e58:	20000088 	.word	0x20000088
 8000e5c:	2000008e 	.word	0x2000008e

08000e60 <state_machine>:


uint8_t Encoding(SensorsPosition_t data);

void state_machine(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
		//static uint8_t State;

		//DrivingAPIs_Break(BREAK);


		SensorMapping_Read(&ActSensPos);
 8000e64:	481f      	ldr	r0, [pc, #124]	@ (8000ee4 <state_machine+0x84>)
 8000e66:	f000 f841 	bl	8000eec <SensorMapping_Read>

static uint8_t flag;



if(ActSensPos.FronLeft.Detection)
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <state_machine+0x84>)
 8000e6c:	78db      	ldrb	r3, [r3, #3]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d023      	beq.n	8000eba <state_machine+0x5a>
{


	if (flag <= 25)
 8000e72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <state_machine+0x88>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b19      	cmp	r3, #25
 8000e78:	d80d      	bhi.n	8000e96 <state_machine+0x36>
	{
		DrivingAPIs_TurnMove(TURN_RIGHT, 0, SPEED_80);
 8000e7a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e84:	f7ff ff70 	bl	8000d68 <DrivingAPIs_TurnMove>
		flag++;
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <state_machine+0x88>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <state_machine+0x88>)
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e01c      	b.n	8000ed0 <state_machine+0x70>
	}
	else if (flag <= 50)
 8000e96:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <state_machine+0x88>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b32      	cmp	r3, #50	@ 0x32
 8000e9c:	d818      	bhi.n	8000ed0 <state_machine+0x70>
	{
		DrivingAPIs_TurnMove(TURN_LEFT, 0, SPEED_80);
 8000e9e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ea8:	f7ff ff5e 	bl	8000d68 <DrivingAPIs_TurnMove>
		flag++;
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <state_machine+0x88>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <state_machine+0x88>)
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e00a      	b.n	8000ed0 <state_machine+0x70>
	//DrivingAPIs_TurnMove(TURN_LEFT, 0, SPEED_30);
	//DrivingAPIs_LineMove(SPEED_50,FORWARD);
}
else
{
	DrivingAPIs_LineMove(SPEED_50,FORWARD);
 8000eba:	2101      	movs	r1, #1
 8000ebc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000ec0:	f7ff ff0c 	bl	8000cdc <DrivingAPIs_LineMove>
	flag++;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <state_machine+0x88>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <state_machine+0x88>)
 8000ece:	701a      	strb	r2, [r3, #0]

}


if (flag >= 51)
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <state_machine+0x88>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b32      	cmp	r3, #50	@ 0x32
 8000ed6:	d902      	bls.n	8000ede <state_machine+0x7e>
	{
		flag =0;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <state_machine+0x88>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
		//	lu8_LastSensPos=lu8_ActSensPos;

			//DrivingAPIs_LineMove(SPEED_100,FORWARD);
		//	lu8_LastSensPos=lu8_ActSensPos;

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000090 	.word	0x20000090
 8000ee8:	2000009c 	.word	0x2000009c

08000eec <SensorMapping_Read>:




void SensorMapping_Read(SensorsPosition_t *SensorMapping)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

	static uint8_t flag;

	HCSR04_Read();
 8000ef4:	f000 f9d4 	bl	80012a0 <HCSR04_Read>

	if(Distance <50)
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <SensorMapping_Read+0x54>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	2b31      	cmp	r3, #49	@ 0x31
 8000efe:	d811      	bhi.n	8000f24 <SensorMapping_Read+0x38>
	{
	SensorMapping->FronLeft.Detection= 1;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	70da      	strb	r2, [r3, #3]
	SensorMapping->FronLeft.ActualDistance = Distance;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <SensorMapping_Read+0x54>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	715a      	strb	r2, [r3, #5]

	flag = Distance;
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <SensorMapping_Read+0x54>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <SensorMapping_Read+0x58>)
 8000f18:	701a      	strb	r2, [r3, #0]
	SensorMapping->FronLeft.PreviousDistance = flag;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <SensorMapping_Read+0x58>)
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	711a      	strb	r2, [r3, #4]
	{
	SensorMapping->FronLeft.Detection= 0;
	SensorMapping->FronLeft.ActualDistance = 0;
	SensorMapping->FronLeft.PreviousDistance = 0;
	}
}
 8000f22:	e008      	b.n	8000f36 <SensorMapping_Read+0x4a>
	SensorMapping->FronLeft.Detection= 0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	70da      	strb	r2, [r3, #3]
	SensorMapping->FronLeft.ActualDistance = 0;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	715a      	strb	r2, [r3, #5]
	SensorMapping->FronLeft.PreviousDistance = 0;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	711a      	strb	r2, [r3, #4]
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000ae 	.word	0x200000ae
 8000f44:	2000009d 	.word	0x2000009d

08000f48 <HBridge_MotorControl>:
void AdjustDutyCycle(uint16_t Speed, uint8_t Motor);



void HBridge_MotorControl(Wheels_t *Wheels, RotateDir_t *Directions, Speeds_t *Speeds)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	if ((Wheels->BackLeftWheel) && (!Wheels->BackRightWheel))
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	885b      	ldrh	r3, [r3, #2]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d02e      	beq.n	8000fba <HBridge_MotorControl+0x72>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d12a      	bne.n	8000fba <HBridge_MotorControl+0x72>
	{
		/** Rotate only left wheel*/
		if (Directions->RotateForward.BackLeftWheel)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	885b      	ldrh	r3, [r3, #2]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d010      	beq.n	8000f8e <HBridge_MotorControl+0x46>
		{
			AdjustDutyCycle(Speeds->Speeds.BackLeftWheel, LEFTMOTOR);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	885b      	ldrh	r3, [r3, #2]
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f8b6 	bl	80010e4 <AdjustDutyCycle>
			HAL_GPIO_WritePin(LeftWheel_IN1_GPIO_Port, LeftWheel_IN1_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4858      	ldr	r0, [pc, #352]	@ (80010e0 <HBridge_MotorControl+0x198>)
 8000f7e:	f001 f9fb 	bl	8002378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftWheel_IN2_GPIO_Port, LeftWheel_IN2_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2120      	movs	r1, #32
 8000f86:	4856      	ldr	r0, [pc, #344]	@ (80010e0 <HBridge_MotorControl+0x198>)
 8000f88:	f001 f9f6 	bl	8002378 <HAL_GPIO_WritePin>
		if (Directions->RotateForward.BackLeftWheel)
 8000f8c:	e0a1      	b.n	80010d2 <HBridge_MotorControl+0x18a>
		}
		else if(Directions->RotateBackward.BackLeftWheel)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	88db      	ldrh	r3, [r3, #6]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 809d 	beq.w	80010d2 <HBridge_MotorControl+0x18a>
		{
			AdjustDutyCycle(Speeds->Speeds.BackLeftWheel, LEFTMOTOR);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	885b      	ldrh	r3, [r3, #2]
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f8a0 	bl	80010e4 <AdjustDutyCycle>
			HAL_GPIO_WritePin(LeftWheel_IN1_GPIO_Port, LeftWheel_IN1_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	484d      	ldr	r0, [pc, #308]	@ (80010e0 <HBridge_MotorControl+0x198>)
 8000faa:	f001 f9e5 	bl	8002378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftWheel_IN2_GPIO_Port, LeftWheel_IN2_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	484b      	ldr	r0, [pc, #300]	@ (80010e0 <HBridge_MotorControl+0x198>)
 8000fb4:	f001 f9e0 	bl	8002378 <HAL_GPIO_WritePin>
		if (Directions->RotateForward.BackLeftWheel)
 8000fb8:	e08b      	b.n	80010d2 <HBridge_MotorControl+0x18a>
		}
	}
	else if((!Wheels->BackLeftWheel) && (Wheels->BackRightWheel))
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	885b      	ldrh	r3, [r3, #2]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d12d      	bne.n	800101e <HBridge_MotorControl+0xd6>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d029      	beq.n	800101e <HBridge_MotorControl+0xd6>
	{
		/** Rotate only right wheel*/
		if (Directions->RotateForward.BackRightWheel)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d010      	beq.n	8000ff4 <HBridge_MotorControl+0xac>
		{
			AdjustDutyCycle(Speeds->Speeds.BackRightWheel, RIGHTMOTOR);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f883 	bl	80010e4 <AdjustDutyCycle>
			HAL_GPIO_WritePin(RightWheel_IN3_GPIO_Port, RightWheel_IN3_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2140      	movs	r1, #64	@ 0x40
 8000fe2:	483f      	ldr	r0, [pc, #252]	@ (80010e0 <HBridge_MotorControl+0x198>)
 8000fe4:	f001 f9c8 	bl	8002378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN4_GPIO_Port, RightWheel_IN4_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2180      	movs	r1, #128	@ 0x80
 8000fec:	483c      	ldr	r0, [pc, #240]	@ (80010e0 <HBridge_MotorControl+0x198>)
 8000fee:	f001 f9c3 	bl	8002378 <HAL_GPIO_WritePin>
		if (Directions->RotateForward.BackRightWheel)
 8000ff2:	e070      	b.n	80010d6 <HBridge_MotorControl+0x18e>
		}
		else if(Directions->RotateBackward.BackRightWheel)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	889b      	ldrh	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d06c      	beq.n	80010d6 <HBridge_MotorControl+0x18e>
		{
			AdjustDutyCycle(Speeds->Speeds.BackRightWheel, RIGHTMOTOR);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f86e 	bl	80010e4 <AdjustDutyCycle>
			HAL_GPIO_WritePin(RightWheel_IN3_GPIO_Port, RightWheel_IN3_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2140      	movs	r1, #64	@ 0x40
 800100c:	4834      	ldr	r0, [pc, #208]	@ (80010e0 <HBridge_MotorControl+0x198>)
 800100e:	f001 f9b3 	bl	8002378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN4_GPIO_Port, RightWheel_IN4_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	4832      	ldr	r0, [pc, #200]	@ (80010e0 <HBridge_MotorControl+0x198>)
 8001018:	f001 f9ae 	bl	8002378 <HAL_GPIO_WritePin>
		if (Directions->RotateForward.BackRightWheel)
 800101c:	e05b      	b.n	80010d6 <HBridge_MotorControl+0x18e>
		}
	}
	else if((Wheels->BackLeftWheel) && (Wheels->BackRightWheel))
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	885b      	ldrh	r3, [r3, #2]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d058      	beq.n	80010d8 <HBridge_MotorControl+0x190>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d054      	beq.n	80010d8 <HBridge_MotorControl+0x190>
	{
		/** Rotate both wheels */
		if ((Directions->RotateForward.BackLeftWheel)&&(Directions->RotateForward.BackRightWheel))
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	885b      	ldrh	r3, [r3, #2]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d024      	beq.n	8001080 <HBridge_MotorControl+0x138>
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d020      	beq.n	8001080 <HBridge_MotorControl+0x138>
		{
			AdjustDutyCycle(Speeds->Speeds.BackLeftWheel, LEFTMOTOR);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	885b      	ldrh	r3, [r3, #2]
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f84d 	bl	80010e4 <AdjustDutyCycle>
			AdjustDutyCycle(Speeds->Speeds.BackRightWheel, RIGHTMOTOR);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	2101      	movs	r1, #1
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f847 	bl	80010e4 <AdjustDutyCycle>
			HAL_GPIO_WritePin(LeftWheel_IN1_GPIO_Port, LeftWheel_IN1_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2110      	movs	r1, #16
 800105a:	4821      	ldr	r0, [pc, #132]	@ (80010e0 <HBridge_MotorControl+0x198>)
 800105c:	f001 f98c 	bl	8002378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftWheel_IN2_GPIO_Port, LeftWheel_IN2_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2120      	movs	r1, #32
 8001064:	481e      	ldr	r0, [pc, #120]	@ (80010e0 <HBridge_MotorControl+0x198>)
 8001066:	f001 f987 	bl	8002378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN3_GPIO_Port, RightWheel_IN3_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2140      	movs	r1, #64	@ 0x40
 800106e:	481c      	ldr	r0, [pc, #112]	@ (80010e0 <HBridge_MotorControl+0x198>)
 8001070:	f001 f982 	bl	8002378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN4_GPIO_Port, RightWheel_IN4_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2180      	movs	r1, #128	@ 0x80
 8001078:	4819      	ldr	r0, [pc, #100]	@ (80010e0 <HBridge_MotorControl+0x198>)
 800107a:	f001 f97d 	bl	8002378 <HAL_GPIO_WritePin>
 800107e:	e02b      	b.n	80010d8 <HBridge_MotorControl+0x190>
		}
		else if((Directions->RotateBackward.BackLeftWheel)&&(Directions->RotateBackward.BackRightWheel))
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	88db      	ldrh	r3, [r3, #6]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d027      	beq.n	80010d8 <HBridge_MotorControl+0x190>
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	889b      	ldrh	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d023      	beq.n	80010d8 <HBridge_MotorControl+0x190>
		{
			AdjustDutyCycle(Speeds->Speeds.BackLeftWheel, LEFTMOTOR);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	885b      	ldrh	r3, [r3, #2]
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f824 	bl	80010e4 <AdjustDutyCycle>
			AdjustDutyCycle(Speeds->Speeds.BackRightWheel, RIGHTMOTOR);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f81e 	bl	80010e4 <AdjustDutyCycle>
			HAL_GPIO_WritePin(LeftWheel_IN1_GPIO_Port, LeftWheel_IN1_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2110      	movs	r1, #16
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <HBridge_MotorControl+0x198>)
 80010ae:	f001 f963 	bl	8002378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftWheel_IN2_GPIO_Port, LeftWheel_IN2_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2120      	movs	r1, #32
 80010b6:	480a      	ldr	r0, [pc, #40]	@ (80010e0 <HBridge_MotorControl+0x198>)
 80010b8:	f001 f95e 	bl	8002378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN3_GPIO_Port, RightWheel_IN3_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2140      	movs	r1, #64	@ 0x40
 80010c0:	4807      	ldr	r0, [pc, #28]	@ (80010e0 <HBridge_MotorControl+0x198>)
 80010c2:	f001 f959 	bl	8002378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightWheel_IN4_GPIO_Port, RightWheel_IN4_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <HBridge_MotorControl+0x198>)
 80010cc:	f001 f954 	bl	8002378 <HAL_GPIO_WritePin>
		}
	}
}
 80010d0:	e002      	b.n	80010d8 <HBridge_MotorControl+0x190>
		if (Directions->RotateForward.BackLeftWheel)
 80010d2:	bf00      	nop
 80010d4:	e000      	b.n	80010d8 <HBridge_MotorControl+0x190>
		if (Directions->RotateForward.BackRightWheel)
 80010d6:	bf00      	nop
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40020000 	.word	0x40020000

080010e4 <AdjustDutyCycle>:

}


void AdjustDutyCycle(uint16_t Speed, uint8_t Motor)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	460a      	mov	r2, r1
 80010ee:	80fb      	strh	r3, [r7, #6]
 80010f0:	4613      	mov	r3, r2
 80010f2:	717b      	strb	r3, [r7, #5]
	if(Motor == LEFTMOTOR)
 80010f4:	797b      	ldrb	r3, [r7, #5]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d104      	bne.n	8001104 <AdjustDutyCycle+0x20>
	{
		htim1.Instance->CCR3 = Speed;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <AdjustDutyCycle+0x3c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	88fa      	ldrh	r2, [r7, #6]
 8001100:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if(Motor == RIGHTMOTOR)
	{
		htim8.Instance->CCR2 = Speed;
	}
}
 8001102:	e006      	b.n	8001112 <AdjustDutyCycle+0x2e>
	else if(Motor == RIGHTMOTOR)
 8001104:	797b      	ldrb	r3, [r7, #5]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d103      	bne.n	8001112 <AdjustDutyCycle+0x2e>
		htim8.Instance->CCR2 = Speed;
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <AdjustDutyCycle+0x40>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	88fa      	ldrh	r2, [r7, #6]
 8001110:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200000b0 	.word	0x200000b0
 8001124:	20000188 	.word	0x20000188

08001128 <delay>:

extern TIM_HandleTypeDef htim3;


void delay (uint16_t time)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <delay+0x30>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < time);
 800113a:	bf00      	nop
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <delay+0x30>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	429a      	cmp	r2, r3
 8001146:	d3f9      	bcc.n	800113c <delay+0x14>
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000140 	.word	0x20000140
 800115c:	00000000 	.word	0x00000000

08001160 <HAL_TIM_IC_CaptureCallback>:

#define TRIG_PIN GPIO_PIN_9
#define TRIG_Port GPIOA

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7f1b      	ldrb	r3, [r3, #28]
 800116c:	2b08      	cmp	r3, #8
 800116e:	f040 8083 	bne.w	8001278 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if(Is_First_Captured==0)
 8001172:	4b45      	ldr	r3, [pc, #276]	@ (8001288 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d11a      	bne.n	80011b0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800117a:	210c      	movs	r1, #12
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f002 fde5 	bl	8003d4c <HAL_TIM_ReadCapturedValue>
 8001182:	4603      	mov	r3, r0
 8001184:	4a41      	ldr	r2, [pc, #260]	@ (800128c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001186:	6013      	str	r3, [r2, #0]
			Is_First_Captured =1;
 8001188:	4b3f      	ldr	r3, [pc, #252]	@ (8001288 <HAL_TIM_IC_CaptureCallback+0x128>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6a1a      	ldr	r2, [r3, #32]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800119c:	621a      	str	r2, [r3, #32]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6a1a      	ldr	r2, [r3, #32]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80011ac:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC4);

		}
	}
}
 80011ae:	e063      	b.n	8001278 <HAL_TIM_IC_CaptureCallback+0x118>
		else if(Is_First_Captured == 1)
 80011b0:	4b35      	ldr	r3, [pc, #212]	@ (8001288 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d15f      	bne.n	8001278 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80011b8:	210c      	movs	r1, #12
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f002 fdc6 	bl	8003d4c <HAL_TIM_ReadCapturedValue>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a33      	ldr	r2, [pc, #204]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011c4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	@ 0x24
			if( IC_Val2 > IC_Val1)
 80011ce:	4b30      	ldr	r3, [pc, #192]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b2e      	ldr	r3, [pc, #184]	@ (800128c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d907      	bls.n	80011ea <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 80011da:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e00f      	b.n	800120a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if(IC_Val2 > IC_Val1)
 80011ea:	4b29      	ldr	r3, [pc, #164]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b27      	ldr	r3, [pc, #156]	@ (800128c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d909      	bls.n	800120a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1)+ IC_Val2;
 80011f6:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b24      	ldr	r3, [pc, #144]	@ (800128c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001204:	33ff      	adds	r3, #255	@ 0xff
 8001206:	4a23      	ldr	r2, [pc, #140]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001208:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 800120a:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x134>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f940 	bl	8000494 <__aeabi_ui2d>
 8001214:	a31a      	add	r3, pc, #104	@ (adr r3, 8001280 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff f9b5 	bl	8000588 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800122e:	f7ff fad5 	bl	80007dc <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fbb7 	bl	80009ac <__aeabi_d2uiz>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001244:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0;
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6a1a      	ldr	r2, [r3, #32]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800125a:	621a      	str	r2, [r3, #32]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6a12      	ldr	r2, [r2, #32]
 8001266:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC4);
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0210 	bic.w	r2, r2, #16
 8001276:	60da      	str	r2, [r3, #12]
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	b020c49c 	.word	0xb020c49c
 8001284:	3fa16872 	.word	0x3fa16872
 8001288:	200000ac 	.word	0x200000ac
 800128c:	200000a0 	.word	0x200000a0
 8001290:	200000a4 	.word	0x200000a4
 8001294:	200000a8 	.word	0x200000a8
 8001298:	200000ae 	.word	0x200000ae
 800129c:	20000140 	.word	0x20000140

080012a0 <HCSR04_Read>:

void HCSR04_Read(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_Port, TRIG_PIN, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012aa:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <HCSR04_Read+0x38>)
 80012ac:	f001 f864 	bl	8002378 <HAL_GPIO_WritePin>
	delay(10);
 80012b0:	200a      	movs	r0, #10
 80012b2:	f7ff ff39 	bl	8001128 <delay>
	HAL_GPIO_WritePin(TRIG_Port, TRIG_PIN, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012bc:	4806      	ldr	r0, [pc, #24]	@ (80012d8 <HCSR04_Read+0x38>)
 80012be:	f001 f85b 	bl	8002378 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC4);
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HCSR04_Read+0x3c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <HCSR04_Read+0x3c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f042 0210 	orr.w	r2, r2, #16
 80012d0:	60da      	str	r2, [r3, #12]
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40020000 	.word	0x40020000
 80012dc:	20000140 	.word	0x20000140

080012e0 <ServoSG90_SteeringWheelCtrl>:




void ServoSG90_SteeringWheelCtrl(uint16_t Direction)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	htim2.Instance->CCR1 = Direction;
 80012ea:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <ServoSG90_SteeringWheelCtrl+0x20>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	88fa      	ldrh	r2, [r7, #6]
 80012f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200000f8 	.word	0x200000f8

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001308:	f000 fd7e 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130c:	f000 f836 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001310:	f000 facc 	bl	80018ac <MX_GPIO_Init>
  MX_TIM1_Init();
 8001314:	f000 f8a4 	bl	8001460 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001318:	f000 fa28 	bl	800176c <MX_TIM8_Init>
  MX_TIM2_Init();
 800131c:	f000 f940 	bl	80015a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001320:	f000 f9b4 	bl	800168c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001324:	2108      	movs	r1, #8
 8001326:	480e      	ldr	r0, [pc, #56]	@ (8001360 <main+0x5c>)
 8001328:	f001 ffb0 	bl	800328c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800132c:	2104      	movs	r1, #4
 800132e:	480d      	ldr	r0, [pc, #52]	@ (8001364 <main+0x60>)
 8001330:	f001 ffac 	bl	800328c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001334:	2100      	movs	r1, #0
 8001336:	480c      	ldr	r0, [pc, #48]	@ (8001368 <main+0x64>)
 8001338:	f001 ffa8 	bl	800328c <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 800133c:	210c      	movs	r1, #12
 800133e:	480b      	ldr	r0, [pc, #44]	@ (800136c <main+0x68>)
 8001340:	f002 f8c6 	bl	80034d0 <HAL_TIM_IC_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001344:	f003 fad0 	bl	80048e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001348:	4a09      	ldr	r2, [pc, #36]	@ (8001370 <main+0x6c>)
 800134a:	2100      	movs	r1, #0
 800134c:	4809      	ldr	r0, [pc, #36]	@ (8001374 <main+0x70>)
 800134e:	f003 fb15 	bl	800497c <osThreadNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <main+0x74>)
 8001356:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001358:	f003 faea 	bl	8004930 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <main+0x58>
 8001360:	200000b0 	.word	0x200000b0
 8001364:	20000188 	.word	0x20000188
 8001368:	200000f8 	.word	0x200000f8
 800136c:	20000140 	.word	0x20000140
 8001370:	08007654 	.word	0x08007654
 8001374:	0800196d 	.word	0x0800196d
 8001378:	200001d0 	.word	0x200001d0

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b094      	sub	sp, #80	@ 0x50
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	2234      	movs	r2, #52	@ 0x34
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f006 f85c 	bl	8007448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <SystemClock_Config+0xdc>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001458 <SystemClock_Config+0xdc>)
 80013aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b0:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <SystemClock_Config+0xdc>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013bc:	2300      	movs	r3, #0
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	4b26      	ldr	r3, [pc, #152]	@ (800145c <SystemClock_Config+0xe0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a25      	ldr	r2, [pc, #148]	@ (800145c <SystemClock_Config+0xe0>)
 80013c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <SystemClock_Config+0xe0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d8:	2301      	movs	r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e2:	2302      	movs	r3, #2
 80013e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013ec:	2304      	movs	r3, #4
 80013ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013f0:	23b4      	movs	r3, #180	@ 0xb4
 80013f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4618      	mov	r0, r3
 8001406:	f001 fb89 	bl	8002b1c <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001410:	f000 faca 	bl	80019a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001414:	f000 ffca 	bl	80023ac <HAL_PWREx_EnableOverDrive>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800141e:	f000 fac3 	bl	80019a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	230f      	movs	r3, #15
 8001424:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	2302      	movs	r3, #2
 8001428:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800142e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001438:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	2105      	movs	r1, #5
 8001440:	4618      	mov	r0, r3
 8001442:	f001 f803 	bl	800244c <HAL_RCC_ClockConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800144c:	f000 faac 	bl	80019a8 <Error_Handler>
  }
}
 8001450:	bf00      	nop
 8001452:	3750      	adds	r7, #80	@ 0x50
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	40007000 	.word	0x40007000

08001460 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b096      	sub	sp, #88	@ 0x58
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2220      	movs	r2, #32
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f005 ffd5 	bl	8007448 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800149e:	4b3e      	ldr	r3, [pc, #248]	@ (8001598 <MX_TIM1_Init+0x138>)
 80014a0:	4a3e      	ldr	r2, [pc, #248]	@ (800159c <MX_TIM1_Init+0x13c>)
 80014a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 80014a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001598 <MX_TIM1_Init+0x138>)
 80014a6:	22b3      	movs	r2, #179	@ 0xb3
 80014a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001598 <MX_TIM1_Init+0x138>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014b0:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <MX_TIM1_Init+0x138>)
 80014b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <MX_TIM1_Init+0x138>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014be:	4b36      	ldr	r3, [pc, #216]	@ (8001598 <MX_TIM1_Init+0x138>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <MX_TIM1_Init+0x138>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ca:	4833      	ldr	r0, [pc, #204]	@ (8001598 <MX_TIM1_Init+0x138>)
 80014cc:	f001 fdc4 	bl	8003058 <HAL_TIM_Base_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014d6:	f000 fa67 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014e4:	4619      	mov	r1, r3
 80014e6:	482c      	ldr	r0, [pc, #176]	@ (8001598 <MX_TIM1_Init+0x138>)
 80014e8:	f002 fb68 	bl	8003bbc <HAL_TIM_ConfigClockSource>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014f2:	f000 fa59 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014f6:	4828      	ldr	r0, [pc, #160]	@ (8001598 <MX_TIM1_Init+0x138>)
 80014f8:	f001 fe6e 	bl	80031d8 <HAL_TIM_PWM_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001502:	f000 fa51 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800150e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001512:	4619      	mov	r1, r3
 8001514:	4820      	ldr	r0, [pc, #128]	@ (8001598 <MX_TIM1_Init+0x138>)
 8001516:	f003 f8c1 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001520:	f000 fa42 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001524:	2360      	movs	r3, #96	@ 0x60
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001530:	2300      	movs	r3, #0
 8001532:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001544:	2208      	movs	r2, #8
 8001546:	4619      	mov	r1, r3
 8001548:	4813      	ldr	r0, [pc, #76]	@ (8001598 <MX_TIM1_Init+0x138>)
 800154a:	f002 fa75 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001554:	f000 fa28 	bl	80019a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800156c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001570:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4807      	ldr	r0, [pc, #28]	@ (8001598 <MX_TIM1_Init+0x138>)
 800157c:	f003 f90a 	bl	8004794 <HAL_TIMEx_ConfigBreakDeadTime>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001586:	f000 fa0f 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800158a:	4803      	ldr	r0, [pc, #12]	@ (8001598 <MX_TIM1_Init+0x138>)
 800158c:	f000 face 	bl	8001b2c <HAL_TIM_MspPostInit>

}
 8001590:	bf00      	nop
 8001592:	3758      	adds	r7, #88	@ 0x58
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200000b0 	.word	0x200000b0
 800159c:	40010000 	.word	0x40010000

080015a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08e      	sub	sp, #56	@ 0x38
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	f107 0320 	add.w	r3, r7, #32
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
 80015cc:	615a      	str	r2, [r3, #20]
 80015ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001688 <MX_TIM2_Init+0xe8>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80015d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <MX_TIM2_Init+0xe8>)
 80015da:	2259      	movs	r2, #89	@ 0x59
 80015dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b2a      	ldr	r3, [pc, #168]	@ (8001688 <MX_TIM2_Init+0xe8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80015e4:	4b28      	ldr	r3, [pc, #160]	@ (8001688 <MX_TIM2_Init+0xe8>)
 80015e6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80015ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ec:	4b26      	ldr	r3, [pc, #152]	@ (8001688 <MX_TIM2_Init+0xe8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f2:	4b25      	ldr	r3, [pc, #148]	@ (8001688 <MX_TIM2_Init+0xe8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f8:	4823      	ldr	r0, [pc, #140]	@ (8001688 <MX_TIM2_Init+0xe8>)
 80015fa:	f001 fd2d 	bl	8003058 <HAL_TIM_Base_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001604:	f000 f9d0 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800160e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001612:	4619      	mov	r1, r3
 8001614:	481c      	ldr	r0, [pc, #112]	@ (8001688 <MX_TIM2_Init+0xe8>)
 8001616:	f002 fad1 	bl	8003bbc <HAL_TIM_ConfigClockSource>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001620:	f000 f9c2 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001624:	4818      	ldr	r0, [pc, #96]	@ (8001688 <MX_TIM2_Init+0xe8>)
 8001626:	f001 fdd7 	bl	80031d8 <HAL_TIM_PWM_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001630:	f000 f9ba 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800163c:	f107 0320 	add.w	r3, r7, #32
 8001640:	4619      	mov	r1, r3
 8001642:	4811      	ldr	r0, [pc, #68]	@ (8001688 <MX_TIM2_Init+0xe8>)
 8001644:	f003 f82a 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800164e:	f000 f9ab 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001652:	2360      	movs	r3, #96	@ 0x60
 8001654:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	4807      	ldr	r0, [pc, #28]	@ (8001688 <MX_TIM2_Init+0xe8>)
 800166a:	f002 f9e5 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001674:	f000 f998 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001678:	4803      	ldr	r0, [pc, #12]	@ (8001688 <MX_TIM2_Init+0xe8>)
 800167a:	f000 fa57 	bl	8001b2c <HAL_TIM_MspPostInit>

}
 800167e:	bf00      	nop
 8001680:	3738      	adds	r7, #56	@ 0x38
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200000f8 	.word	0x200000f8

0800168c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016aa:	463b      	mov	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001764 <MX_TIM3_Init+0xd8>)
 80016b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001768 <MX_TIM3_Init+0xdc>)
 80016ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80016bc:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <MX_TIM3_Init+0xd8>)
 80016be:	2259      	movs	r2, #89	@ 0x59
 80016c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c2:	4b28      	ldr	r3, [pc, #160]	@ (8001764 <MX_TIM3_Init+0xd8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016c8:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <MX_TIM3_Init+0xd8>)
 80016ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d0:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <MX_TIM3_Init+0xd8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d6:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <MX_TIM3_Init+0xd8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016dc:	4821      	ldr	r0, [pc, #132]	@ (8001764 <MX_TIM3_Init+0xd8>)
 80016de:	f001 fcbb 	bl	8003058 <HAL_TIM_Base_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80016e8:	f000 f95e 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016f2:	f107 0318 	add.w	r3, r7, #24
 80016f6:	4619      	mov	r1, r3
 80016f8:	481a      	ldr	r0, [pc, #104]	@ (8001764 <MX_TIM3_Init+0xd8>)
 80016fa:	f002 fa5f 	bl	8003bbc <HAL_TIM_ConfigClockSource>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001704:	f000 f950 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001708:	4816      	ldr	r0, [pc, #88]	@ (8001764 <MX_TIM3_Init+0xd8>)
 800170a:	f001 fe87 	bl	800341c <HAL_TIM_IC_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001714:	f000 f948 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	480f      	ldr	r0, [pc, #60]	@ (8001764 <MX_TIM3_Init+0xd8>)
 8001728:	f002 ffb8 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001732:	f000 f939 	bl	80019a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800173a:	2301      	movs	r3, #1
 800173c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	220c      	movs	r2, #12
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_TIM3_Init+0xd8>)
 800174e:	f002 f8d7 	bl	8003900 <HAL_TIM_IC_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001758:	f000 f926 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	@ 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000140 	.word	0x20000140
 8001768:	40000400 	.word	0x40000400

0800176c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b096      	sub	sp, #88	@ 0x58
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2220      	movs	r2, #32
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f005 fe4f 	bl	8007448 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017aa:	4b3e      	ldr	r3, [pc, #248]	@ (80018a4 <MX_TIM8_Init+0x138>)
 80017ac:	4a3e      	ldr	r2, [pc, #248]	@ (80018a8 <MX_TIM8_Init+0x13c>)
 80017ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 80017b0:	4b3c      	ldr	r3, [pc, #240]	@ (80018a4 <MX_TIM8_Init+0x138>)
 80017b2:	22b3      	movs	r2, #179	@ 0xb3
 80017b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <MX_TIM8_Init+0x138>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017bc:	4b39      	ldr	r3, [pc, #228]	@ (80018a4 <MX_TIM8_Init+0x138>)
 80017be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b37      	ldr	r3, [pc, #220]	@ (80018a4 <MX_TIM8_Init+0x138>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017ca:	4b36      	ldr	r3, [pc, #216]	@ (80018a4 <MX_TIM8_Init+0x138>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b34      	ldr	r3, [pc, #208]	@ (80018a4 <MX_TIM8_Init+0x138>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017d6:	4833      	ldr	r0, [pc, #204]	@ (80018a4 <MX_TIM8_Init+0x138>)
 80017d8:	f001 fc3e 	bl	8003058 <HAL_TIM_Base_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80017e2:	f000 f8e1 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80017ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017f0:	4619      	mov	r1, r3
 80017f2:	482c      	ldr	r0, [pc, #176]	@ (80018a4 <MX_TIM8_Init+0x138>)
 80017f4:	f002 f9e2 	bl	8003bbc <HAL_TIM_ConfigClockSource>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80017fe:	f000 f8d3 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001802:	4828      	ldr	r0, [pc, #160]	@ (80018a4 <MX_TIM8_Init+0x138>)
 8001804:	f001 fce8 	bl	80031d8 <HAL_TIM_PWM_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800180e:	f000 f8cb 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800181a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800181e:	4619      	mov	r1, r3
 8001820:	4820      	ldr	r0, [pc, #128]	@ (80018a4 <MX_TIM8_Init+0x138>)
 8001822:	f002 ff3b 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800182c:	f000 f8bc 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001830:	2360      	movs	r3, #96	@ 0x60
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800184c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001850:	2204      	movs	r2, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4813      	ldr	r0, [pc, #76]	@ (80018a4 <MX_TIM8_Init+0x138>)
 8001856:	f002 f8ef 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001860:	f000 f8a2 	bl	80019a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800187c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <MX_TIM8_Init+0x138>)
 8001888:	f002 ff84 	bl	8004794 <HAL_TIMEx_ConfigBreakDeadTime>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8001892:	f000 f889 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001896:	4803      	ldr	r0, [pc, #12]	@ (80018a4 <MX_TIM8_Init+0x138>)
 8001898:	f000 f948 	bl	8001b2c <HAL_TIM_MspPostInit>

}
 800189c:	bf00      	nop
 800189e:	3758      	adds	r7, #88	@ 0x58
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000188 	.word	0x20000188
 80018a8:	40010400 	.word	0x40010400

080018ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	@ 0x28
 80018b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <MX_GPIO_Init+0xb8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a26      	ldr	r2, [pc, #152]	@ (8001964 <MX_GPIO_Init+0xb8>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <MX_GPIO_Init+0xb8>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <MX_GPIO_Init+0xb8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001964 <MX_GPIO_Init+0xb8>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <MX_GPIO_Init+0xb8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <MX_GPIO_Init+0xb8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a18      	ldr	r2, [pc, #96]	@ (8001964 <MX_GPIO_Init+0xb8>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <MX_GPIO_Init+0xb8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <MX_GPIO_Init+0xb8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a11      	ldr	r2, [pc, #68]	@ (8001964 <MX_GPIO_Init+0xb8>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <MX_GPIO_Init+0xb8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LeftWheel_IN1_Pin|LeftWheel_IN2_Pin|RightWheel_IN3_Pin|RightWheel_IN4_Pin
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 8001938:	480b      	ldr	r0, [pc, #44]	@ (8001968 <MX_GPIO_Init+0xbc>)
 800193a:	f000 fd1d 	bl	8002378 <HAL_GPIO_WritePin>
                          |Sens_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LeftWheel_IN1_Pin LeftWheel_IN2_Pin RightWheel_IN3_Pin RightWheel_IN4_Pin
                           Sens_Pin */
  GPIO_InitStruct.Pin = LeftWheel_IN1_Pin|LeftWheel_IN2_Pin|RightWheel_IN3_Pin|RightWheel_IN4_Pin
 800193e:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 8001942:	617b      	str	r3, [r7, #20]
                          |Sens_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4804      	ldr	r0, [pc, #16]	@ (8001968 <MX_GPIO_Init+0xbc>)
 8001958:	f000 fb7a 	bl	8002050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	@ 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000

0800196c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	state_machine();
 8001974:	f7ff fa74 	bl	8000e60 <state_machine>
    osDelay(200);
 8001978:	20c8      	movs	r0, #200	@ 0xc8
 800197a:	f003 f891 	bl	8004aa0 <osDelay>
	state_machine();
 800197e:	bf00      	nop
 8001980:	e7f8      	b.n	8001974 <StartDefaultTask+0x8>
	...

08001984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001996:	f000 fa59 	bl	8001e4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40000800 	.word	0x40000800

080019a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
}
 80019ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <Error_Handler+0x8>

080019b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_MspInit+0x54>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	4a11      	ldr	r2, [pc, #68]	@ (8001a08 <HAL_MspInit+0x54>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <HAL_MspInit+0x54>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_MspInit+0x54>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_MspInit+0x54>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e6:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_MspInit+0x54>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	210f      	movs	r1, #15
 80019f6:	f06f 0001 	mvn.w	r0, #1
 80019fa:	f000 faff 	bl	8001ffc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	@ 0x30
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a3b      	ldr	r2, [pc, #236]	@ (8001b18 <HAL_TIM_Base_MspInit+0x10c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10e      	bne.n	8001a4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	4b3a      	ldr	r3, [pc, #232]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	4a39      	ldr	r2, [pc, #228]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3e:	4b37      	ldr	r3, [pc, #220]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001a4a:	e060      	b.n	8001b0e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a54:	d10e      	bne.n	8001a74 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	4b30      	ldr	r3, [pc, #192]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	4a2f      	ldr	r2, [pc, #188]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a66:	4b2d      	ldr	r3, [pc, #180]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
}
 8001a72:	e04c      	b.n	8001b0e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a29      	ldr	r2, [pc, #164]	@ (8001b20 <HAL_TIM_Base_MspInit+0x114>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d134      	bne.n	8001ae8 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b26      	ldr	r3, [pc, #152]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	4a25      	ldr	r2, [pc, #148]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8e:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aca:	f107 031c 	add.w	r3, r7, #28
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4814      	ldr	r0, [pc, #80]	@ (8001b24 <HAL_TIM_Base_MspInit+0x118>)
 8001ad2:	f000 fabd 	bl	8002050 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2105      	movs	r1, #5
 8001ada:	201d      	movs	r0, #29
 8001adc:	f000 fa8e 	bl	8001ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ae0:	201d      	movs	r0, #29
 8001ae2:	f000 faa7 	bl	8002034 <HAL_NVIC_EnableIRQ>
}
 8001ae6:	e012      	b.n	8001b0e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0e      	ldr	r2, [pc, #56]	@ (8001b28 <HAL_TIM_Base_MspInit+0x11c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10d      	bne.n	8001b0e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_TIM_Base_MspInit+0x110>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
}
 8001b0e:	bf00      	nop
 8001b10:	3730      	adds	r7, #48	@ 0x30
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a36      	ldr	r2, [pc, #216]	@ (8001c24 <HAL_TIM_MspPostInit+0xf8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d11f      	bne.n	8001b8e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b35      	ldr	r3, [pc, #212]	@ (8001c28 <HAL_TIM_MspPostInit+0xfc>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a34      	ldr	r2, [pc, #208]	@ (8001c28 <HAL_TIM_MspPostInit+0xfc>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b32      	ldr	r3, [pc, #200]	@ (8001c28 <HAL_TIM_MspPostInit+0xfc>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	4829      	ldr	r0, [pc, #164]	@ (8001c2c <HAL_TIM_MspPostInit+0x100>)
 8001b88:	f000 fa62 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b8c:	e046      	b.n	8001c1c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b96:	d11e      	bne.n	8001bd6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <HAL_TIM_MspPostInit+0xfc>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	4a21      	ldr	r2, [pc, #132]	@ (8001c28 <HAL_TIM_MspPostInit+0xfc>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <HAL_TIM_MspPostInit+0xfc>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4817      	ldr	r0, [pc, #92]	@ (8001c2c <HAL_TIM_MspPostInit+0x100>)
 8001bd0:	f000 fa3e 	bl	8002050 <HAL_GPIO_Init>
}
 8001bd4:	e022      	b.n	8001c1c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM8)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a15      	ldr	r2, [pc, #84]	@ (8001c30 <HAL_TIM_MspPostInit+0x104>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d11d      	bne.n	8001c1c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	4b10      	ldr	r3, [pc, #64]	@ (8001c28 <HAL_TIM_MspPostInit+0xfc>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <HAL_TIM_MspPostInit+0xfc>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <HAL_TIM_MspPostInit+0xfc>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bfc:	2380      	movs	r3, #128	@ 0x80
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	4807      	ldr	r0, [pc, #28]	@ (8001c34 <HAL_TIM_MspPostInit+0x108>)
 8001c18:	f000 fa1a 	bl	8002050 <HAL_GPIO_Init>
}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	@ 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40010000 	.word	0x40010000
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40010400 	.word	0x40010400
 8001c34:	40020800 	.word	0x40020800

08001c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08e      	sub	sp, #56	@ 0x38
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	4b33      	ldr	r3, [pc, #204]	@ (8001d1c <HAL_InitTick+0xe4>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	4a32      	ldr	r2, [pc, #200]	@ (8001d1c <HAL_InitTick+0xe4>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c58:	4b30      	ldr	r3, [pc, #192]	@ (8001d1c <HAL_InitTick+0xe4>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c64:	f107 0210 	add.w	r2, r7, #16
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fcf2 	bl	8002658 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c7e:	f000 fcd7 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 8001c82:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c84:	e004      	b.n	8001c90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c86:	f000 fcd3 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c92:	4a23      	ldr	r2, [pc, #140]	@ (8001d20 <HAL_InitTick+0xe8>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	0c9b      	lsrs	r3, r3, #18
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001c9e:	4b21      	ldr	r3, [pc, #132]	@ (8001d24 <HAL_InitTick+0xec>)
 8001ca0:	4a21      	ldr	r2, [pc, #132]	@ (8001d28 <HAL_InitTick+0xf0>)
 8001ca2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <HAL_InitTick+0xec>)
 8001ca6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001caa:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001cac:	4a1d      	ldr	r2, [pc, #116]	@ (8001d24 <HAL_InitTick+0xec>)
 8001cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb0:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <HAL_InitTick+0xec>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <HAL_InitTick+0xec>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_InitTick+0xec>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001cc4:	4817      	ldr	r0, [pc, #92]	@ (8001d24 <HAL_InitTick+0xec>)
 8001cc6:	f001 f9c7 	bl	8003058 <HAL_TIM_Base_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001cd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001cd8:	4812      	ldr	r0, [pc, #72]	@ (8001d24 <HAL_InitTick+0xec>)
 8001cda:	f001 fa0d 	bl	80030f8 <HAL_TIM_Base_Start_IT>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d111      	bne.n	8001d10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cec:	201e      	movs	r0, #30
 8001cee:	f000 f9a1 	bl	8002034 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d808      	bhi.n	8001d0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	201e      	movs	r0, #30
 8001cfe:	f000 f97d 	bl	8001ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <HAL_InitTick+0xf4>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e002      	b.n	8001d10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3738      	adds	r7, #56	@ 0x38
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	431bde83 	.word	0x431bde83
 8001d24:	200001d4 	.word	0x200001d4
 8001d28:	40000800 	.word	0x40000800
 8001d2c:	20000004 	.word	0x20000004

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <NMI_Handler+0x4>

08001d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <MemManage_Handler+0x4>

08001d48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <TIM3_IRQHandler+0x10>)
 8001d6e:	f001 fcd7 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000140 	.word	0x20000140

08001d7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d80:	4802      	ldr	r0, [pc, #8]	@ (8001d8c <TIM4_IRQHandler+0x10>)
 8001d82:	f001 fccd 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200001d4 	.word	0x200001d4

08001d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <SystemInit+0x20>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <SystemInit+0x20>)
 8001d9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001db8:	f7ff ffea 	bl	8001d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dbe:	490d      	ldr	r1, [pc, #52]	@ (8001df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001de2:	f005 fb8f 	bl	8007504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de6:	f7ff fa8d 	bl	8001304 <main>
  bx  lr    
 8001dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001df8:	080076a0 	.word	0x080076a0
  ldr r2, =_sbss
 8001dfc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001e00:	20004d48 	.word	0x20004d48

08001e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0d      	ldr	r2, [pc, #52]	@ (8001e48 <HAL_Init+0x40>)
 8001e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e18:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <HAL_Init+0x40>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	@ (8001e48 <HAL_Init+0x40>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f8d8 	bl	8001fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f7ff fefe 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff fdba 	bl	80019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_IncTick+0x20>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_IncTick+0x24>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a04      	ldr	r2, [pc, #16]	@ (8001e70 <HAL_IncTick+0x24>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	2000021c 	.word	0x2000021c

08001e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b03      	ldr	r3, [pc, #12]	@ (8001e88 <HAL_GetTick+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	2000021c 	.word	0x2000021c

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	@ (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	db0b      	blt.n	8001f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	4907      	ldr	r1, [pc, #28]	@ (8001f28 <__NVIC_EnableIRQ+0x38>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2001      	movs	r0, #1
 8001f12:	fa00 f202 	lsl.w	r2, r0, r2
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	@ (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	@ (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	@ 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ff4c 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200e:	f7ff ff61 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 8002012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68b9      	ldr	r1, [r7, #8]
 8002018:	6978      	ldr	r0, [r7, #20]
 800201a:	f7ff ffb1 	bl	8001f80 <NVIC_EncodePriority>
 800201e:	4602      	mov	r2, r0
 8002020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff80 	bl	8001f2c <__NVIC_SetPriority>
}
 800202c:	bf00      	nop
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff54 	bl	8001ef0 <__NVIC_EnableIRQ>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	@ 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e165      	b.n	8002338 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	f040 8154 	bne.w	8002332 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d005      	beq.n	80020a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d130      	bne.n	8002104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0201 	and.w	r2, r3, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b03      	cmp	r3, #3
 800210e:	d017      	beq.n	8002140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d123      	bne.n	8002194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	220f      	movs	r2, #15
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	69b9      	ldr	r1, [r7, #24]
 8002190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80ae 	beq.w	8002332 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b5d      	ldr	r3, [pc, #372]	@ (8002350 <HAL_GPIO_Init+0x300>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	4a5c      	ldr	r2, [pc, #368]	@ (8002350 <HAL_GPIO_Init+0x300>)
 80021e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002350 <HAL_GPIO_Init+0x300>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f2:	4a58      	ldr	r2, [pc, #352]	@ (8002354 <HAL_GPIO_Init+0x304>)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	3302      	adds	r3, #2
 80021fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	220f      	movs	r2, #15
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4f      	ldr	r2, [pc, #316]	@ (8002358 <HAL_GPIO_Init+0x308>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d025      	beq.n	800226a <HAL_GPIO_Init+0x21a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4e      	ldr	r2, [pc, #312]	@ (800235c <HAL_GPIO_Init+0x30c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01f      	beq.n	8002266 <HAL_GPIO_Init+0x216>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4d      	ldr	r2, [pc, #308]	@ (8002360 <HAL_GPIO_Init+0x310>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <HAL_GPIO_Init+0x212>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4c      	ldr	r2, [pc, #304]	@ (8002364 <HAL_GPIO_Init+0x314>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x20e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4b      	ldr	r2, [pc, #300]	@ (8002368 <HAL_GPIO_Init+0x318>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x20a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4a      	ldr	r2, [pc, #296]	@ (800236c <HAL_GPIO_Init+0x31c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x206>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a49      	ldr	r2, [pc, #292]	@ (8002370 <HAL_GPIO_Init+0x320>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x202>
 800224e:	2306      	movs	r3, #6
 8002250:	e00c      	b.n	800226c <HAL_GPIO_Init+0x21c>
 8002252:	2307      	movs	r3, #7
 8002254:	e00a      	b.n	800226c <HAL_GPIO_Init+0x21c>
 8002256:	2305      	movs	r3, #5
 8002258:	e008      	b.n	800226c <HAL_GPIO_Init+0x21c>
 800225a:	2304      	movs	r3, #4
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x21c>
 800225e:	2303      	movs	r3, #3
 8002260:	e004      	b.n	800226c <HAL_GPIO_Init+0x21c>
 8002262:	2302      	movs	r3, #2
 8002264:	e002      	b.n	800226c <HAL_GPIO_Init+0x21c>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_GPIO_Init+0x21c>
 800226a:	2300      	movs	r3, #0
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	f002 0203 	and.w	r2, r2, #3
 8002272:	0092      	lsls	r2, r2, #2
 8002274:	4093      	lsls	r3, r2
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800227c:	4935      	ldr	r1, [pc, #212]	@ (8002354 <HAL_GPIO_Init+0x304>)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800228a:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <HAL_GPIO_Init+0x324>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ae:	4a31      	ldr	r2, [pc, #196]	@ (8002374 <HAL_GPIO_Init+0x324>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002374 <HAL_GPIO_Init+0x324>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d8:	4a26      	ldr	r2, [pc, #152]	@ (8002374 <HAL_GPIO_Init+0x324>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022de:	4b25      	ldr	r3, [pc, #148]	@ (8002374 <HAL_GPIO_Init+0x324>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002302:	4a1c      	ldr	r2, [pc, #112]	@ (8002374 <HAL_GPIO_Init+0x324>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002308:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <HAL_GPIO_Init+0x324>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800232c:	4a11      	ldr	r2, [pc, #68]	@ (8002374 <HAL_GPIO_Init+0x324>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3301      	adds	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	f67f ae96 	bls.w	800206c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3724      	adds	r7, #36	@ 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40013800 	.word	0x40013800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020400 	.word	0x40020400
 8002360:	40020800 	.word	0x40020800
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40021400 	.word	0x40021400
 8002370:	40021800 	.word	0x40021800
 8002374:	40013c00 	.word	0x40013c00

08002378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
 8002384:	4613      	mov	r3, r2
 8002386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002388:	787b      	ldrb	r3, [r7, #1]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002394:	e003      	b.n	800239e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	041a      	lsls	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	619a      	str	r2, [r3, #24]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4b20      	ldr	r3, [pc, #128]	@ (800243c <HAL_PWREx_EnableOverDrive+0x90>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	4a1f      	ldr	r2, [pc, #124]	@ (800243c <HAL_PWREx_EnableOverDrive+0x90>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c6:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <HAL_PWREx_EnableOverDrive+0x90>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_PWREx_EnableOverDrive+0x94>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d8:	f7ff fd4c 	bl	8001e74 <HAL_GetTick>
 80023dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023de:	e009      	b.n	80023f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023e0:	f7ff fd48 	bl	8001e74 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023ee:	d901      	bls.n	80023f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e01f      	b.n	8002434 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023f4:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <HAL_PWREx_EnableOverDrive+0x98>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002400:	d1ee      	bne.n	80023e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002408:	f7ff fd34 	bl	8001e74 <HAL_GetTick>
 800240c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800240e:	e009      	b.n	8002424 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002410:	f7ff fd30 	bl	8001e74 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800241e:	d901      	bls.n	8002424 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e007      	b.n	8002434 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002424:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <HAL_PWREx_EnableOverDrive+0x98>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002430:	d1ee      	bne.n	8002410 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40023800 	.word	0x40023800
 8002440:	420e0040 	.word	0x420e0040
 8002444:	40007000 	.word	0x40007000
 8002448:	420e0044 	.word	0x420e0044

0800244c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0cc      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b68      	ldr	r3, [pc, #416]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d90c      	bls.n	8002488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b65      	ldr	r3, [pc, #404]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b63      	ldr	r3, [pc, #396]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0b8      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a0:	4b59      	ldr	r3, [pc, #356]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a58      	ldr	r2, [pc, #352]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b8:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a52      	ldr	r2, [pc, #328]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c4:	4b50      	ldr	r3, [pc, #320]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	494d      	ldr	r1, [pc, #308]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d044      	beq.n	800256c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b47      	ldr	r3, [pc, #284]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d119      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e07f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d003      	beq.n	800250a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002506:	2b03      	cmp	r3, #3
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	4b3f      	ldr	r3, [pc, #252]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e06f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	4b3b      	ldr	r3, [pc, #236]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e067      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b37      	ldr	r3, [pc, #220]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4934      	ldr	r1, [pc, #208]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800253c:	f7ff fc9a 	bl	8001e74 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7ff fc96 	bl	8001e74 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e04f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b2b      	ldr	r3, [pc, #172]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b25      	ldr	r3, [pc, #148]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d20c      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e032      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a0:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4916      	ldr	r1, [pc, #88]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	490e      	ldr	r1, [pc, #56]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d2:	f000 f873 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	490a      	ldr	r1, [pc, #40]	@ (800260c <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	5ccb      	ldrb	r3, [r1, r3]
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	4a09      	ldr	r2, [pc, #36]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ee:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fb20 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023c00 	.word	0x40023c00
 8002608:	40023800 	.word	0x40023800
 800260c:	08007678 	.word	0x08007678
 8002610:	20000000 	.word	0x20000000
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800261c:	4b03      	ldr	r3, [pc, #12]	@ (800262c <HAL_RCC_GetHCLKFreq+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000000 	.word	0x20000000

08002630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002634:	f7ff fff0 	bl	8002618 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	0a9b      	lsrs	r3, r3, #10
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	@ (8002654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	08007688 	.word	0x08007688

08002658 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	220f      	movs	r2, #15
 8002666:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002668:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <HAL_RCC_GetClockConfig+0x5c>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0203 	and.w	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002674:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002680:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800268c:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <HAL_RCC_GetClockConfig+0x5c>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	08db      	lsrs	r3, r3, #3
 8002692:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800269a:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <HAL_RCC_GetClockConfig+0x60>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 020f 	and.w	r2, r3, #15
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	601a      	str	r2, [r3, #0]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40023c00 	.word	0x40023c00

080026bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c0:	b0ae      	sub	sp, #184	@ 0xb8
 80026c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e2:	4bcb      	ldr	r3, [pc, #812]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x354>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	f200 8206 	bhi.w	8002afc <HAL_RCC_GetSysClockFreq+0x440>
 80026f0:	a201      	add	r2, pc, #4	@ (adr r2, 80026f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f6:	bf00      	nop
 80026f8:	0800272d 	.word	0x0800272d
 80026fc:	08002afd 	.word	0x08002afd
 8002700:	08002afd 	.word	0x08002afd
 8002704:	08002afd 	.word	0x08002afd
 8002708:	08002735 	.word	0x08002735
 800270c:	08002afd 	.word	0x08002afd
 8002710:	08002afd 	.word	0x08002afd
 8002714:	08002afd 	.word	0x08002afd
 8002718:	0800273d 	.word	0x0800273d
 800271c:	08002afd 	.word	0x08002afd
 8002720:	08002afd 	.word	0x08002afd
 8002724:	08002afd 	.word	0x08002afd
 8002728:	0800292d 	.word	0x0800292d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4bb9      	ldr	r3, [pc, #740]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x358>)
 800272e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002732:	e1e7      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002734:	4bb8      	ldr	r3, [pc, #736]	@ (8002a18 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800273a:	e1e3      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800273c:	4bb4      	ldr	r3, [pc, #720]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002748:	4bb1      	ldr	r3, [pc, #708]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d071      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002754:	4bae      	ldr	r3, [pc, #696]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	099b      	lsrs	r3, r3, #6
 800275a:	2200      	movs	r2, #0
 800275c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002760:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002776:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800277a:	4622      	mov	r2, r4
 800277c:	462b      	mov	r3, r5
 800277e:	f04f 0000 	mov.w	r0, #0
 8002782:	f04f 0100 	mov.w	r1, #0
 8002786:	0159      	lsls	r1, r3, #5
 8002788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800278c:	0150      	lsls	r0, r2, #5
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4621      	mov	r1, r4
 8002794:	1a51      	subs	r1, r2, r1
 8002796:	6439      	str	r1, [r7, #64]	@ 0x40
 8002798:	4629      	mov	r1, r5
 800279a:	eb63 0301 	sbc.w	r3, r3, r1
 800279e:	647b      	str	r3, [r7, #68]	@ 0x44
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80027ac:	4649      	mov	r1, r9
 80027ae:	018b      	lsls	r3, r1, #6
 80027b0:	4641      	mov	r1, r8
 80027b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027b6:	4641      	mov	r1, r8
 80027b8:	018a      	lsls	r2, r1, #6
 80027ba:	4641      	mov	r1, r8
 80027bc:	1a51      	subs	r1, r2, r1
 80027be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027c0:	4649      	mov	r1, r9
 80027c2:	eb63 0301 	sbc.w	r3, r3, r1
 80027c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80027d4:	4649      	mov	r1, r9
 80027d6:	00cb      	lsls	r3, r1, #3
 80027d8:	4641      	mov	r1, r8
 80027da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027de:	4641      	mov	r1, r8
 80027e0:	00ca      	lsls	r2, r1, #3
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	4622      	mov	r2, r4
 80027ea:	189b      	adds	r3, r3, r2
 80027ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80027ee:	462b      	mov	r3, r5
 80027f0:	460a      	mov	r2, r1
 80027f2:	eb42 0303 	adc.w	r3, r2, r3
 80027f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002804:	4629      	mov	r1, r5
 8002806:	024b      	lsls	r3, r1, #9
 8002808:	4621      	mov	r1, r4
 800280a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800280e:	4621      	mov	r1, r4
 8002810:	024a      	lsls	r2, r1, #9
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800281a:	2200      	movs	r2, #0
 800281c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002820:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002824:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002828:	f7fe f8e0 	bl	80009ec <__aeabi_uldivmod>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4613      	mov	r3, r2
 8002832:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002836:	e067      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002838:	4b75      	ldr	r3, [pc, #468]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	2200      	movs	r2, #0
 8002840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002844:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002848:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800284c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002850:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002852:	2300      	movs	r3, #0
 8002854:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002856:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800285a:	4622      	mov	r2, r4
 800285c:	462b      	mov	r3, r5
 800285e:	f04f 0000 	mov.w	r0, #0
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	0159      	lsls	r1, r3, #5
 8002868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286c:	0150      	lsls	r0, r2, #5
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4621      	mov	r1, r4
 8002874:	1a51      	subs	r1, r2, r1
 8002876:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002878:	4629      	mov	r1, r5
 800287a:	eb63 0301 	sbc.w	r3, r3, r1
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800288c:	4649      	mov	r1, r9
 800288e:	018b      	lsls	r3, r1, #6
 8002890:	4641      	mov	r1, r8
 8002892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002896:	4641      	mov	r1, r8
 8002898:	018a      	lsls	r2, r1, #6
 800289a:	4641      	mov	r1, r8
 800289c:	ebb2 0a01 	subs.w	sl, r2, r1
 80028a0:	4649      	mov	r1, r9
 80028a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ba:	4692      	mov	sl, r2
 80028bc:	469b      	mov	fp, r3
 80028be:	4623      	mov	r3, r4
 80028c0:	eb1a 0303 	adds.w	r3, sl, r3
 80028c4:	623b      	str	r3, [r7, #32]
 80028c6:	462b      	mov	r3, r5
 80028c8:	eb4b 0303 	adc.w	r3, fp, r3
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028da:	4629      	mov	r1, r5
 80028dc:	028b      	lsls	r3, r1, #10
 80028de:	4621      	mov	r1, r4
 80028e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028e4:	4621      	mov	r1, r4
 80028e6:	028a      	lsls	r2, r1, #10
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028f0:	2200      	movs	r2, #0
 80028f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80028f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80028f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80028fa:	f7fe f877 	bl	80009ec <__aeabi_uldivmod>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4613      	mov	r3, r2
 8002904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002908:	4b41      	ldr	r3, [pc, #260]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	0c1b      	lsrs	r3, r3, #16
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	3301      	adds	r3, #1
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800291a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800291e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
 8002926:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800292a:	e0eb      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800292c:	4b38      	ldr	r3, [pc, #224]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002934:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002938:	4b35      	ldr	r3, [pc, #212]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d06b      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002944:	4b32      	ldr	r3, [pc, #200]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	2200      	movs	r2, #0
 800294c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800294e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002950:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002956:	663b      	str	r3, [r7, #96]	@ 0x60
 8002958:	2300      	movs	r3, #0
 800295a:	667b      	str	r3, [r7, #100]	@ 0x64
 800295c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002960:	4622      	mov	r2, r4
 8002962:	462b      	mov	r3, r5
 8002964:	f04f 0000 	mov.w	r0, #0
 8002968:	f04f 0100 	mov.w	r1, #0
 800296c:	0159      	lsls	r1, r3, #5
 800296e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002972:	0150      	lsls	r0, r2, #5
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4621      	mov	r1, r4
 800297a:	1a51      	subs	r1, r2, r1
 800297c:	61b9      	str	r1, [r7, #24]
 800297e:	4629      	mov	r1, r5
 8002980:	eb63 0301 	sbc.w	r3, r3, r1
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002992:	4659      	mov	r1, fp
 8002994:	018b      	lsls	r3, r1, #6
 8002996:	4651      	mov	r1, sl
 8002998:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800299c:	4651      	mov	r1, sl
 800299e:	018a      	lsls	r2, r1, #6
 80029a0:	4651      	mov	r1, sl
 80029a2:	ebb2 0801 	subs.w	r8, r2, r1
 80029a6:	4659      	mov	r1, fp
 80029a8:	eb63 0901 	sbc.w	r9, r3, r1
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029c0:	4690      	mov	r8, r2
 80029c2:	4699      	mov	r9, r3
 80029c4:	4623      	mov	r3, r4
 80029c6:	eb18 0303 	adds.w	r3, r8, r3
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	462b      	mov	r3, r5
 80029ce:	eb49 0303 	adc.w	r3, r9, r3
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029e0:	4629      	mov	r1, r5
 80029e2:	024b      	lsls	r3, r1, #9
 80029e4:	4621      	mov	r1, r4
 80029e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029ea:	4621      	mov	r1, r4
 80029ec:	024a      	lsls	r2, r1, #9
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029f6:	2200      	movs	r2, #0
 80029f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a00:	f7fd fff4 	bl	80009ec <__aeabi_uldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4613      	mov	r3, r2
 8002a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a0e:	e065      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x420>
 8002a10:	40023800 	.word	0x40023800
 8002a14:	00f42400 	.word	0x00f42400
 8002a18:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	2200      	movs	r2, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	4611      	mov	r1, r2
 8002a28:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a2e:	2300      	movs	r3, #0
 8002a30:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002a36:	4642      	mov	r2, r8
 8002a38:	464b      	mov	r3, r9
 8002a3a:	f04f 0000 	mov.w	r0, #0
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	0159      	lsls	r1, r3, #5
 8002a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a48:	0150      	lsls	r0, r2, #5
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4641      	mov	r1, r8
 8002a50:	1a51      	subs	r1, r2, r1
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	4649      	mov	r1, r9
 8002a56:	eb63 0301 	sbc.w	r3, r3, r1
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a68:	4659      	mov	r1, fp
 8002a6a:	018b      	lsls	r3, r1, #6
 8002a6c:	4651      	mov	r1, sl
 8002a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a72:	4651      	mov	r1, sl
 8002a74:	018a      	lsls	r2, r1, #6
 8002a76:	4651      	mov	r1, sl
 8002a78:	1a54      	subs	r4, r2, r1
 8002a7a:	4659      	mov	r1, fp
 8002a7c:	eb63 0501 	sbc.w	r5, r3, r1
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	00eb      	lsls	r3, r5, #3
 8002a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a8e:	00e2      	lsls	r2, r4, #3
 8002a90:	4614      	mov	r4, r2
 8002a92:	461d      	mov	r5, r3
 8002a94:	4643      	mov	r3, r8
 8002a96:	18e3      	adds	r3, r4, r3
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	464b      	mov	r3, r9
 8002a9c:	eb45 0303 	adc.w	r3, r5, r3
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aae:	4629      	mov	r1, r5
 8002ab0:	028b      	lsls	r3, r1, #10
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab8:	4621      	mov	r1, r4
 8002aba:	028a      	lsls	r2, r1, #10
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ac8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002aca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ace:	f7fd ff8d 	bl	80009ec <__aeabi_uldivmod>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002adc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	0f1b      	lsrs	r3, r3, #28
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002afa:	e003      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002afe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	37b8      	adds	r7, #184	@ 0xb8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	00f42400 	.word	0x00f42400

08002b1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e28d      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8083 	beq.w	8002c42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b3c:	4b94      	ldr	r3, [pc, #592]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d019      	beq.n	8002b7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b48:	4b91      	ldr	r3, [pc, #580]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b54:	4b8e      	ldr	r3, [pc, #568]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b60:	d00c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b62:	4b8b      	ldr	r3, [pc, #556]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d112      	bne.n	8002b94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6e:	4b88      	ldr	r3, [pc, #544]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b7a:	d10b      	bne.n	8002b94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	4b84      	ldr	r3, [pc, #528]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05b      	beq.n	8002c40 <HAL_RCC_OscConfig+0x124>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d157      	bne.n	8002c40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e25a      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b9c:	d106      	bne.n	8002bac <HAL_RCC_OscConfig+0x90>
 8002b9e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a7b      	ldr	r2, [pc, #492]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e01d      	b.n	8002be8 <HAL_RCC_OscConfig+0xcc>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0xb4>
 8002bb6:	4b76      	ldr	r3, [pc, #472]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a75      	ldr	r2, [pc, #468]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b73      	ldr	r3, [pc, #460]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a72      	ldr	r2, [pc, #456]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0xcc>
 8002bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a6e      	ldr	r2, [pc, #440]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6b      	ldr	r2, [pc, #428]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f940 	bl	8001e74 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7ff f93c 	bl	8001e74 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	@ 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e21f      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b61      	ldr	r3, [pc, #388]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xdc>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7ff f92c 	bl	8001e74 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c20:	f7ff f928 	bl	8001e74 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	@ 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e20b      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c32:	4b57      	ldr	r3, [pc, #348]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x104>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d06f      	beq.n	8002d2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c4e:	4b50      	ldr	r3, [pc, #320]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d017      	beq.n	8002c8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d105      	bne.n	8002c72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c66:	4b4a      	ldr	r3, [pc, #296]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b47      	ldr	r3, [pc, #284]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b44      	ldr	r3, [pc, #272]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	4b41      	ldr	r3, [pc, #260]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x186>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e1d3      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4937      	ldr	r1, [pc, #220]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	e03a      	b.n	8002d2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc0:	4b34      	ldr	r3, [pc, #208]	@ (8002d94 <HAL_RCC_OscConfig+0x278>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7ff f8d5 	bl	8001e74 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cce:	f7ff f8d1 	bl	8001e74 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e1b4      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cec:	4b28      	ldr	r3, [pc, #160]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4925      	ldr	r1, [pc, #148]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]
 8002d00:	e015      	b.n	8002d2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d02:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <HAL_RCC_OscConfig+0x278>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7ff f8b4 	bl	8001e74 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d10:	f7ff f8b0 	bl	8001e74 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e193      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	4b1b      	ldr	r3, [pc, #108]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d036      	beq.n	8002da8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d42:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <HAL_RCC_OscConfig+0x27c>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7ff f894 	bl	8001e74 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d50:	f7ff f890 	bl	8001e74 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e173      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x234>
 8002d6e:	e01b      	b.n	8002da8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d70:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <HAL_RCC_OscConfig+0x27c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d76:	f7ff f87d 	bl	8001e74 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	e00e      	b.n	8002d9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7e:	f7ff f879 	bl	8001e74 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d907      	bls.n	8002d9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e15c      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
 8002d90:	40023800 	.word	0x40023800
 8002d94:	42470000 	.word	0x42470000
 8002d98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9c:	4b8a      	ldr	r3, [pc, #552]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1ea      	bne.n	8002d7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8097 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dba:	4b83      	ldr	r3, [pc, #524]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10f      	bne.n	8002de6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	4b7f      	ldr	r3, [pc, #508]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	4a7e      	ldr	r2, [pc, #504]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd6:	4b7c      	ldr	r3, [pc, #496]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de2:	2301      	movs	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de6:	4b79      	ldr	r3, [pc, #484]	@ (8002fcc <HAL_RCC_OscConfig+0x4b0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d118      	bne.n	8002e24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df2:	4b76      	ldr	r3, [pc, #472]	@ (8002fcc <HAL_RCC_OscConfig+0x4b0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a75      	ldr	r2, [pc, #468]	@ (8002fcc <HAL_RCC_OscConfig+0x4b0>)
 8002df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfe:	f7ff f839 	bl	8001e74 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e06:	f7ff f835 	bl	8001e74 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e118      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	4b6c      	ldr	r3, [pc, #432]	@ (8002fcc <HAL_RCC_OscConfig+0x4b0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x31e>
 8002e2c:	4b66      	ldr	r3, [pc, #408]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e30:	4a65      	ldr	r2, [pc, #404]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e38:	e01c      	b.n	8002e74 <HAL_RCC_OscConfig+0x358>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x340>
 8002e42:	4b61      	ldr	r3, [pc, #388]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e46:	4a60      	ldr	r2, [pc, #384]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4e:	4b5e      	ldr	r3, [pc, #376]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	4a5d      	ldr	r2, [pc, #372]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_OscConfig+0x358>
 8002e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e60:	4a59      	ldr	r2, [pc, #356]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e68:	4b57      	ldr	r3, [pc, #348]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6c:	4a56      	ldr	r2, [pc, #344]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002e6e:	f023 0304 	bic.w	r3, r3, #4
 8002e72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7fe fffa 	bl	8001e74 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7fe fff6 	bl	8001e74 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e0d7      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9a:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0ee      	beq.n	8002e84 <HAL_RCC_OscConfig+0x368>
 8002ea6:	e014      	b.n	8002ed2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe ffe4 	bl	8001e74 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fe ffe0 	bl	8001e74 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e0c1      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec6:	4b40      	ldr	r3, [pc, #256]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1ee      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d105      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	4a3a      	ldr	r2, [pc, #232]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002ede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ee2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80ad 	beq.w	8003048 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eee:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d060      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d145      	bne.n	8002f8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	4b33      	ldr	r3, [pc, #204]	@ (8002fd0 <HAL_RCC_OscConfig+0x4b4>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe ffb4 	bl	8001e74 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe ffb0 	bl	8001e74 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e093      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	4b29      	ldr	r3, [pc, #164]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	019b      	lsls	r3, r3, #6
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	3b01      	subs	r3, #1
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	071b      	lsls	r3, r3, #28
 8002f5a:	491b      	ldr	r1, [pc, #108]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f60:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <HAL_RCC_OscConfig+0x4b4>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fe ff85 	bl	8001e74 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fe ff81 	bl	8001e74 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e064      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f80:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x452>
 8002f8c:	e05c      	b.n	8003048 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <HAL_RCC_OscConfig+0x4b4>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe ff6e 	bl	8001e74 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fe ff6a 	bl	8001e74 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e04d      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x480>
 8002fba:	e045      	b.n	8003048 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e040      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8003054 <HAL_RCC_OscConfig+0x538>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d030      	beq.n	8003044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d129      	bne.n	8003044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d122      	bne.n	8003044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800300a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800300c:	4293      	cmp	r3, r2
 800300e:	d119      	bne.n	8003044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	3b01      	subs	r3, #1
 800301e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d10f      	bne.n	8003044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800

08003058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e041      	b.n	80030ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe fcc4 	bl	8001a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f000 feba 	bl	8003e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d001      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e04e      	b.n	80031ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a23      	ldr	r2, [pc, #140]	@ (80031bc <HAL_TIM_Base_Start_IT+0xc4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d022      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800313a:	d01d      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1f      	ldr	r2, [pc, #124]	@ (80031c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d018      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1e      	ldr	r2, [pc, #120]	@ (80031c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1c      	ldr	r2, [pc, #112]	@ (80031c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00e      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1b      	ldr	r2, [pc, #108]	@ (80031cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a19      	ldr	r2, [pc, #100]	@ (80031d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a18      	ldr	r2, [pc, #96]	@ (80031d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d111      	bne.n	800319c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b06      	cmp	r3, #6
 8003188:	d010      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319a:	e007      	b.n	80031ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40000800 	.word	0x40000800
 80031c8:	40000c00 	.word	0x40000c00
 80031cc:	40010400 	.word	0x40010400
 80031d0:	40014000 	.word	0x40014000
 80031d4:	40001800 	.word	0x40001800

080031d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e041      	b.n	800326e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f839 	bl	8003276 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f000 fdfa 	bl	8003e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_TIM_PWM_Start+0x24>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e022      	b.n	80032f6 <HAL_TIM_PWM_Start+0x6a>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d109      	bne.n	80032ca <HAL_TIM_PWM_Start+0x3e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	e015      	b.n	80032f6 <HAL_TIM_PWM_Start+0x6a>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d109      	bne.n	80032e4 <HAL_TIM_PWM_Start+0x58>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e008      	b.n	80032f6 <HAL_TIM_PWM_Start+0x6a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07c      	b.n	80033f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <HAL_TIM_PWM_Start+0x82>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800330c:	e013      	b.n	8003336 <HAL_TIM_PWM_Start+0xaa>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d104      	bne.n	800331e <HAL_TIM_PWM_Start+0x92>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800331c:	e00b      	b.n	8003336 <HAL_TIM_PWM_Start+0xaa>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d104      	bne.n	800332e <HAL_TIM_PWM_Start+0xa2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800332c:	e003      	b.n	8003336 <HAL_TIM_PWM_Start+0xaa>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f001 f986 	bl	8004650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2d      	ldr	r2, [pc, #180]	@ (8003400 <HAL_TIM_PWM_Start+0x174>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_TIM_PWM_Start+0xcc>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2c      	ldr	r2, [pc, #176]	@ (8003404 <HAL_TIM_PWM_Start+0x178>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_TIM_PWM_Start+0xd0>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_TIM_PWM_Start+0xd2>
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a22      	ldr	r2, [pc, #136]	@ (8003400 <HAL_TIM_PWM_Start+0x174>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x136>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003384:	d01d      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x136>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1f      	ldr	r2, [pc, #124]	@ (8003408 <HAL_TIM_PWM_Start+0x17c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x136>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1d      	ldr	r2, [pc, #116]	@ (800340c <HAL_TIM_PWM_Start+0x180>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x136>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1c      	ldr	r2, [pc, #112]	@ (8003410 <HAL_TIM_PWM_Start+0x184>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x136>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a16      	ldr	r2, [pc, #88]	@ (8003404 <HAL_TIM_PWM_Start+0x178>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x136>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a18      	ldr	r2, [pc, #96]	@ (8003414 <HAL_TIM_PWM_Start+0x188>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x136>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a16      	ldr	r2, [pc, #88]	@ (8003418 <HAL_TIM_PWM_Start+0x18c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d111      	bne.n	80033e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b06      	cmp	r3, #6
 80033d2:	d010      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	e007      	b.n	80033f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40010000 	.word	0x40010000
 8003404:	40010400 	.word	0x40010400
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800
 8003410:	40000c00 	.word	0x40000c00
 8003414:	40014000 	.word	0x40014000
 8003418:	40001800 	.word	0x40001800

0800341c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e041      	b.n	80034b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f839 	bl	80034ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3304      	adds	r3, #4
 8003458:	4619      	mov	r1, r3
 800345a:	4610      	mov	r0, r2
 800345c:	f000 fcd8 	bl	8003e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_TIM_IC_Start_IT+0x1e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	e013      	b.n	8003516 <HAL_TIM_IC_Start_IT+0x46>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d104      	bne.n	80034fe <HAL_TIM_IC_Start_IT+0x2e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e00b      	b.n	8003516 <HAL_TIM_IC_Start_IT+0x46>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d104      	bne.n	800350e <HAL_TIM_IC_Start_IT+0x3e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e003      	b.n	8003516 <HAL_TIM_IC_Start_IT+0x46>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d104      	bne.n	8003528 <HAL_TIM_IC_Start_IT+0x58>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e013      	b.n	8003550 <HAL_TIM_IC_Start_IT+0x80>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b04      	cmp	r3, #4
 800352c:	d104      	bne.n	8003538 <HAL_TIM_IC_Start_IT+0x68>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e00b      	b.n	8003550 <HAL_TIM_IC_Start_IT+0x80>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d104      	bne.n	8003548 <HAL_TIM_IC_Start_IT+0x78>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003544:	b2db      	uxtb	r3, r3
 8003546:	e003      	b.n	8003550 <HAL_TIM_IC_Start_IT+0x80>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800354e:	b2db      	uxtb	r3, r3
 8003550:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003552:	7bbb      	ldrb	r3, [r7, #14]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d102      	bne.n	800355e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003558:	7b7b      	ldrb	r3, [r7, #13]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d001      	beq.n	8003562 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0cc      	b.n	80036fc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d104      	bne.n	8003572 <HAL_TIM_IC_Start_IT+0xa2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003570:	e013      	b.n	800359a <HAL_TIM_IC_Start_IT+0xca>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b04      	cmp	r3, #4
 8003576:	d104      	bne.n	8003582 <HAL_TIM_IC_Start_IT+0xb2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003580:	e00b      	b.n	800359a <HAL_TIM_IC_Start_IT+0xca>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b08      	cmp	r3, #8
 8003586:	d104      	bne.n	8003592 <HAL_TIM_IC_Start_IT+0xc2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003590:	e003      	b.n	800359a <HAL_TIM_IC_Start_IT+0xca>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <HAL_TIM_IC_Start_IT+0xda>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035a8:	e013      	b.n	80035d2 <HAL_TIM_IC_Start_IT+0x102>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_IC_Start_IT+0xea>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035b8:	e00b      	b.n	80035d2 <HAL_TIM_IC_Start_IT+0x102>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d104      	bne.n	80035ca <HAL_TIM_IC_Start_IT+0xfa>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035c8:	e003      	b.n	80035d2 <HAL_TIM_IC_Start_IT+0x102>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d841      	bhi.n	800365c <HAL_TIM_IC_Start_IT+0x18c>
 80035d8:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <HAL_TIM_IC_Start_IT+0x110>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003615 	.word	0x08003615
 80035e4:	0800365d 	.word	0x0800365d
 80035e8:	0800365d 	.word	0x0800365d
 80035ec:	0800365d 	.word	0x0800365d
 80035f0:	08003627 	.word	0x08003627
 80035f4:	0800365d 	.word	0x0800365d
 80035f8:	0800365d 	.word	0x0800365d
 80035fc:	0800365d 	.word	0x0800365d
 8003600:	08003639 	.word	0x08003639
 8003604:	0800365d 	.word	0x0800365d
 8003608:	0800365d 	.word	0x0800365d
 800360c:	0800365d 	.word	0x0800365d
 8003610:	0800364b 	.word	0x0800364b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0202 	orr.w	r2, r2, #2
 8003622:	60da      	str	r2, [r3, #12]
      break;
 8003624:	e01d      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0204 	orr.w	r2, r2, #4
 8003634:	60da      	str	r2, [r3, #12]
      break;
 8003636:	e014      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0208 	orr.w	r2, r2, #8
 8003646:	60da      	str	r2, [r3, #12]
      break;
 8003648:	e00b      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0210 	orr.w	r2, r2, #16
 8003658:	60da      	str	r2, [r3, #12]
      break;
 800365a:	e002      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	bf00      	nop
  }

  if (status == HAL_OK)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d148      	bne.n	80036fa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 ffed 	bl	8004650 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a22      	ldr	r2, [pc, #136]	@ (8003704 <HAL_TIM_IC_Start_IT+0x234>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003688:	d01d      	beq.n	80036c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1e      	ldr	r2, [pc, #120]	@ (8003708 <HAL_TIM_IC_Start_IT+0x238>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d018      	beq.n	80036c6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1c      	ldr	r2, [pc, #112]	@ (800370c <HAL_TIM_IC_Start_IT+0x23c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003710 <HAL_TIM_IC_Start_IT+0x240>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a19      	ldr	r2, [pc, #100]	@ (8003714 <HAL_TIM_IC_Start_IT+0x244>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a18      	ldr	r2, [pc, #96]	@ (8003718 <HAL_TIM_IC_Start_IT+0x248>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_TIM_IC_Start_IT+0x24c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d111      	bne.n	80036ea <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d010      	beq.n	80036fa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e8:	e007      	b.n	80036fa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40010400 	.word	0x40010400
 8003718:	40014000 	.word	0x40014000
 800371c:	40001800 	.word	0x40001800

08003720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d020      	beq.n	8003784 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0202 	mvn.w	r2, #2
 8003754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd fcf8 	bl	8001160 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fb2e 	bl	8003dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fb35 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d020      	beq.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01b      	beq.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0204 	mvn.w	r2, #4
 80037a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fcd2 	bl	8001160 <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fb08 	bl	8003dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fb0f 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d020      	beq.n	800381c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01b      	beq.n	800381c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0208 	mvn.w	r2, #8
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fcac 	bl	8001160 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fae2 	bl	8003dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fae9 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d020      	beq.n	8003868 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01b      	beq.n	8003868 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0210 	mvn.w	r2, #16
 8003838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2208      	movs	r2, #8
 800383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fc86 	bl	8001160 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fabc 	bl	8003dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fac3 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0201 	mvn.w	r2, #1
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe f87c 	bl	8001984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 ffce 	bl	800484c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa94 	bl	8003dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0220 	mvn.w	r2, #32
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 ffa0 	bl	8004838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_TIM_IC_ConfigChannel+0x1e>
 800391a:	2302      	movs	r3, #2
 800391c:	e088      	b.n	8003a30 <HAL_TIM_IC_ConfigChannel+0x130>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d11b      	bne.n	8003964 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800393c:	f000 fcc4 	bl	80042c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699a      	ldr	r2, [r3, #24]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 020c 	bic.w	r2, r2, #12
 800394e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6999      	ldr	r1, [r3, #24]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	619a      	str	r2, [r3, #24]
 8003962:	e060      	b.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b04      	cmp	r3, #4
 8003968:	d11c      	bne.n	80039a4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800397a:	f000 fd48 	bl	800440e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800398c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6999      	ldr	r1, [r3, #24]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	021a      	lsls	r2, r3, #8
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	619a      	str	r2, [r3, #24]
 80039a2:	e040      	b.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d11b      	bne.n	80039e2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80039ba:	f000 fd95 	bl	80044e8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 020c 	bic.w	r2, r2, #12
 80039cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69d9      	ldr	r1, [r3, #28]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	61da      	str	r2, [r3, #28]
 80039e0:	e021      	b.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b0c      	cmp	r3, #12
 80039e6:	d11c      	bne.n	8003a22 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80039f8:	f000 fdb2 	bl	8004560 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003a0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69d9      	ldr	r1, [r3, #28]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	021a      	lsls	r2, r3, #8
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	61da      	str	r2, [r3, #28]
 8003a20:	e001      	b.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e0ae      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b0c      	cmp	r3, #12
 8003a62:	f200 809f 	bhi.w	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a66:	a201      	add	r2, pc, #4	@ (adr r2, 8003a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003aa1 	.word	0x08003aa1
 8003a70:	08003ba5 	.word	0x08003ba5
 8003a74:	08003ba5 	.word	0x08003ba5
 8003a78:	08003ba5 	.word	0x08003ba5
 8003a7c:	08003ae1 	.word	0x08003ae1
 8003a80:	08003ba5 	.word	0x08003ba5
 8003a84:	08003ba5 	.word	0x08003ba5
 8003a88:	08003ba5 	.word	0x08003ba5
 8003a8c:	08003b23 	.word	0x08003b23
 8003a90:	08003ba5 	.word	0x08003ba5
 8003a94:	08003ba5 	.word	0x08003ba5
 8003a98:	08003ba5 	.word	0x08003ba5
 8003a9c:	08003b63 	.word	0x08003b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fa5e 	bl	8003f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0208 	orr.w	r2, r2, #8
 8003aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0204 	bic.w	r2, r2, #4
 8003aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6999      	ldr	r1, [r3, #24]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	619a      	str	r2, [r3, #24]
      break;
 8003ade:	e064      	b.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 faae 	bl	8004048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6999      	ldr	r1, [r3, #24]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	021a      	lsls	r2, r3, #8
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	619a      	str	r2, [r3, #24]
      break;
 8003b20:	e043      	b.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fb03 	bl	8004134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0208 	orr.w	r2, r2, #8
 8003b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0204 	bic.w	r2, r2, #4
 8003b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69d9      	ldr	r1, [r3, #28]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	61da      	str	r2, [r3, #28]
      break;
 8003b60:	e023      	b.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fb57 	bl	800421c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69d9      	ldr	r1, [r3, #28]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	021a      	lsls	r2, r3, #8
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	61da      	str	r2, [r3, #28]
      break;
 8003ba2:	e002      	b.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e0b4      	b.n	8003d42 <HAL_TIM_ConfigClockSource+0x186>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c10:	d03e      	beq.n	8003c90 <HAL_TIM_ConfigClockSource+0xd4>
 8003c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c16:	f200 8087 	bhi.w	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c1e:	f000 8086 	beq.w	8003d2e <HAL_TIM_ConfigClockSource+0x172>
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c26:	d87f      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c28:	2b70      	cmp	r3, #112	@ 0x70
 8003c2a:	d01a      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0xa6>
 8003c2c:	2b70      	cmp	r3, #112	@ 0x70
 8003c2e:	d87b      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c30:	2b60      	cmp	r3, #96	@ 0x60
 8003c32:	d050      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0x11a>
 8003c34:	2b60      	cmp	r3, #96	@ 0x60
 8003c36:	d877      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b50      	cmp	r3, #80	@ 0x50
 8003c3a:	d03c      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c3c:	2b50      	cmp	r3, #80	@ 0x50
 8003c3e:	d873      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b40      	cmp	r3, #64	@ 0x40
 8003c42:	d058      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x13a>
 8003c44:	2b40      	cmp	r3, #64	@ 0x40
 8003c46:	d86f      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b30      	cmp	r3, #48	@ 0x30
 8003c4a:	d064      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x15a>
 8003c4c:	2b30      	cmp	r3, #48	@ 0x30
 8003c4e:	d86b      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d060      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x15a>
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d867      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d05c      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x15a>
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d05a      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x15a>
 8003c60:	e062      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c72:	f000 fccd 	bl	8004610 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	609a      	str	r2, [r3, #8]
      break;
 8003c8e:	e04f      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ca0:	f000 fcb6 	bl	8004610 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cb2:	609a      	str	r2, [r3, #8]
      break;
 8003cb4:	e03c      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f000 fb74 	bl	80043b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2150      	movs	r1, #80	@ 0x50
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fc83 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003cd4:	e02c      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f000 fbd0 	bl	8004488 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2160      	movs	r1, #96	@ 0x60
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fc73 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e01c      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d02:	461a      	mov	r2, r3
 8003d04:	f000 fb54 	bl	80043b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2140      	movs	r1, #64	@ 0x40
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fc63 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003d14:	e00c      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f000 fc5a 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003d26:	e003      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2c:	e000      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b0c      	cmp	r3, #12
 8003d5e:	d831      	bhi.n	8003dc4 <HAL_TIM_ReadCapturedValue+0x78>
 8003d60:	a201      	add	r2, pc, #4	@ (adr r2, 8003d68 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d9d 	.word	0x08003d9d
 8003d6c:	08003dc5 	.word	0x08003dc5
 8003d70:	08003dc5 	.word	0x08003dc5
 8003d74:	08003dc5 	.word	0x08003dc5
 8003d78:	08003da7 	.word	0x08003da7
 8003d7c:	08003dc5 	.word	0x08003dc5
 8003d80:	08003dc5 	.word	0x08003dc5
 8003d84:	08003dc5 	.word	0x08003dc5
 8003d88:	08003db1 	.word	0x08003db1
 8003d8c:	08003dc5 	.word	0x08003dc5
 8003d90:	08003dc5 	.word	0x08003dc5
 8003d94:	08003dc5 	.word	0x08003dc5
 8003d98:	08003dbb 	.word	0x08003dbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da2:	60fb      	str	r3, [r7, #12]

      break;
 8003da4:	e00f      	b.n	8003dc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dac:	60fb      	str	r3, [r7, #12]

      break;
 8003dae:	e00a      	b.n	8003dc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	60fb      	str	r3, [r7, #12]

      break;
 8003db8:	e005      	b.n	8003dc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	60fb      	str	r3, [r7, #12]

      break;
 8003dc2:	e000      	b.n	8003dc6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003dc4:	bf00      	nop
  }

  return tmpreg;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a46      	ldr	r2, [pc, #280]	@ (8003f3c <TIM_Base_SetConfig+0x12c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2e:	d00f      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a43      	ldr	r2, [pc, #268]	@ (8003f40 <TIM_Base_SetConfig+0x130>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a42      	ldr	r2, [pc, #264]	@ (8003f44 <TIM_Base_SetConfig+0x134>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a41      	ldr	r2, [pc, #260]	@ (8003f48 <TIM_Base_SetConfig+0x138>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a40      	ldr	r2, [pc, #256]	@ (8003f4c <TIM_Base_SetConfig+0x13c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d108      	bne.n	8003e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a35      	ldr	r2, [pc, #212]	@ (8003f3c <TIM_Base_SetConfig+0x12c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d02b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e70:	d027      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a32      	ldr	r2, [pc, #200]	@ (8003f40 <TIM_Base_SetConfig+0x130>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d023      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a31      	ldr	r2, [pc, #196]	@ (8003f44 <TIM_Base_SetConfig+0x134>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01f      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a30      	ldr	r2, [pc, #192]	@ (8003f48 <TIM_Base_SetConfig+0x138>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8003f4c <TIM_Base_SetConfig+0x13c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d017      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2e      	ldr	r2, [pc, #184]	@ (8003f50 <TIM_Base_SetConfig+0x140>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f54 <TIM_Base_SetConfig+0x144>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00f      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8003f58 <TIM_Base_SetConfig+0x148>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	@ (8003f5c <TIM_Base_SetConfig+0x14c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f60 <TIM_Base_SetConfig+0x150>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	@ (8003f64 <TIM_Base_SetConfig+0x154>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d108      	bne.n	8003ed4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a10      	ldr	r2, [pc, #64]	@ (8003f3c <TIM_Base_SetConfig+0x12c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0xf8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a12      	ldr	r2, [pc, #72]	@ (8003f4c <TIM_Base_SetConfig+0x13c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d103      	bne.n	8003f10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f023 0201 	bic.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	611a      	str	r2, [r3, #16]
  }
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40010400 	.word	0x40010400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800
 8003f5c:	40001800 	.word	0x40001800
 8003f60:	40001c00 	.word	0x40001c00
 8003f64:	40002000 	.word	0x40002000

08003f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f023 0201 	bic.w	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 0302 	bic.w	r3, r3, #2
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a20      	ldr	r2, [pc, #128]	@ (8004040 <TIM_OC1_SetConfig+0xd8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d003      	beq.n	8003fcc <TIM_OC1_SetConfig+0x64>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <TIM_OC1_SetConfig+0xdc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d10c      	bne.n	8003fe6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f023 0308 	bic.w	r3, r3, #8
 8003fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a15      	ldr	r2, [pc, #84]	@ (8004040 <TIM_OC1_SetConfig+0xd8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_OC1_SetConfig+0x8e>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a14      	ldr	r2, [pc, #80]	@ (8004044 <TIM_OC1_SetConfig+0xdc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d111      	bne.n	800401a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40010000 	.word	0x40010000
 8004044:	40010400 	.word	0x40010400

08004048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f023 0210 	bic.w	r2, r3, #16
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 0320 	bic.w	r3, r3, #32
 8004092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a22      	ldr	r2, [pc, #136]	@ (800412c <TIM_OC2_SetConfig+0xe4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_OC2_SetConfig+0x68>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a21      	ldr	r2, [pc, #132]	@ (8004130 <TIM_OC2_SetConfig+0xe8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10d      	bne.n	80040cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a17      	ldr	r2, [pc, #92]	@ (800412c <TIM_OC2_SetConfig+0xe4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_OC2_SetConfig+0x94>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a16      	ldr	r2, [pc, #88]	@ (8004130 <TIM_OC2_SetConfig+0xe8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d113      	bne.n	8004104 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40010000 	.word	0x40010000
 8004130:	40010400 	.word	0x40010400

08004134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800417c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a21      	ldr	r2, [pc, #132]	@ (8004214 <TIM_OC3_SetConfig+0xe0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_OC3_SetConfig+0x66>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a20      	ldr	r2, [pc, #128]	@ (8004218 <TIM_OC3_SetConfig+0xe4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10d      	bne.n	80041b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a16      	ldr	r2, [pc, #88]	@ (8004214 <TIM_OC3_SetConfig+0xe0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_OC3_SetConfig+0x92>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a15      	ldr	r2, [pc, #84]	@ (8004218 <TIM_OC3_SetConfig+0xe4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d113      	bne.n	80041ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	621a      	str	r2, [r3, #32]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40010000 	.word	0x40010000
 8004218:	40010400 	.word	0x40010400

0800421c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a12      	ldr	r2, [pc, #72]	@ (80042c0 <TIM_OC4_SetConfig+0xa4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_OC4_SetConfig+0x68>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a11      	ldr	r2, [pc, #68]	@ (80042c4 <TIM_OC4_SetConfig+0xa8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d109      	bne.n	8004298 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800428a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40010400 	.word	0x40010400

080042c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f023 0201 	bic.w	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4a28      	ldr	r2, [pc, #160]	@ (8004394 <TIM_TI1_SetConfig+0xcc>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01b      	beq.n	800432e <TIM_TI1_SetConfig+0x66>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fc:	d017      	beq.n	800432e <TIM_TI1_SetConfig+0x66>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4a25      	ldr	r2, [pc, #148]	@ (8004398 <TIM_TI1_SetConfig+0xd0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <TIM_TI1_SetConfig+0x66>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a24      	ldr	r2, [pc, #144]	@ (800439c <TIM_TI1_SetConfig+0xd4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00f      	beq.n	800432e <TIM_TI1_SetConfig+0x66>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a23      	ldr	r2, [pc, #140]	@ (80043a0 <TIM_TI1_SetConfig+0xd8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00b      	beq.n	800432e <TIM_TI1_SetConfig+0x66>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4a22      	ldr	r2, [pc, #136]	@ (80043a4 <TIM_TI1_SetConfig+0xdc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d007      	beq.n	800432e <TIM_TI1_SetConfig+0x66>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a21      	ldr	r2, [pc, #132]	@ (80043a8 <TIM_TI1_SetConfig+0xe0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_TI1_SetConfig+0x66>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a20      	ldr	r2, [pc, #128]	@ (80043ac <TIM_TI1_SetConfig+0xe4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d101      	bne.n	8004332 <TIM_TI1_SetConfig+0x6a>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <TIM_TI1_SetConfig+0x6c>
 8004332:	2300      	movs	r3, #0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e003      	b.n	8004352 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	b2db      	uxtb	r3, r3
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f023 030a 	bic.w	r3, r3, #10
 800436c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f003 030a 	and.w	r3, r3, #10
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40010400 	.word	0x40010400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40001800 	.word	0x40001800

080043b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f023 0201 	bic.w	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f023 030a 	bic.w	r3, r3, #10
 80043ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	621a      	str	r2, [r3, #32]
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800440e:	b480      	push	{r7}
 8004410:	b087      	sub	sp, #28
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800444c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	031b      	lsls	r3, r3, #12
 8004452:	b29b      	uxth	r3, r3
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004460:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	621a      	str	r2, [r3, #32]
}
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0210 	bic.w	r2, r3, #16
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	031b      	lsls	r3, r3, #12
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f023 0303 	bic.w	r3, r3, #3
 8004514:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004524:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	b2db      	uxtb	r3, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004538:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800459e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	031b      	lsls	r3, r3, #12
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80045b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	031b      	lsls	r3, r3, #12
 80045b8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f043 0307 	orr.w	r3, r3, #7
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800462a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	021a      	lsls	r2, r3, #8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	431a      	orrs	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	2201      	movs	r2, #1
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a1a      	ldr	r2, [r3, #32]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	43db      	mvns	r3, r3
 8004672:	401a      	ands	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e05a      	b.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a21      	ldr	r2, [pc, #132]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d022      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004700:	d01d      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1d      	ldr	r2, [pc, #116]	@ (800477c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d018      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1b      	ldr	r2, [pc, #108]	@ (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1a      	ldr	r2, [pc, #104]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00e      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a18      	ldr	r2, [pc, #96]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d009      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a17      	ldr	r2, [pc, #92]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a15      	ldr	r2, [pc, #84]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d10c      	bne.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	4313      	orrs	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40010000 	.word	0x40010000
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	40000c00 	.word	0x40000c00
 8004788:	40010400 	.word	0x40010400
 800478c:	40014000 	.word	0x40014000
 8004790:	40001800 	.word	0x40001800

08004794 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e03d      	b.n	800482c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <__NVIC_SetPriority>:
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	6039      	str	r1, [r7, #0]
 800486a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004870:	2b00      	cmp	r3, #0
 8004872:	db0a      	blt.n	800488a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	490c      	ldr	r1, [pc, #48]	@ (80048ac <__NVIC_SetPriority+0x4c>)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	0112      	lsls	r2, r2, #4
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	440b      	add	r3, r1
 8004884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004888:	e00a      	b.n	80048a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	b2da      	uxtb	r2, r3
 800488e:	4908      	ldr	r1, [pc, #32]	@ (80048b0 <__NVIC_SetPriority+0x50>)
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	3b04      	subs	r3, #4
 8004898:	0112      	lsls	r2, r2, #4
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	440b      	add	r3, r1
 800489e:	761a      	strb	r2, [r3, #24]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000e100 	.word	0xe000e100
 80048b0:	e000ed00 	.word	0xe000ed00

080048b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80048b8:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <SysTick_Handler+0x1c>)
 80048ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80048bc:	f001 fd46 	bl	800634c <xTaskGetSchedulerState>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d001      	beq.n	80048ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80048c6:	f002 fb3f 	bl	8006f48 <xPortSysTickHandler>
  }
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	e000e010 	.word	0xe000e010

080048d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048d8:	2100      	movs	r1, #0
 80048da:	f06f 0004 	mvn.w	r0, #4
 80048de:	f7ff ffbf 	bl	8004860 <__NVIC_SetPriority>
#endif
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ee:	f3ef 8305 	mrs	r3, IPSR
 80048f2:	603b      	str	r3, [r7, #0]
  return(result);
 80048f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048fa:	f06f 0305 	mvn.w	r3, #5
 80048fe:	607b      	str	r3, [r7, #4]
 8004900:	e00c      	b.n	800491c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004902:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <osKernelInitialize+0x44>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d105      	bne.n	8004916 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800490a:	4b08      	ldr	r3, [pc, #32]	@ (800492c <osKernelInitialize+0x44>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004910:	2300      	movs	r3, #0
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	e002      	b.n	800491c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004916:	f04f 33ff 	mov.w	r3, #4294967295
 800491a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800491c:	687b      	ldr	r3, [r7, #4]
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000220 	.word	0x20000220

08004930 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004936:	f3ef 8305 	mrs	r3, IPSR
 800493a:	603b      	str	r3, [r7, #0]
  return(result);
 800493c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004942:	f06f 0305 	mvn.w	r3, #5
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	e010      	b.n	800496c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800494a:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <osKernelStart+0x48>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d109      	bne.n	8004966 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004952:	f7ff ffbf 	bl	80048d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004956:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <osKernelStart+0x48>)
 8004958:	2202      	movs	r2, #2
 800495a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800495c:	f001 f892 	bl	8005a84 <vTaskStartScheduler>
      stat = osOK;
 8004960:	2300      	movs	r3, #0
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	e002      	b.n	800496c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004966:	f04f 33ff 	mov.w	r3, #4294967295
 800496a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800496c:	687b      	ldr	r3, [r7, #4]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000220 	.word	0x20000220

0800497c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b08e      	sub	sp, #56	@ 0x38
 8004980:	af04      	add	r7, sp, #16
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800498c:	f3ef 8305 	mrs	r3, IPSR
 8004990:	617b      	str	r3, [r7, #20]
  return(result);
 8004992:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004994:	2b00      	cmp	r3, #0
 8004996:	d17e      	bne.n	8004a96 <osThreadNew+0x11a>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d07b      	beq.n	8004a96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800499e:	2380      	movs	r3, #128	@ 0x80
 80049a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80049a2:	2318      	movs	r3, #24
 80049a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80049aa:	f04f 33ff 	mov.w	r3, #4294967295
 80049ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d045      	beq.n	8004a42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <osThreadNew+0x48>
        name = attr->name;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <osThreadNew+0x6e>
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b38      	cmp	r3, #56	@ 0x38
 80049dc:	d805      	bhi.n	80049ea <osThreadNew+0x6e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <osThreadNew+0x72>
        return (NULL);
 80049ea:	2300      	movs	r3, #0
 80049ec:	e054      	b.n	8004a98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00e      	beq.n	8004a24 <osThreadNew+0xa8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2ba7      	cmp	r3, #167	@ 0xa7
 8004a0c:	d90a      	bls.n	8004a24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d006      	beq.n	8004a24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <osThreadNew+0xa8>
        mem = 1;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	e010      	b.n	8004a46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10c      	bne.n	8004a46 <osThreadNew+0xca>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d108      	bne.n	8004a46 <osThreadNew+0xca>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <osThreadNew+0xca>
          mem = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	e001      	b.n	8004a46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d110      	bne.n	8004a6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a54:	9202      	str	r2, [sp, #8]
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6a3a      	ldr	r2, [r7, #32]
 8004a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fe1a 	bl	800569c <xTaskCreateStatic>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	e013      	b.n	8004a96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d110      	bne.n	8004a96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	f107 0310 	add.w	r3, r7, #16
 8004a7c:	9301      	str	r3, [sp, #4]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fe68 	bl	800575c <xTaskCreate>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d001      	beq.n	8004a96 <osThreadNew+0x11a>
            hTask = NULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a96:	693b      	ldr	r3, [r7, #16]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3728      	adds	r7, #40	@ 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa8:	f3ef 8305 	mrs	r3, IPSR
 8004aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <osDelay+0x1c>
    stat = osErrorISR;
 8004ab4:	f06f 0305 	mvn.w	r3, #5
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e007      	b.n	8004acc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <osDelay+0x2c>
      vTaskDelay(ticks);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 ffa6 	bl	8005a18 <vTaskDelay>
    }
  }

  return (stat);
 8004acc:	68fb      	ldr	r3, [r7, #12]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a07      	ldr	r2, [pc, #28]	@ (8004b04 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ae8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4a06      	ldr	r2, [pc, #24]	@ (8004b08 <vApplicationGetIdleTaskMemory+0x30>)
 8004aee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2280      	movs	r2, #128	@ 0x80
 8004af4:	601a      	str	r2, [r3, #0]
}
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000224 	.word	0x20000224
 8004b08:	200002cc 	.word	0x200002cc

08004b0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4a07      	ldr	r2, [pc, #28]	@ (8004b38 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4a06      	ldr	r2, [pc, #24]	@ (8004b3c <vApplicationGetTimerTaskMemory+0x30>)
 8004b22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b2a:	601a      	str	r2, [r3, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	200004cc 	.word	0x200004cc
 8004b3c:	20000574 	.word	0x20000574

08004b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f103 0208 	add.w	r2, r3, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295
 8004b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f103 0208 	add.w	r2, r3, #8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f103 0208 	add.w	r2, r3, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d103      	bne.n	8004c02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e00c      	b.n	8004c1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3308      	adds	r3, #8
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	e002      	b.n	8004c10 <vListInsert+0x2e>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d2f6      	bcs.n	8004c0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6892      	ldr	r2, [r2, #8]
 8004c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6852      	ldr	r2, [r2, #4]
 8004c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d103      	bne.n	8004c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	1e5a      	subs	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cd4:	f002 f8a8 	bl	8006e28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	441a      	add	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d04:	3b01      	subs	r3, #1
 8004d06:	68f9      	ldr	r1, [r7, #12]
 8004d08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	441a      	add	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	22ff      	movs	r2, #255	@ 0xff
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	22ff      	movs	r2, #255	@ 0xff
 8004d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d114      	bne.n	8004d54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01a      	beq.n	8004d68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3310      	adds	r3, #16
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 f942 	bl	8005fc0 <xTaskRemoveFromEventList>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d012      	beq.n	8004d68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d42:	4b0d      	ldr	r3, [pc, #52]	@ (8004d78 <xQueueGenericReset+0xd0>)
 8004d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	e009      	b.n	8004d68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3310      	adds	r3, #16
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fef1 	bl	8004b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3324      	adds	r3, #36	@ 0x24
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff feec 	bl	8004b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d68:	f002 f890 	bl	8006e8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d6c:	2301      	movs	r3, #1
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08e      	sub	sp, #56	@ 0x38
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10b      	bne.n	8004dc6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	e7fd      	b.n	8004dc2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <xQueueGenericCreateStatic+0x56>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <xQueueGenericCreateStatic+0x5a>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <xQueueGenericCreateStatic+0x5c>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10b      	bne.n	8004df4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	623b      	str	r3, [r7, #32]
}
 8004dee:	bf00      	nop
 8004df0:	bf00      	nop
 8004df2:	e7fd      	b.n	8004df0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <xQueueGenericCreateStatic+0x84>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <xQueueGenericCreateStatic+0x88>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e000      	b.n	8004e06 <xQueueGenericCreateStatic+0x8a>
 8004e04:	2300      	movs	r3, #0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10b      	bne.n	8004e22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	61fb      	str	r3, [r7, #28]
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	e7fd      	b.n	8004e1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e22:	2350      	movs	r3, #80	@ 0x50
 8004e24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b50      	cmp	r3, #80	@ 0x50
 8004e2a:	d00b      	beq.n	8004e44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	61bb      	str	r3, [r7, #24]
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00d      	beq.n	8004e6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	4613      	mov	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f805 	bl	8004e76 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3730      	adds	r7, #48	@ 0x30
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e002      	b.n	8004e98 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	69b8      	ldr	r0, [r7, #24]
 8004ea8:	f7ff fefe 	bl	8004ca8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	78fa      	ldrb	r2, [r7, #3]
 8004eb0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08e      	sub	sp, #56	@ 0x38
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10b      	bne.n	8004ef0 <xQueueGenericSend+0x34>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	e7fd      	b.n	8004eec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <xQueueGenericSend+0x42>
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <xQueueGenericSend+0x46>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <xQueueGenericSend+0x48>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <xQueueGenericSend+0x64>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d103      	bne.n	8004f2e <xQueueGenericSend+0x72>
 8004f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <xQueueGenericSend+0x76>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <xQueueGenericSend+0x78>
 8004f32:	2300      	movs	r3, #0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10b      	bne.n	8004f50 <xQueueGenericSend+0x94>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	623b      	str	r3, [r7, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	e7fd      	b.n	8004f4c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f50:	f001 f9fc 	bl	800634c <xTaskGetSchedulerState>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <xQueueGenericSend+0xa4>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <xQueueGenericSend+0xa8>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <xQueueGenericSend+0xaa>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10b      	bne.n	8004f82 <xQueueGenericSend+0xc6>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	61fb      	str	r3, [r7, #28]
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	e7fd      	b.n	8004f7e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f82:	f001 ff51 	bl	8006e28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d302      	bcc.n	8004f98 <xQueueGenericSend+0xdc>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d129      	bne.n	8004fec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f9e:	f000 fa0f 	bl	80053c0 <prvCopyDataToQueue>
 8004fa2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d010      	beq.n	8004fce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	3324      	adds	r3, #36	@ 0x24
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f001 f805 	bl	8005fc0 <xTaskRemoveFromEventList>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d013      	beq.n	8004fe4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80050bc <xQueueGenericSend+0x200>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	e00a      	b.n	8004fe4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fd4:	4b39      	ldr	r3, [pc, #228]	@ (80050bc <xQueueGenericSend+0x200>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fe4:	f001 ff52 	bl	8006e8c <vPortExitCritical>
				return pdPASS;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e063      	b.n	80050b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ff2:	f001 ff4b 	bl	8006e8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e05c      	b.n	80050b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005000:	f107 0314 	add.w	r3, r7, #20
 8005004:	4618      	mov	r0, r3
 8005006:	f001 f83f 	bl	8006088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800500a:	2301      	movs	r3, #1
 800500c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800500e:	f001 ff3d 	bl	8006e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005012:	f000 fda7 	bl	8005b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005016:	f001 ff07 	bl	8006e28 <vPortEnterCritical>
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005020:	b25b      	sxtb	r3, r3
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005026:	d103      	bne.n	8005030 <xQueueGenericSend+0x174>
 8005028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005032:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005036:	b25b      	sxtb	r3, r3
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d103      	bne.n	8005046 <xQueueGenericSend+0x18a>
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005046:	f001 ff21 	bl	8006e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800504a:	1d3a      	adds	r2, r7, #4
 800504c:	f107 0314 	add.w	r3, r7, #20
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f001 f82e 	bl	80060b4 <xTaskCheckForTimeOut>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d124      	bne.n	80050a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800505e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005060:	f000 faa6 	bl	80055b0 <prvIsQueueFull>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800506a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506c:	3310      	adds	r3, #16
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f000 ff52 	bl	8005f1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005078:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800507a:	f000 fa31 	bl	80054e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800507e:	f000 fd7f 	bl	8005b80 <xTaskResumeAll>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	f47f af7c 	bne.w	8004f82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800508a:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <xQueueGenericSend+0x200>)
 800508c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	e772      	b.n	8004f82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800509c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800509e:	f000 fa1f 	bl	80054e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050a2:	f000 fd6d 	bl	8005b80 <xTaskResumeAll>
 80050a6:	e76c      	b.n	8004f82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050aa:	f000 fa19 	bl	80054e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050ae:	f000 fd67 	bl	8005b80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3738      	adds	r7, #56	@ 0x38
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b090      	sub	sp, #64	@ 0x40
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80050d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050ea:	bf00      	nop
 80050ec:	bf00      	nop
 80050ee:	e7fd      	b.n	80050ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <xQueueGenericSendFromISR+0x3e>
 80050f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <xQueueGenericSendFromISR+0x42>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <xQueueGenericSendFromISR+0x44>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10b      	bne.n	8005120 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800511a:	bf00      	nop
 800511c:	bf00      	nop
 800511e:	e7fd      	b.n	800511c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d103      	bne.n	800512e <xQueueGenericSendFromISR+0x6e>
 8005126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <xQueueGenericSendFromISR+0x72>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <xQueueGenericSendFromISR+0x74>
 8005132:	2300      	movs	r3, #0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10b      	bne.n	8005150 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	623b      	str	r3, [r7, #32]
}
 800514a:	bf00      	nop
 800514c:	bf00      	nop
 800514e:	e7fd      	b.n	800514c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005150:	f001 ff4a 	bl	8006fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005154:	f3ef 8211 	mrs	r2, BASEPRI
 8005158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	61fa      	str	r2, [r7, #28]
 800516a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800516c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800516e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005172:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005178:	429a      	cmp	r2, r3
 800517a:	d302      	bcc.n	8005182 <xQueueGenericSendFromISR+0xc2>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d12f      	bne.n	80051e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005184:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005188:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800518c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005198:	f000 f912 	bl	80053c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800519c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d112      	bne.n	80051cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d016      	beq.n	80051dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b0:	3324      	adds	r3, #36	@ 0x24
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 ff04 	bl	8005fc0 <xTaskRemoveFromEventList>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00e      	beq.n	80051dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00b      	beq.n	80051dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e007      	b.n	80051dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80051d0:	3301      	adds	r3, #1
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	b25a      	sxtb	r2, r3
 80051d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80051dc:	2301      	movs	r3, #1
 80051de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80051e0:	e001      	b.n	80051e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3740      	adds	r7, #64	@ 0x40
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08c      	sub	sp, #48	@ 0x30
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005208:	2300      	movs	r3, #0
 800520a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <xQueueReceive+0x32>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	623b      	str	r3, [r7, #32]
}
 8005228:	bf00      	nop
 800522a:	bf00      	nop
 800522c:	e7fd      	b.n	800522a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d103      	bne.n	800523c <xQueueReceive+0x40>
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <xQueueReceive+0x44>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <xQueueReceive+0x46>
 8005240:	2300      	movs	r3, #0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <xQueueReceive+0x62>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	61fb      	str	r3, [r7, #28]
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	e7fd      	b.n	800525a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800525e:	f001 f875 	bl	800634c <xTaskGetSchedulerState>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <xQueueReceive+0x72>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <xQueueReceive+0x76>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <xQueueReceive+0x78>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10b      	bne.n	8005290 <xQueueReceive+0x94>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	61bb      	str	r3, [r7, #24]
}
 800528a:	bf00      	nop
 800528c:	bf00      	nop
 800528e:	e7fd      	b.n	800528c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005290:	f001 fdca 	bl	8006e28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01f      	beq.n	80052e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052a4:	f000 f8f6 	bl	8005494 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052aa:	1e5a      	subs	r2, r3, #1
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00f      	beq.n	80052d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	3310      	adds	r3, #16
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fe7f 	bl	8005fc0 <xTaskRemoveFromEventList>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052c8:	4b3c      	ldr	r3, [pc, #240]	@ (80053bc <xQueueReceive+0x1c0>)
 80052ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052d8:	f001 fdd8 	bl	8006e8c <vPortExitCritical>
				return pdPASS;
 80052dc:	2301      	movs	r3, #1
 80052de:	e069      	b.n	80053b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052e6:	f001 fdd1 	bl	8006e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e062      	b.n	80053b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d106      	bne.n	8005302 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052f4:	f107 0310 	add.w	r3, r7, #16
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fec5 	bl	8006088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052fe:	2301      	movs	r3, #1
 8005300:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005302:	f001 fdc3 	bl	8006e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005306:	f000 fc2d 	bl	8005b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800530a:	f001 fd8d 	bl	8006e28 <vPortEnterCritical>
 800530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005314:	b25b      	sxtb	r3, r3
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d103      	bne.n	8005324 <xQueueReceive+0x128>
 800531c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005326:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800532a:	b25b      	sxtb	r3, r3
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d103      	bne.n	800533a <xQueueReceive+0x13e>
 8005332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800533a:	f001 fda7 	bl	8006e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800533e:	1d3a      	adds	r2, r7, #4
 8005340:	f107 0310 	add.w	r3, r7, #16
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f000 feb4 	bl	80060b4 <xTaskCheckForTimeOut>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d123      	bne.n	800539a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005354:	f000 f916 	bl	8005584 <prvIsQueueEmpty>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d017      	beq.n	800538e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005360:	3324      	adds	r3, #36	@ 0x24
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	4611      	mov	r1, r2
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fdd8 	bl	8005f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800536c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800536e:	f000 f8b7 	bl	80054e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005372:	f000 fc05 	bl	8005b80 <xTaskResumeAll>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d189      	bne.n	8005290 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800537c:	4b0f      	ldr	r3, [pc, #60]	@ (80053bc <xQueueReceive+0x1c0>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	e780      	b.n	8005290 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800538e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005390:	f000 f8a6 	bl	80054e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005394:	f000 fbf4 	bl	8005b80 <xTaskResumeAll>
 8005398:	e77a      	b.n	8005290 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800539a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800539c:	f000 f8a0 	bl	80054e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053a0:	f000 fbee 	bl	8005b80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053a6:	f000 f8ed 	bl	8005584 <prvIsQueueEmpty>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f43f af6f 	beq.w	8005290 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3730      	adds	r7, #48	@ 0x30
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10d      	bne.n	80053fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d14d      	bne.n	8005482 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 ffcc 	bl	8006388 <xTaskPriorityDisinherit>
 80053f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	e043      	b.n	8005482 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d119      	bne.n	8005434 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6858      	ldr	r0, [r3, #4]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	461a      	mov	r2, r3
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	f002 f8a0 	bl	8007550 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	441a      	add	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	429a      	cmp	r2, r3
 8005428:	d32b      	bcc.n	8005482 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	605a      	str	r2, [r3, #4]
 8005432:	e026      	b.n	8005482 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	68d8      	ldr	r0, [r3, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543c:	461a      	mov	r2, r3
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	f002 f886 	bl	8007550 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	425b      	negs	r3, r3
 800544e:	441a      	add	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d207      	bcs.n	8005470 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005468:	425b      	negs	r3, r3
 800546a:	441a      	add	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d105      	bne.n	8005482 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	3b01      	subs	r3, #1
 8005480:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800548a:	697b      	ldr	r3, [r7, #20]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d018      	beq.n	80054d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	441a      	add	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d303      	bcc.n	80054c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68d9      	ldr	r1, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d0:	461a      	mov	r2, r3
 80054d2:	6838      	ldr	r0, [r7, #0]
 80054d4:	f002 f83c 	bl	8007550 <memcpy>
	}
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054e8:	f001 fc9e 	bl	8006e28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054f4:	e011      	b.n	800551a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d012      	beq.n	8005524 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3324      	adds	r3, #36	@ 0x24
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fd5c 	bl	8005fc0 <xTaskRemoveFromEventList>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800550e:	f000 fe35 	bl	800617c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	3b01      	subs	r3, #1
 8005516:	b2db      	uxtb	r3, r3
 8005518:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800551a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800551e:	2b00      	cmp	r3, #0
 8005520:	dce9      	bgt.n	80054f6 <prvUnlockQueue+0x16>
 8005522:	e000      	b.n	8005526 <prvUnlockQueue+0x46>
					break;
 8005524:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	22ff      	movs	r2, #255	@ 0xff
 800552a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800552e:	f001 fcad 	bl	8006e8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005532:	f001 fc79 	bl	8006e28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800553c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800553e:	e011      	b.n	8005564 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d012      	beq.n	800556e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3310      	adds	r3, #16
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fd37 	bl	8005fc0 <xTaskRemoveFromEventList>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005558:	f000 fe10 	bl	800617c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800555c:	7bbb      	ldrb	r3, [r7, #14]
 800555e:	3b01      	subs	r3, #1
 8005560:	b2db      	uxtb	r3, r3
 8005562:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005568:	2b00      	cmp	r3, #0
 800556a:	dce9      	bgt.n	8005540 <prvUnlockQueue+0x60>
 800556c:	e000      	b.n	8005570 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800556e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	22ff      	movs	r2, #255	@ 0xff
 8005574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005578:	f001 fc88 	bl	8006e8c <vPortExitCritical>
}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800558c:	f001 fc4c 	bl	8006e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005598:	2301      	movs	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	e001      	b.n	80055a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055a2:	f001 fc73 	bl	8006e8c <vPortExitCritical>

	return xReturn;
 80055a6:	68fb      	ldr	r3, [r7, #12]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055b8:	f001 fc36 	bl	8006e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d102      	bne.n	80055ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055c8:	2301      	movs	r3, #1
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e001      	b.n	80055d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055d2:	f001 fc5b 	bl	8006e8c <vPortExitCritical>

	return xReturn;
 80055d6:	68fb      	ldr	r3, [r7, #12]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	e014      	b.n	800561a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005630 <vQueueAddToRegistry+0x50>)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10b      	bne.n	8005614 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055fc:	490c      	ldr	r1, [pc, #48]	@ (8005630 <vQueueAddToRegistry+0x50>)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005606:	4a0a      	ldr	r2, [pc, #40]	@ (8005630 <vQueueAddToRegistry+0x50>)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	4413      	add	r3, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005612:	e006      	b.n	8005622 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3301      	adds	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b07      	cmp	r3, #7
 800561e:	d9e7      	bls.n	80055f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	20000974 	.word	0x20000974

08005634 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005644:	f001 fbf0 	bl	8006e28 <vPortEnterCritical>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800564e:	b25b      	sxtb	r3, r3
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d103      	bne.n	800565e <vQueueWaitForMessageRestricted+0x2a>
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005664:	b25b      	sxtb	r3, r3
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d103      	bne.n	8005674 <vQueueWaitForMessageRestricted+0x40>
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005674:	f001 fc0a 	bl	8006e8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	3324      	adds	r3, #36	@ 0x24
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fc6d 	bl	8005f68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800568e:	6978      	ldr	r0, [r7, #20]
 8005690:	f7ff ff26 	bl	80054e0 <prvUnlockQueue>
	}
 8005694:	bf00      	nop
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08e      	sub	sp, #56	@ 0x38
 80056a0:	af04      	add	r7, sp, #16
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	623b      	str	r3, [r7, #32]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	61fb      	str	r3, [r7, #28]
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056e6:	23a8      	movs	r3, #168	@ 0xa8
 80056e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2ba8      	cmp	r3, #168	@ 0xa8
 80056ee:	d00b      	beq.n	8005708 <xTaskCreateStatic+0x6c>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	61bb      	str	r3, [r7, #24]
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005708:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01e      	beq.n	800574e <xTaskCreateStatic+0xb2>
 8005710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01b      	beq.n	800574e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005718:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800571e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	2202      	movs	r2, #2
 8005724:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005728:	2300      	movs	r3, #0
 800572a:	9303      	str	r3, [sp, #12]
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	9302      	str	r3, [sp, #8]
 8005730:	f107 0314 	add.w	r3, r7, #20
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f851 	bl	80057e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005746:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005748:	f000 f8f6 	bl	8005938 <prvAddNewTaskToReadyList>
 800574c:	e001      	b.n	8005752 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005752:	697b      	ldr	r3, [r7, #20]
	}
 8005754:	4618      	mov	r0, r3
 8005756:	3728      	adds	r7, #40	@ 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	@ 0x30
 8005760:	af04      	add	r7, sp, #16
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4618      	mov	r0, r3
 8005772:	f001 fc7b 	bl	800706c <pvPortMalloc>
 8005776:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00e      	beq.n	800579c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800577e:	20a8      	movs	r0, #168	@ 0xa8
 8005780:	f001 fc74 	bl	800706c <pvPortMalloc>
 8005784:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	631a      	str	r2, [r3, #48]	@ 0x30
 8005792:	e005      	b.n	80057a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005794:	6978      	ldr	r0, [r7, #20]
 8005796:	f001 fd37 	bl	8007208 <vPortFree>
 800579a:	e001      	b.n	80057a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d017      	beq.n	80057d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	2300      	movs	r3, #0
 80057b2:	9303      	str	r3, [sp, #12]
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	9302      	str	r3, [sp, #8]
 80057b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f80f 	bl	80057e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ca:	69f8      	ldr	r0, [r7, #28]
 80057cc:	f000 f8b4 	bl	8005938 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057d0:	2301      	movs	r3, #1
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	e002      	b.n	80057dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057d6:	f04f 33ff 	mov.w	r3, #4294967295
 80057da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057dc:	69bb      	ldr	r3, [r7, #24]
	}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	461a      	mov	r2, r3
 8005800:	21a5      	movs	r1, #165	@ 0xa5
 8005802:	f001 fe21 	bl	8007448 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005810:	3b01      	subs	r3, #1
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f023 0307 	bic.w	r3, r3, #7
 800581e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	617b      	str	r3, [r7, #20]
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	e7fd      	b.n	800583e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01f      	beq.n	8005888 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005848:	2300      	movs	r3, #0
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	e012      	b.n	8005874 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	7819      	ldrb	r1, [r3, #0]
 8005856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	3334      	adds	r3, #52	@ 0x34
 800585e:	460a      	mov	r2, r1
 8005860:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4413      	add	r3, r2
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d006      	beq.n	800587c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3301      	adds	r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b0f      	cmp	r3, #15
 8005878:	d9e9      	bls.n	800584e <prvInitialiseNewTask+0x66>
 800587a:	e000      	b.n	800587e <prvInitialiseNewTask+0x96>
			{
				break;
 800587c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005886:	e003      	b.n	8005890 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	2b37      	cmp	r3, #55	@ 0x37
 8005894:	d901      	bls.n	800589a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005896:	2337      	movs	r3, #55	@ 0x37
 8005898:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800589a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800589e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a8:	2200      	movs	r2, #0
 80058aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	3304      	adds	r3, #4
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff f965 	bl	8004b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	3318      	adds	r3, #24
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff f960 	bl	8004b80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	2200      	movs	r2, #0
 80058da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	3354      	adds	r3, #84	@ 0x54
 80058ea:	224c      	movs	r2, #76	@ 0x4c
 80058ec:	2100      	movs	r1, #0
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 fdaa 	bl	8007448 <memset>
 80058f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f6:	4a0d      	ldr	r2, [pc, #52]	@ (800592c <prvInitialiseNewTask+0x144>)
 80058f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005930 <prvInitialiseNewTask+0x148>)
 80058fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005902:	4a0c      	ldr	r2, [pc, #48]	@ (8005934 <prvInitialiseNewTask+0x14c>)
 8005904:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	68f9      	ldr	r1, [r7, #12]
 800590a:	69b8      	ldr	r0, [r7, #24]
 800590c:	f001 f95a 	bl	8006bc4 <pxPortInitialiseStack>
 8005910:	4602      	mov	r2, r0
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005922:	bf00      	nop
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20004c08 	.word	0x20004c08
 8005930:	20004c70 	.word	0x20004c70
 8005934:	20004cd8 	.word	0x20004cd8

08005938 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005940:	f001 fa72 	bl	8006e28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005944:	4b2d      	ldr	r3, [pc, #180]	@ (80059fc <prvAddNewTaskToReadyList+0xc4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3301      	adds	r3, #1
 800594a:	4a2c      	ldr	r2, [pc, #176]	@ (80059fc <prvAddNewTaskToReadyList+0xc4>)
 800594c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800594e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a00 <prvAddNewTaskToReadyList+0xc8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005956:	4a2a      	ldr	r2, [pc, #168]	@ (8005a00 <prvAddNewTaskToReadyList+0xc8>)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800595c:	4b27      	ldr	r3, [pc, #156]	@ (80059fc <prvAddNewTaskToReadyList+0xc4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d110      	bne.n	8005986 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005964:	f000 fc2e 	bl	80061c4 <prvInitialiseTaskLists>
 8005968:	e00d      	b.n	8005986 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800596a:	4b26      	ldr	r3, [pc, #152]	@ (8005a04 <prvAddNewTaskToReadyList+0xcc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005972:	4b23      	ldr	r3, [pc, #140]	@ (8005a00 <prvAddNewTaskToReadyList+0xc8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597c:	429a      	cmp	r2, r3
 800597e:	d802      	bhi.n	8005986 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005980:	4a1f      	ldr	r2, [pc, #124]	@ (8005a00 <prvAddNewTaskToReadyList+0xc8>)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005986:	4b20      	ldr	r3, [pc, #128]	@ (8005a08 <prvAddNewTaskToReadyList+0xd0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3301      	adds	r3, #1
 800598c:	4a1e      	ldr	r2, [pc, #120]	@ (8005a08 <prvAddNewTaskToReadyList+0xd0>)
 800598e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005990:	4b1d      	ldr	r3, [pc, #116]	@ (8005a08 <prvAddNewTaskToReadyList+0xd0>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a0c <prvAddNewTaskToReadyList+0xd4>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d903      	bls.n	80059ac <prvAddNewTaskToReadyList+0x74>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	4a18      	ldr	r2, [pc, #96]	@ (8005a0c <prvAddNewTaskToReadyList+0xd4>)
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4a15      	ldr	r2, [pc, #84]	@ (8005a10 <prvAddNewTaskToReadyList+0xd8>)
 80059ba:	441a      	add	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f7ff f8e9 	bl	8004b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059c8:	f001 fa60 	bl	8006e8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005a04 <prvAddNewTaskToReadyList+0xcc>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00e      	beq.n	80059f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <prvAddNewTaskToReadyList+0xc8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	429a      	cmp	r2, r3
 80059e0:	d207      	bcs.n	80059f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a14 <prvAddNewTaskToReadyList+0xdc>)
 80059e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000e88 	.word	0x20000e88
 8005a00:	200009b4 	.word	0x200009b4
 8005a04:	20000e94 	.word	0x20000e94
 8005a08:	20000ea4 	.word	0x20000ea4
 8005a0c:	20000e90 	.word	0x20000e90
 8005a10:	200009b8 	.word	0x200009b8
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d018      	beq.n	8005a5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a2a:	4b14      	ldr	r3, [pc, #80]	@ (8005a7c <vTaskDelay+0x64>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00b      	beq.n	8005a4a <vTaskDelay+0x32>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	60bb      	str	r3, [r7, #8]
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	e7fd      	b.n	8005a46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a4a:	f000 f88b 	bl	8005b64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a4e:	2100      	movs	r1, #0
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fd09 	bl	8006468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a56:	f000 f893 	bl	8005b80 <xTaskResumeAll>
 8005a5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d107      	bne.n	8005a72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005a62:	4b07      	ldr	r3, [pc, #28]	@ (8005a80 <vTaskDelay+0x68>)
 8005a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000eb0 	.word	0x20000eb0
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	@ 0x28
 8005a88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a92:	463a      	mov	r2, r7
 8005a94:	1d39      	adds	r1, r7, #4
 8005a96:	f107 0308 	add.w	r3, r7, #8
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff f81c 	bl	8004ad8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	9202      	str	r2, [sp, #8]
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	460a      	mov	r2, r1
 8005ab2:	4924      	ldr	r1, [pc, #144]	@ (8005b44 <vTaskStartScheduler+0xc0>)
 8005ab4:	4824      	ldr	r0, [pc, #144]	@ (8005b48 <vTaskStartScheduler+0xc4>)
 8005ab6:	f7ff fdf1 	bl	800569c <xTaskCreateStatic>
 8005aba:	4603      	mov	r3, r0
 8005abc:	4a23      	ldr	r2, [pc, #140]	@ (8005b4c <vTaskStartScheduler+0xc8>)
 8005abe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ac0:	4b22      	ldr	r3, [pc, #136]	@ (8005b4c <vTaskStartScheduler+0xc8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	e001      	b.n	8005ad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d102      	bne.n	8005ade <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ad8:	f000 fd1a 	bl	8006510 <xTimerCreateTimerTask>
 8005adc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d11b      	bne.n	8005b1c <vTaskStartScheduler+0x98>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	613b      	str	r3, [r7, #16]
}
 8005af6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005af8:	4b15      	ldr	r3, [pc, #84]	@ (8005b50 <vTaskStartScheduler+0xcc>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3354      	adds	r3, #84	@ 0x54
 8005afe:	4a15      	ldr	r2, [pc, #84]	@ (8005b54 <vTaskStartScheduler+0xd0>)
 8005b00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b02:	4b15      	ldr	r3, [pc, #84]	@ (8005b58 <vTaskStartScheduler+0xd4>)
 8005b04:	f04f 32ff 	mov.w	r2, #4294967295
 8005b08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b0a:	4b14      	ldr	r3, [pc, #80]	@ (8005b5c <vTaskStartScheduler+0xd8>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b10:	4b13      	ldr	r3, [pc, #76]	@ (8005b60 <vTaskStartScheduler+0xdc>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b16:	f001 f8e3 	bl	8006ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b1a:	e00f      	b.n	8005b3c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d10b      	bne.n	8005b3c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	60fb      	str	r3, [r7, #12]
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <vTaskStartScheduler+0xb4>
}
 8005b3c:	bf00      	nop
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	0800763c 	.word	0x0800763c
 8005b48:	08006195 	.word	0x08006195
 8005b4c:	20000eac 	.word	0x20000eac
 8005b50:	200009b4 	.word	0x200009b4
 8005b54:	20000010 	.word	0x20000010
 8005b58:	20000ea8 	.word	0x20000ea8
 8005b5c:	20000e94 	.word	0x20000e94
 8005b60:	20000e8c 	.word	0x20000e8c

08005b64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b68:	4b04      	ldr	r3, [pc, #16]	@ (8005b7c <vTaskSuspendAll+0x18>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4a03      	ldr	r2, [pc, #12]	@ (8005b7c <vTaskSuspendAll+0x18>)
 8005b70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b72:	bf00      	nop
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	20000eb0 	.word	0x20000eb0

08005b80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b8e:	4b42      	ldr	r3, [pc, #264]	@ (8005c98 <xTaskResumeAll+0x118>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10b      	bne.n	8005bae <xTaskResumeAll+0x2e>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	603b      	str	r3, [r7, #0]
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	e7fd      	b.n	8005baa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bae:	f001 f93b 	bl	8006e28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bb2:	4b39      	ldr	r3, [pc, #228]	@ (8005c98 <xTaskResumeAll+0x118>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	4a37      	ldr	r2, [pc, #220]	@ (8005c98 <xTaskResumeAll+0x118>)
 8005bba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bbc:	4b36      	ldr	r3, [pc, #216]	@ (8005c98 <xTaskResumeAll+0x118>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d162      	bne.n	8005c8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bc4:	4b35      	ldr	r3, [pc, #212]	@ (8005c9c <xTaskResumeAll+0x11c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d05e      	beq.n	8005c8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bcc:	e02f      	b.n	8005c2e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bce:	4b34      	ldr	r3, [pc, #208]	@ (8005ca0 <xTaskResumeAll+0x120>)
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3318      	adds	r3, #24
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff f83a 	bl	8004c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff f835 	bl	8004c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bee:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca4 <xTaskResumeAll+0x124>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d903      	bls.n	8005bfe <xTaskResumeAll+0x7e>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8005ca4 <xTaskResumeAll+0x124>)
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4a27      	ldr	r2, [pc, #156]	@ (8005ca8 <xTaskResumeAll+0x128>)
 8005c0c:	441a      	add	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4619      	mov	r1, r3
 8005c14:	4610      	mov	r0, r2
 8005c16:	f7fe ffc0 	bl	8004b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1e:	4b23      	ldr	r3, [pc, #140]	@ (8005cac <xTaskResumeAll+0x12c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d302      	bcc.n	8005c2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005c28:	4b21      	ldr	r3, [pc, #132]	@ (8005cb0 <xTaskResumeAll+0x130>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ca0 <xTaskResumeAll+0x120>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1cb      	bne.n	8005bce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c3c:	f000 fb66 	bl	800630c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c40:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb4 <xTaskResumeAll+0x134>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d010      	beq.n	8005c6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c4c:	f000 f846 	bl	8005cdc <xTaskIncrementTick>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005c56:	4b16      	ldr	r3, [pc, #88]	@ (8005cb0 <xTaskResumeAll+0x130>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f1      	bne.n	8005c4c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005c68:	4b12      	ldr	r3, [pc, #72]	@ (8005cb4 <xTaskResumeAll+0x134>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c6e:	4b10      	ldr	r3, [pc, #64]	@ (8005cb0 <xTaskResumeAll+0x130>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb8 <xTaskResumeAll+0x138>)
 8005c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c8a:	f001 f8ff 	bl	8006e8c <vPortExitCritical>

	return xAlreadyYielded;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000eb0 	.word	0x20000eb0
 8005c9c:	20000e88 	.word	0x20000e88
 8005ca0:	20000e48 	.word	0x20000e48
 8005ca4:	20000e90 	.word	0x20000e90
 8005ca8:	200009b8 	.word	0x200009b8
 8005cac:	200009b4 	.word	0x200009b4
 8005cb0:	20000e9c 	.word	0x20000e9c
 8005cb4:	20000e98 	.word	0x20000e98
 8005cb8:	e000ed04 	.word	0xe000ed04

08005cbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005cc2:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <xTaskGetTickCount+0x1c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005cc8:	687b      	ldr	r3, [r7, #4]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000e8c 	.word	0x20000e8c

08005cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8005e24 <xTaskIncrementTick+0x148>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 8090 	bne.w	8005e10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8005e28 <xTaskIncrementTick+0x14c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8005e28 <xTaskIncrementTick+0x14c>)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d121      	bne.n	8005d48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d04:	4b49      	ldr	r3, [pc, #292]	@ (8005e2c <xTaskIncrementTick+0x150>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	603b      	str	r3, [r7, #0]
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	e7fd      	b.n	8005d22 <xTaskIncrementTick+0x46>
 8005d26:	4b41      	ldr	r3, [pc, #260]	@ (8005e2c <xTaskIncrementTick+0x150>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	4b40      	ldr	r3, [pc, #256]	@ (8005e30 <xTaskIncrementTick+0x154>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a3e      	ldr	r2, [pc, #248]	@ (8005e2c <xTaskIncrementTick+0x150>)
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4a3e      	ldr	r2, [pc, #248]	@ (8005e30 <xTaskIncrementTick+0x154>)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e34 <xTaskIncrementTick+0x158>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	4a3c      	ldr	r2, [pc, #240]	@ (8005e34 <xTaskIncrementTick+0x158>)
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	f000 fae2 	bl	800630c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d48:	4b3b      	ldr	r3, [pc, #236]	@ (8005e38 <xTaskIncrementTick+0x15c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d349      	bcc.n	8005de6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d52:	4b36      	ldr	r3, [pc, #216]	@ (8005e2c <xTaskIncrementTick+0x150>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d104      	bne.n	8005d66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d5c:	4b36      	ldr	r3, [pc, #216]	@ (8005e38 <xTaskIncrementTick+0x15c>)
 8005d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d62:	601a      	str	r2, [r3, #0]
					break;
 8005d64:	e03f      	b.n	8005de6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d66:	4b31      	ldr	r3, [pc, #196]	@ (8005e2c <xTaskIncrementTick+0x150>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d203      	bcs.n	8005d86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8005e38 <xTaskIncrementTick+0x15c>)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d84:	e02f      	b.n	8005de6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe ff62 	bl	8004c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	3318      	adds	r3, #24
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fe ff59 	bl	8004c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da6:	4b25      	ldr	r3, [pc, #148]	@ (8005e3c <xTaskIncrementTick+0x160>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d903      	bls.n	8005db6 <xTaskIncrementTick+0xda>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	4a22      	ldr	r2, [pc, #136]	@ (8005e3c <xTaskIncrementTick+0x160>)
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e40 <xTaskIncrementTick+0x164>)
 8005dc4:	441a      	add	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f7fe fee4 	bl	8004b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e44 <xTaskIncrementTick+0x168>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d3b8      	bcc.n	8005d52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de4:	e7b5      	b.n	8005d52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005de6:	4b17      	ldr	r3, [pc, #92]	@ (8005e44 <xTaskIncrementTick+0x168>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dec:	4914      	ldr	r1, [pc, #80]	@ (8005e40 <xTaskIncrementTick+0x164>)
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	440b      	add	r3, r1
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d901      	bls.n	8005e02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e02:	4b11      	ldr	r3, [pc, #68]	@ (8005e48 <xTaskIncrementTick+0x16c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	e004      	b.n	8005e1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e10:	4b0e      	ldr	r3, [pc, #56]	@ (8005e4c <xTaskIncrementTick+0x170>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3301      	adds	r3, #1
 8005e16:	4a0d      	ldr	r2, [pc, #52]	@ (8005e4c <xTaskIncrementTick+0x170>)
 8005e18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e1a:	697b      	ldr	r3, [r7, #20]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000eb0 	.word	0x20000eb0
 8005e28:	20000e8c 	.word	0x20000e8c
 8005e2c:	20000e40 	.word	0x20000e40
 8005e30:	20000e44 	.word	0x20000e44
 8005e34:	20000ea0 	.word	0x20000ea0
 8005e38:	20000ea8 	.word	0x20000ea8
 8005e3c:	20000e90 	.word	0x20000e90
 8005e40:	200009b8 	.word	0x200009b8
 8005e44:	200009b4 	.word	0x200009b4
 8005e48:	20000e9c 	.word	0x20000e9c
 8005e4c:	20000e98 	.word	0x20000e98

08005e50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e56:	4b2b      	ldr	r3, [pc, #172]	@ (8005f04 <vTaskSwitchContext+0xb4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8005f08 <vTaskSwitchContext+0xb8>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e64:	e047      	b.n	8005ef6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005e66:	4b28      	ldr	r3, [pc, #160]	@ (8005f08 <vTaskSwitchContext+0xb8>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e6c:	4b27      	ldr	r3, [pc, #156]	@ (8005f0c <vTaskSwitchContext+0xbc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	e011      	b.n	8005e98 <vTaskSwitchContext+0x48>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <vTaskSwitchContext+0x42>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	607b      	str	r3, [r7, #4]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <vTaskSwitchContext+0x3e>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	491d      	ldr	r1, [pc, #116]	@ (8005f10 <vTaskSwitchContext+0xc0>)
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0e3      	beq.n	8005e74 <vTaskSwitchContext+0x24>
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4a16      	ldr	r2, [pc, #88]	@ (8005f10 <vTaskSwitchContext+0xc0>)
 8005eb8:	4413      	add	r3, r2
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d104      	bne.n	8005edc <vTaskSwitchContext+0x8c>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	605a      	str	r2, [r3, #4]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8005f14 <vTaskSwitchContext+0xc4>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4a09      	ldr	r2, [pc, #36]	@ (8005f0c <vTaskSwitchContext+0xbc>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005eec:	4b09      	ldr	r3, [pc, #36]	@ (8005f14 <vTaskSwitchContext+0xc4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3354      	adds	r3, #84	@ 0x54
 8005ef2:	4a09      	ldr	r2, [pc, #36]	@ (8005f18 <vTaskSwitchContext+0xc8>)
 8005ef4:	6013      	str	r3, [r2, #0]
}
 8005ef6:	bf00      	nop
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000eb0 	.word	0x20000eb0
 8005f08:	20000e9c 	.word	0x20000e9c
 8005f0c:	20000e90 	.word	0x20000e90
 8005f10:	200009b8 	.word	0x200009b8
 8005f14:	200009b4 	.word	0x200009b4
 8005f18:	20000010 	.word	0x20000010

08005f1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10b      	bne.n	8005f44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	60fb      	str	r3, [r7, #12]
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	e7fd      	b.n	8005f40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f44:	4b07      	ldr	r3, [pc, #28]	@ (8005f64 <vTaskPlaceOnEventList+0x48>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3318      	adds	r3, #24
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7fe fe48 	bl	8004be2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f52:	2101      	movs	r1, #1
 8005f54:	6838      	ldr	r0, [r7, #0]
 8005f56:	f000 fa87 	bl	8006468 <prvAddCurrentTaskToDelayedList>
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	200009b4 	.word	0x200009b4

08005f68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10b      	bne.n	8005f92 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	617b      	str	r3, [r7, #20]
}
 8005f8c:	bf00      	nop
 8005f8e:	bf00      	nop
 8005f90:	e7fd      	b.n	8005f8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f92:	4b0a      	ldr	r3, [pc, #40]	@ (8005fbc <vTaskPlaceOnEventListRestricted+0x54>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3318      	adds	r3, #24
 8005f98:	4619      	mov	r1, r3
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7fe fdfd 	bl	8004b9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005faa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	68b8      	ldr	r0, [r7, #8]
 8005fb0:	f000 fa5a 	bl	8006468 <prvAddCurrentTaskToDelayedList>
	}
 8005fb4:	bf00      	nop
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	200009b4 	.word	0x200009b4

08005fc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10b      	bne.n	8005fee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	60fb      	str	r3, [r7, #12]
}
 8005fe8:	bf00      	nop
 8005fea:	bf00      	nop
 8005fec:	e7fd      	b.n	8005fea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3318      	adds	r3, #24
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe fe2e 	bl	8004c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8006070 <xTaskRemoveFromEventList+0xb0>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d11d      	bne.n	800603c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	3304      	adds	r3, #4
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe fe25 	bl	8004c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600e:	4b19      	ldr	r3, [pc, #100]	@ (8006074 <xTaskRemoveFromEventList+0xb4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d903      	bls.n	800601e <xTaskRemoveFromEventList+0x5e>
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601a:	4a16      	ldr	r2, [pc, #88]	@ (8006074 <xTaskRemoveFromEventList+0xb4>)
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4a13      	ldr	r2, [pc, #76]	@ (8006078 <xTaskRemoveFromEventList+0xb8>)
 800602c:	441a      	add	r2, r3
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f7fe fdb0 	bl	8004b9a <vListInsertEnd>
 800603a:	e005      	b.n	8006048 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	3318      	adds	r3, #24
 8006040:	4619      	mov	r1, r3
 8006042:	480e      	ldr	r0, [pc, #56]	@ (800607c <xTaskRemoveFromEventList+0xbc>)
 8006044:	f7fe fda9 	bl	8004b9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604c:	4b0c      	ldr	r3, [pc, #48]	@ (8006080 <xTaskRemoveFromEventList+0xc0>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006052:	429a      	cmp	r2, r3
 8006054:	d905      	bls.n	8006062 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006056:	2301      	movs	r3, #1
 8006058:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800605a:	4b0a      	ldr	r3, [pc, #40]	@ (8006084 <xTaskRemoveFromEventList+0xc4>)
 800605c:	2201      	movs	r2, #1
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	e001      	b.n	8006066 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006066:	697b      	ldr	r3, [r7, #20]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20000eb0 	.word	0x20000eb0
 8006074:	20000e90 	.word	0x20000e90
 8006078:	200009b8 	.word	0x200009b8
 800607c:	20000e48 	.word	0x20000e48
 8006080:	200009b4 	.word	0x200009b4
 8006084:	20000e9c 	.word	0x20000e9c

08006088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006090:	4b06      	ldr	r3, [pc, #24]	@ (80060ac <vTaskInternalSetTimeOutState+0x24>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006098:	4b05      	ldr	r3, [pc, #20]	@ (80060b0 <vTaskInternalSetTimeOutState+0x28>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	605a      	str	r2, [r3, #4]
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	20000ea0 	.word	0x20000ea0
 80060b0:	20000e8c 	.word	0x20000e8c

080060b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	613b      	str	r3, [r7, #16]
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80060e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	60fb      	str	r3, [r7, #12]
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop
 80060f8:	e7fd      	b.n	80060f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80060fa:	f000 fe95 	bl	8006e28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006174 <xTaskCheckForTimeOut+0xc0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d102      	bne.n	800611e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006118:	2300      	movs	r3, #0
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	e023      	b.n	8006166 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b15      	ldr	r3, [pc, #84]	@ (8006178 <xTaskCheckForTimeOut+0xc4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d007      	beq.n	800613a <xTaskCheckForTimeOut+0x86>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	429a      	cmp	r2, r3
 8006132:	d302      	bcc.n	800613a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	e015      	b.n	8006166 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	429a      	cmp	r2, r3
 8006142:	d20b      	bcs.n	800615c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	1ad2      	subs	r2, r2, r3
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ff99 	bl	8006088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	e004      	b.n	8006166 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006162:	2301      	movs	r3, #1
 8006164:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006166:	f000 fe91 	bl	8006e8c <vPortExitCritical>

	return xReturn;
 800616a:	69fb      	ldr	r3, [r7, #28]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3720      	adds	r7, #32
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	20000e8c 	.word	0x20000e8c
 8006178:	20000ea0 	.word	0x20000ea0

0800617c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006180:	4b03      	ldr	r3, [pc, #12]	@ (8006190 <vTaskMissedYield+0x14>)
 8006182:	2201      	movs	r2, #1
 8006184:	601a      	str	r2, [r3, #0]
}
 8006186:	bf00      	nop
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	20000e9c 	.word	0x20000e9c

08006194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800619c:	f000 f852 	bl	8006244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061a0:	4b06      	ldr	r3, [pc, #24]	@ (80061bc <prvIdleTask+0x28>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d9f9      	bls.n	800619c <prvIdleTask+0x8>
			{
				taskYIELD();
 80061a8:	4b05      	ldr	r3, [pc, #20]	@ (80061c0 <prvIdleTask+0x2c>)
 80061aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061b8:	e7f0      	b.n	800619c <prvIdleTask+0x8>
 80061ba:	bf00      	nop
 80061bc:	200009b8 	.word	0x200009b8
 80061c0:	e000ed04 	.word	0xe000ed04

080061c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061ca:	2300      	movs	r3, #0
 80061cc:	607b      	str	r3, [r7, #4]
 80061ce:	e00c      	b.n	80061ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4a12      	ldr	r2, [pc, #72]	@ (8006224 <prvInitialiseTaskLists+0x60>)
 80061dc:	4413      	add	r3, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe fcae 	bl	8004b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3301      	adds	r3, #1
 80061e8:	607b      	str	r3, [r7, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b37      	cmp	r3, #55	@ 0x37
 80061ee:	d9ef      	bls.n	80061d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061f0:	480d      	ldr	r0, [pc, #52]	@ (8006228 <prvInitialiseTaskLists+0x64>)
 80061f2:	f7fe fca5 	bl	8004b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061f6:	480d      	ldr	r0, [pc, #52]	@ (800622c <prvInitialiseTaskLists+0x68>)
 80061f8:	f7fe fca2 	bl	8004b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061fc:	480c      	ldr	r0, [pc, #48]	@ (8006230 <prvInitialiseTaskLists+0x6c>)
 80061fe:	f7fe fc9f 	bl	8004b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006202:	480c      	ldr	r0, [pc, #48]	@ (8006234 <prvInitialiseTaskLists+0x70>)
 8006204:	f7fe fc9c 	bl	8004b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006208:	480b      	ldr	r0, [pc, #44]	@ (8006238 <prvInitialiseTaskLists+0x74>)
 800620a:	f7fe fc99 	bl	8004b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800620e:	4b0b      	ldr	r3, [pc, #44]	@ (800623c <prvInitialiseTaskLists+0x78>)
 8006210:	4a05      	ldr	r2, [pc, #20]	@ (8006228 <prvInitialiseTaskLists+0x64>)
 8006212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006214:	4b0a      	ldr	r3, [pc, #40]	@ (8006240 <prvInitialiseTaskLists+0x7c>)
 8006216:	4a05      	ldr	r2, [pc, #20]	@ (800622c <prvInitialiseTaskLists+0x68>)
 8006218:	601a      	str	r2, [r3, #0]
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	200009b8 	.word	0x200009b8
 8006228:	20000e18 	.word	0x20000e18
 800622c:	20000e2c 	.word	0x20000e2c
 8006230:	20000e48 	.word	0x20000e48
 8006234:	20000e5c 	.word	0x20000e5c
 8006238:	20000e74 	.word	0x20000e74
 800623c:	20000e40 	.word	0x20000e40
 8006240:	20000e44 	.word	0x20000e44

08006244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800624a:	e019      	b.n	8006280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800624c:	f000 fdec 	bl	8006e28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006250:	4b10      	ldr	r3, [pc, #64]	@ (8006294 <prvCheckTasksWaitingTermination+0x50>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3304      	adds	r3, #4
 800625c:	4618      	mov	r0, r3
 800625e:	f7fe fcf9 	bl	8004c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006262:	4b0d      	ldr	r3, [pc, #52]	@ (8006298 <prvCheckTasksWaitingTermination+0x54>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3b01      	subs	r3, #1
 8006268:	4a0b      	ldr	r2, [pc, #44]	@ (8006298 <prvCheckTasksWaitingTermination+0x54>)
 800626a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800626c:	4b0b      	ldr	r3, [pc, #44]	@ (800629c <prvCheckTasksWaitingTermination+0x58>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3b01      	subs	r3, #1
 8006272:	4a0a      	ldr	r2, [pc, #40]	@ (800629c <prvCheckTasksWaitingTermination+0x58>)
 8006274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006276:	f000 fe09 	bl	8006e8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f810 	bl	80062a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006280:	4b06      	ldr	r3, [pc, #24]	@ (800629c <prvCheckTasksWaitingTermination+0x58>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e1      	bne.n	800624c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000e5c 	.word	0x20000e5c
 8006298:	20000e88 	.word	0x20000e88
 800629c:	20000e70 	.word	0x20000e70

080062a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3354      	adds	r3, #84	@ 0x54
 80062ac:	4618      	mov	r0, r3
 80062ae:	f001 f8d3 	bl	8007458 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d108      	bne.n	80062ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 ffa1 	bl	8007208 <vPortFree>
				vPortFree( pxTCB );
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 ff9e 	bl	8007208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062cc:	e019      	b.n	8006302 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d103      	bne.n	80062e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 ff95 	bl	8007208 <vPortFree>
	}
 80062de:	e010      	b.n	8006302 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d00b      	beq.n	8006302 <prvDeleteTCB+0x62>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	60fb      	str	r3, [r7, #12]
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	e7fd      	b.n	80062fe <prvDeleteTCB+0x5e>
	}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006312:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <prvResetNextTaskUnblockTime+0x38>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800631c:	4b0a      	ldr	r3, [pc, #40]	@ (8006348 <prvResetNextTaskUnblockTime+0x3c>)
 800631e:	f04f 32ff 	mov.w	r2, #4294967295
 8006322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006324:	e008      	b.n	8006338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006326:	4b07      	ldr	r3, [pc, #28]	@ (8006344 <prvResetNextTaskUnblockTime+0x38>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	4a04      	ldr	r2, [pc, #16]	@ (8006348 <prvResetNextTaskUnblockTime+0x3c>)
 8006336:	6013      	str	r3, [r2, #0]
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	20000e40 	.word	0x20000e40
 8006348:	20000ea8 	.word	0x20000ea8

0800634c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006352:	4b0b      	ldr	r3, [pc, #44]	@ (8006380 <xTaskGetSchedulerState+0x34>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d102      	bne.n	8006360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800635a:	2301      	movs	r3, #1
 800635c:	607b      	str	r3, [r7, #4]
 800635e:	e008      	b.n	8006372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006360:	4b08      	ldr	r3, [pc, #32]	@ (8006384 <xTaskGetSchedulerState+0x38>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d102      	bne.n	800636e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006368:	2302      	movs	r3, #2
 800636a:	607b      	str	r3, [r7, #4]
 800636c:	e001      	b.n	8006372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006372:	687b      	ldr	r3, [r7, #4]
	}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20000e94 	.word	0x20000e94
 8006384:	20000eb0 	.word	0x20000eb0

08006388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d058      	beq.n	8006450 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800639e:	4b2f      	ldr	r3, [pc, #188]	@ (800645c <xTaskPriorityDisinherit+0xd4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d00b      	beq.n	80063c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	60fb      	str	r3, [r7, #12]
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	e7fd      	b.n	80063bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10b      	bne.n	80063e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	60bb      	str	r3, [r7, #8]
}
 80063da:	bf00      	nop
 80063dc:	bf00      	nop
 80063de:	e7fd      	b.n	80063dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e4:	1e5a      	subs	r2, r3, #1
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d02c      	beq.n	8006450 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d128      	bne.n	8006450 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	3304      	adds	r3, #4
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fc26 	bl	8004c54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006420:	4b0f      	ldr	r3, [pc, #60]	@ (8006460 <xTaskPriorityDisinherit+0xd8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d903      	bls.n	8006430 <xTaskPriorityDisinherit+0xa8>
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642c:	4a0c      	ldr	r2, [pc, #48]	@ (8006460 <xTaskPriorityDisinherit+0xd8>)
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4a09      	ldr	r2, [pc, #36]	@ (8006464 <xTaskPriorityDisinherit+0xdc>)
 800643e:	441a      	add	r2, r3
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	3304      	adds	r3, #4
 8006444:	4619      	mov	r1, r3
 8006446:	4610      	mov	r0, r2
 8006448:	f7fe fba7 	bl	8004b9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006450:	697b      	ldr	r3, [r7, #20]
	}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	200009b4 	.word	0x200009b4
 8006460:	20000e90 	.word	0x20000e90
 8006464:	200009b8 	.word	0x200009b8

08006468 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006472:	4b21      	ldr	r3, [pc, #132]	@ (80064f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006478:	4b20      	ldr	r3, [pc, #128]	@ (80064fc <prvAddCurrentTaskToDelayedList+0x94>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3304      	adds	r3, #4
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fbe8 	bl	8004c54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d10a      	bne.n	80064a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d007      	beq.n	80064a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006492:	4b1a      	ldr	r3, [pc, #104]	@ (80064fc <prvAddCurrentTaskToDelayedList+0x94>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3304      	adds	r3, #4
 8006498:	4619      	mov	r1, r3
 800649a:	4819      	ldr	r0, [pc, #100]	@ (8006500 <prvAddCurrentTaskToDelayedList+0x98>)
 800649c:	f7fe fb7d 	bl	8004b9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064a0:	e026      	b.n	80064f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4413      	add	r3, r2
 80064a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064aa:	4b14      	ldr	r3, [pc, #80]	@ (80064fc <prvAddCurrentTaskToDelayedList+0x94>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d209      	bcs.n	80064ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ba:	4b12      	ldr	r3, [pc, #72]	@ (8006504 <prvAddCurrentTaskToDelayedList+0x9c>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b0f      	ldr	r3, [pc, #60]	@ (80064fc <prvAddCurrentTaskToDelayedList+0x94>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f7fe fb8b 	bl	8004be2 <vListInsert>
}
 80064cc:	e010      	b.n	80064f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006508 <prvAddCurrentTaskToDelayedList+0xa0>)
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <prvAddCurrentTaskToDelayedList+0x94>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3304      	adds	r3, #4
 80064d8:	4619      	mov	r1, r3
 80064da:	4610      	mov	r0, r2
 80064dc:	f7fe fb81 	bl	8004be2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064e0:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <prvAddCurrentTaskToDelayedList+0xa4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d202      	bcs.n	80064f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064ea:	4a08      	ldr	r2, [pc, #32]	@ (800650c <prvAddCurrentTaskToDelayedList+0xa4>)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	6013      	str	r3, [r2, #0]
}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20000e8c 	.word	0x20000e8c
 80064fc:	200009b4 	.word	0x200009b4
 8006500:	20000e74 	.word	0x20000e74
 8006504:	20000e44 	.word	0x20000e44
 8006508:	20000e40 	.word	0x20000e40
 800650c:	20000ea8 	.word	0x20000ea8

08006510 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08a      	sub	sp, #40	@ 0x28
 8006514:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006516:	2300      	movs	r3, #0
 8006518:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800651a:	f000 fb13 	bl	8006b44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800651e:	4b1d      	ldr	r3, [pc, #116]	@ (8006594 <xTimerCreateTimerTask+0x84>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d021      	beq.n	800656a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800652e:	1d3a      	adds	r2, r7, #4
 8006530:	f107 0108 	add.w	r1, r7, #8
 8006534:	f107 030c 	add.w	r3, r7, #12
 8006538:	4618      	mov	r0, r3
 800653a:	f7fe fae7 	bl	8004b0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	9202      	str	r2, [sp, #8]
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	2302      	movs	r3, #2
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	2300      	movs	r3, #0
 800654e:	460a      	mov	r2, r1
 8006550:	4911      	ldr	r1, [pc, #68]	@ (8006598 <xTimerCreateTimerTask+0x88>)
 8006552:	4812      	ldr	r0, [pc, #72]	@ (800659c <xTimerCreateTimerTask+0x8c>)
 8006554:	f7ff f8a2 	bl	800569c <xTaskCreateStatic>
 8006558:	4603      	mov	r3, r0
 800655a:	4a11      	ldr	r2, [pc, #68]	@ (80065a0 <xTimerCreateTimerTask+0x90>)
 800655c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800655e:	4b10      	ldr	r3, [pc, #64]	@ (80065a0 <xTimerCreateTimerTask+0x90>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006566:	2301      	movs	r3, #1
 8006568:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10b      	bne.n	8006588 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	613b      	str	r3, [r7, #16]
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	e7fd      	b.n	8006584 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006588:	697b      	ldr	r3, [r7, #20]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000ee4 	.word	0x20000ee4
 8006598:	08007644 	.word	0x08007644
 800659c:	080066dd 	.word	0x080066dd
 80065a0:	20000ee8 	.word	0x20000ee8

080065a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08a      	sub	sp, #40	@ 0x28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <xTimerGenericCommand+0x30>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	623b      	str	r3, [r7, #32]
}
 80065ce:	bf00      	nop
 80065d0:	bf00      	nop
 80065d2:	e7fd      	b.n	80065d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80065d4:	4b19      	ldr	r3, [pc, #100]	@ (800663c <xTimerGenericCommand+0x98>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d02a      	beq.n	8006632 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b05      	cmp	r3, #5
 80065ec:	dc18      	bgt.n	8006620 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065ee:	f7ff fead 	bl	800634c <xTaskGetSchedulerState>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d109      	bne.n	800660c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065f8:	4b10      	ldr	r3, [pc, #64]	@ (800663c <xTimerGenericCommand+0x98>)
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	f107 0110 	add.w	r1, r7, #16
 8006600:	2300      	movs	r3, #0
 8006602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006604:	f7fe fc5a 	bl	8004ebc <xQueueGenericSend>
 8006608:	6278      	str	r0, [r7, #36]	@ 0x24
 800660a:	e012      	b.n	8006632 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800660c:	4b0b      	ldr	r3, [pc, #44]	@ (800663c <xTimerGenericCommand+0x98>)
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	f107 0110 	add.w	r1, r7, #16
 8006614:	2300      	movs	r3, #0
 8006616:	2200      	movs	r2, #0
 8006618:	f7fe fc50 	bl	8004ebc <xQueueGenericSend>
 800661c:	6278      	str	r0, [r7, #36]	@ 0x24
 800661e:	e008      	b.n	8006632 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006620:	4b06      	ldr	r3, [pc, #24]	@ (800663c <xTimerGenericCommand+0x98>)
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	f107 0110 	add.w	r1, r7, #16
 8006628:	2300      	movs	r3, #0
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	f7fe fd48 	bl	80050c0 <xQueueGenericSendFromISR>
 8006630:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006634:	4618      	mov	r0, r3
 8006636:	3728      	adds	r7, #40	@ 0x28
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20000ee4 	.word	0x20000ee4

08006640 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af02      	add	r7, sp, #8
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664a:	4b23      	ldr	r3, [pc, #140]	@ (80066d8 <prvProcessExpiredTimer+0x98>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	3304      	adds	r3, #4
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe fafb 	bl	8004c54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d023      	beq.n	80066b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	699a      	ldr	r2, [r3, #24]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	18d1      	adds	r1, r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	6978      	ldr	r0, [r7, #20]
 800667a:	f000 f8d5 	bl	8006828 <prvInsertTimerInActiveList>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d020      	beq.n	80066c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006684:	2300      	movs	r3, #0
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	2300      	movs	r3, #0
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	2100      	movs	r1, #0
 800668e:	6978      	ldr	r0, [r7, #20]
 8006690:	f7ff ff88 	bl	80065a4 <xTimerGenericCommand>
 8006694:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d114      	bne.n	80066c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	60fb      	str	r3, [r7, #12]
}
 80066ae:	bf00      	nop
 80066b0:	bf00      	nop
 80066b2:	e7fd      	b.n	80066b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	6978      	ldr	r0, [r7, #20]
 80066cc:	4798      	blx	r3
}
 80066ce:	bf00      	nop
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20000edc 	.word	0x20000edc

080066dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066e4:	f107 0308 	add.w	r3, r7, #8
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 f859 	bl	80067a0 <prvGetNextExpireTime>
 80066ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4619      	mov	r1, r3
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f805 	bl	8006704 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066fa:	f000 f8d7 	bl	80068ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066fe:	bf00      	nop
 8006700:	e7f0      	b.n	80066e4 <prvTimerTask+0x8>
	...

08006704 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800670e:	f7ff fa29 	bl	8005b64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006712:	f107 0308 	add.w	r3, r7, #8
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f866 	bl	80067e8 <prvSampleTimeNow>
 800671c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d130      	bne.n	8006786 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <prvProcessTimerOrBlockTask+0x3c>
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	429a      	cmp	r2, r3
 8006730:	d806      	bhi.n	8006740 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006732:	f7ff fa25 	bl	8005b80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff ff81 	bl	8006640 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800673e:	e024      	b.n	800678a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d008      	beq.n	8006758 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006746:	4b13      	ldr	r3, [pc, #76]	@ (8006794 <prvProcessTimerOrBlockTask+0x90>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <prvProcessTimerOrBlockTask+0x50>
 8006750:	2301      	movs	r3, #1
 8006752:	e000      	b.n	8006756 <prvProcessTimerOrBlockTask+0x52>
 8006754:	2300      	movs	r3, #0
 8006756:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006758:	4b0f      	ldr	r3, [pc, #60]	@ (8006798 <prvProcessTimerOrBlockTask+0x94>)
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	4619      	mov	r1, r3
 8006766:	f7fe ff65 	bl	8005634 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800676a:	f7ff fa09 	bl	8005b80 <xTaskResumeAll>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006774:	4b09      	ldr	r3, [pc, #36]	@ (800679c <prvProcessTimerOrBlockTask+0x98>)
 8006776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	f3bf 8f6f 	isb	sy
}
 8006784:	e001      	b.n	800678a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006786:	f7ff f9fb 	bl	8005b80 <xTaskResumeAll>
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000ee0 	.word	0x20000ee0
 8006798:	20000ee4 	.word	0x20000ee4
 800679c:	e000ed04 	.word	0xe000ed04

080067a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067a8:	4b0e      	ldr	r3, [pc, #56]	@ (80067e4 <prvGetNextExpireTime+0x44>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <prvGetNextExpireTime+0x16>
 80067b2:	2201      	movs	r2, #1
 80067b4:	e000      	b.n	80067b8 <prvGetNextExpireTime+0x18>
 80067b6:	2200      	movs	r2, #0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067c4:	4b07      	ldr	r3, [pc, #28]	@ (80067e4 <prvGetNextExpireTime+0x44>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	e001      	b.n	80067d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80067d4:	68fb      	ldr	r3, [r7, #12]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20000edc 	.word	0x20000edc

080067e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067f0:	f7ff fa64 	bl	8005cbc <xTaskGetTickCount>
 80067f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <prvSampleTimeNow+0x3c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d205      	bcs.n	800680c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006800:	f000 f93a 	bl	8006a78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	e002      	b.n	8006812 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006812:	4a04      	ldr	r2, [pc, #16]	@ (8006824 <prvSampleTimeNow+0x3c>)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006818:	68fb      	ldr	r3, [r7, #12]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000eec 	.word	0x20000eec

08006828 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d812      	bhi.n	8006874 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	1ad2      	subs	r2, r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	429a      	cmp	r2, r3
 800685a:	d302      	bcc.n	8006862 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800685c:	2301      	movs	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e01b      	b.n	800689a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006862:	4b10      	ldr	r3, [pc, #64]	@ (80068a4 <prvInsertTimerInActiveList+0x7c>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3304      	adds	r3, #4
 800686a:	4619      	mov	r1, r3
 800686c:	4610      	mov	r0, r2
 800686e:	f7fe f9b8 	bl	8004be2 <vListInsert>
 8006872:	e012      	b.n	800689a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d206      	bcs.n	800688a <prvInsertTimerInActiveList+0x62>
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d302      	bcc.n	800688a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006884:	2301      	movs	r3, #1
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e007      	b.n	800689a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800688a:	4b07      	ldr	r3, [pc, #28]	@ (80068a8 <prvInsertTimerInActiveList+0x80>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3304      	adds	r3, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f7fe f9a4 	bl	8004be2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800689a:	697b      	ldr	r3, [r7, #20]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000ee0 	.word	0x20000ee0
 80068a8:	20000edc 	.word	0x20000edc

080068ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08e      	sub	sp, #56	@ 0x38
 80068b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068b2:	e0ce      	b.n	8006a52 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	da19      	bge.n	80068ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80068ba:	1d3b      	adds	r3, r7, #4
 80068bc:	3304      	adds	r3, #4
 80068be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10b      	bne.n	80068de <prvProcessReceivedCommands+0x32>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	61fb      	str	r3, [r7, #28]
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	e7fd      	b.n	80068da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80068de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068e4:	6850      	ldr	r0, [r2, #4]
 80068e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068e8:	6892      	ldr	r2, [r2, #8]
 80068ea:	4611      	mov	r1, r2
 80068ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f2c0 80ae 	blt.w	8006a52 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d004      	beq.n	800690c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006904:	3304      	adds	r3, #4
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe f9a4 	bl	8004c54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800690c:	463b      	mov	r3, r7
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff ff6a 	bl	80067e8 <prvSampleTimeNow>
 8006914:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b09      	cmp	r3, #9
 800691a:	f200 8097 	bhi.w	8006a4c <prvProcessReceivedCommands+0x1a0>
 800691e:	a201      	add	r2, pc, #4	@ (adr r2, 8006924 <prvProcessReceivedCommands+0x78>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	0800694d 	.word	0x0800694d
 8006928:	0800694d 	.word	0x0800694d
 800692c:	0800694d 	.word	0x0800694d
 8006930:	080069c3 	.word	0x080069c3
 8006934:	080069d7 	.word	0x080069d7
 8006938:	08006a23 	.word	0x08006a23
 800693c:	0800694d 	.word	0x0800694d
 8006940:	0800694d 	.word	0x0800694d
 8006944:	080069c3 	.word	0x080069c3
 8006948:	080069d7 	.word	0x080069d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800694c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	b2da      	uxtb	r2, r3
 8006958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	18d1      	adds	r1, r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800696a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800696c:	f7ff ff5c 	bl	8006828 <prvInsertTimerInActiveList>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d06c      	beq.n	8006a50 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800697c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800697e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006980:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d061      	beq.n	8006a50 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	441a      	add	r2, r3
 8006994:	2300      	movs	r3, #0
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	2300      	movs	r3, #0
 800699a:	2100      	movs	r1, #0
 800699c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800699e:	f7ff fe01 	bl	80065a4 <xTimerGenericCommand>
 80069a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d152      	bne.n	8006a50 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	61bb      	str	r3, [r7, #24]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80069d4:	e03d      	b.n	8006a52 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069dc:	f043 0301 	orr.w	r3, r3, #1
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <prvProcessReceivedCommands+0x162>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	617b      	str	r3, [r7, #20]
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	18d1      	adds	r1, r2, r3
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a1c:	f7ff ff04 	bl	8006828 <prvInsertTimerInActiveList>
					break;
 8006a20:	e017      	b.n	8006a52 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d103      	bne.n	8006a38 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006a30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a32:	f000 fbe9 	bl	8007208 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a36:	e00c      	b.n	8006a52 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a4a:	e002      	b.n	8006a52 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006a4c:	bf00      	nop
 8006a4e:	e000      	b.n	8006a52 <prvProcessReceivedCommands+0x1a6>
					break;
 8006a50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a52:	4b08      	ldr	r3, [pc, #32]	@ (8006a74 <prvProcessReceivedCommands+0x1c8>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	1d39      	adds	r1, r7, #4
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe fbce 	bl	80051fc <xQueueReceive>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f47f af26 	bne.w	80068b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	3730      	adds	r7, #48	@ 0x30
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000ee4 	.word	0x20000ee4

08006a78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a7e:	e049      	b.n	8006b14 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a80:	4b2e      	ldr	r3, [pc, #184]	@ (8006b3c <prvSwitchTimerLists+0xc4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8006b3c <prvSwitchTimerLists+0xc4>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fe f8db 	bl	8004c54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d02f      	beq.n	8006b14 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d90e      	bls.n	8006ae4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b3c <prvSwitchTimerLists+0xc4>)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4619      	mov	r1, r3
 8006adc:	4610      	mov	r0, r2
 8006ade:	f7fe f880 	bl	8004be2 <vListInsert>
 8006ae2:	e017      	b.n	8006b14 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	2100      	movs	r1, #0
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff fd58 	bl	80065a4 <xTimerGenericCommand>
 8006af4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10b      	bne.n	8006b14 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	603b      	str	r3, [r7, #0]
}
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	e7fd      	b.n	8006b10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b14:	4b09      	ldr	r3, [pc, #36]	@ (8006b3c <prvSwitchTimerLists+0xc4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1b0      	bne.n	8006a80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b1e:	4b07      	ldr	r3, [pc, #28]	@ (8006b3c <prvSwitchTimerLists+0xc4>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b24:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <prvSwitchTimerLists+0xc8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a04      	ldr	r2, [pc, #16]	@ (8006b3c <prvSwitchTimerLists+0xc4>)
 8006b2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b2c:	4a04      	ldr	r2, [pc, #16]	@ (8006b40 <prvSwitchTimerLists+0xc8>)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	6013      	str	r3, [r2, #0]
}
 8006b32:	bf00      	nop
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000edc 	.word	0x20000edc
 8006b40:	20000ee0 	.word	0x20000ee0

08006b44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b4a:	f000 f96d 	bl	8006e28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b4e:	4b15      	ldr	r3, [pc, #84]	@ (8006ba4 <prvCheckForValidListAndQueue+0x60>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d120      	bne.n	8006b98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b56:	4814      	ldr	r0, [pc, #80]	@ (8006ba8 <prvCheckForValidListAndQueue+0x64>)
 8006b58:	f7fd fff2 	bl	8004b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b5c:	4813      	ldr	r0, [pc, #76]	@ (8006bac <prvCheckForValidListAndQueue+0x68>)
 8006b5e:	f7fd ffef 	bl	8004b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b62:	4b13      	ldr	r3, [pc, #76]	@ (8006bb0 <prvCheckForValidListAndQueue+0x6c>)
 8006b64:	4a10      	ldr	r2, [pc, #64]	@ (8006ba8 <prvCheckForValidListAndQueue+0x64>)
 8006b66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b68:	4b12      	ldr	r3, [pc, #72]	@ (8006bb4 <prvCheckForValidListAndQueue+0x70>)
 8006b6a:	4a10      	ldr	r2, [pc, #64]	@ (8006bac <prvCheckForValidListAndQueue+0x68>)
 8006b6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	4b11      	ldr	r3, [pc, #68]	@ (8006bb8 <prvCheckForValidListAndQueue+0x74>)
 8006b74:	4a11      	ldr	r2, [pc, #68]	@ (8006bbc <prvCheckForValidListAndQueue+0x78>)
 8006b76:	2110      	movs	r1, #16
 8006b78:	200a      	movs	r0, #10
 8006b7a:	f7fe f8ff 	bl	8004d7c <xQueueGenericCreateStatic>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4a08      	ldr	r2, [pc, #32]	@ (8006ba4 <prvCheckForValidListAndQueue+0x60>)
 8006b82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b84:	4b07      	ldr	r3, [pc, #28]	@ (8006ba4 <prvCheckForValidListAndQueue+0x60>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ba4 <prvCheckForValidListAndQueue+0x60>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	490b      	ldr	r1, [pc, #44]	@ (8006bc0 <prvCheckForValidListAndQueue+0x7c>)
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fd24 	bl	80055e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b98:	f000 f978 	bl	8006e8c <vPortExitCritical>
}
 8006b9c:	bf00      	nop
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000ee4 	.word	0x20000ee4
 8006ba8:	20000eb4 	.word	0x20000eb4
 8006bac:	20000ec8 	.word	0x20000ec8
 8006bb0:	20000edc 	.word	0x20000edc
 8006bb4:	20000ee0 	.word	0x20000ee0
 8006bb8:	20000f90 	.word	0x20000f90
 8006bbc:	20000ef0 	.word	0x20000ef0
 8006bc0:	0800764c 	.word	0x0800764c

08006bc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3b04      	subs	r3, #4
 8006bd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b04      	subs	r3, #4
 8006be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f023 0201 	bic.w	r2, r3, #1
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3b04      	subs	r3, #4
 8006bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8006c28 <pxPortInitialiseStack+0x64>)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3b14      	subs	r3, #20
 8006bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3b04      	subs	r3, #4
 8006c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f06f 0202 	mvn.w	r2, #2
 8006c12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3b20      	subs	r3, #32
 8006c18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	08006c2d 	.word	0x08006c2d

08006c2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c36:	4b13      	ldr	r3, [pc, #76]	@ (8006c84 <prvTaskExitError+0x58>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d00b      	beq.n	8006c58 <prvTaskExitError+0x2c>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	60fb      	str	r3, [r7, #12]
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <prvTaskExitError+0x28>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	60bb      	str	r3, [r7, #8]
}
 8006c6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c6c:	bf00      	nop
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0fc      	beq.n	8006c6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	2000000c 	.word	0x2000000c
	...

08006c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c90:	4b07      	ldr	r3, [pc, #28]	@ (8006cb0 <pxCurrentTCBConst2>)
 8006c92:	6819      	ldr	r1, [r3, #0]
 8006c94:	6808      	ldr	r0, [r1, #0]
 8006c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9a:	f380 8809 	msr	PSP, r0
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f380 8811 	msr	BASEPRI, r0
 8006caa:	4770      	bx	lr
 8006cac:	f3af 8000 	nop.w

08006cb0 <pxCurrentTCBConst2>:
 8006cb0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006cb8:	4808      	ldr	r0, [pc, #32]	@ (8006cdc <prvPortStartFirstTask+0x24>)
 8006cba:	6800      	ldr	r0, [r0, #0]
 8006cbc:	6800      	ldr	r0, [r0, #0]
 8006cbe:	f380 8808 	msr	MSP, r0
 8006cc2:	f04f 0000 	mov.w	r0, #0
 8006cc6:	f380 8814 	msr	CONTROL, r0
 8006cca:	b662      	cpsie	i
 8006ccc:	b661      	cpsie	f
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	df00      	svc	0
 8006cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cda:	bf00      	nop
 8006cdc:	e000ed08 	.word	0xe000ed08

08006ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ce6:	4b47      	ldr	r3, [pc, #284]	@ (8006e04 <xPortStartScheduler+0x124>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a47      	ldr	r2, [pc, #284]	@ (8006e08 <xPortStartScheduler+0x128>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d10b      	bne.n	8006d08 <xPortStartScheduler+0x28>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	613b      	str	r3, [r7, #16]
}
 8006d02:	bf00      	nop
 8006d04:	bf00      	nop
 8006d06:	e7fd      	b.n	8006d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d08:	4b3e      	ldr	r3, [pc, #248]	@ (8006e04 <xPortStartScheduler+0x124>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a3f      	ldr	r2, [pc, #252]	@ (8006e0c <xPortStartScheduler+0x12c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d10b      	bne.n	8006d2a <xPortStartScheduler+0x4a>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60fb      	str	r3, [r7, #12]
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d2a:	4b39      	ldr	r3, [pc, #228]	@ (8006e10 <xPortStartScheduler+0x130>)
 8006d2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	22ff      	movs	r2, #255	@ 0xff
 8006d3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	4b31      	ldr	r3, [pc, #196]	@ (8006e14 <xPortStartScheduler+0x134>)
 8006d50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d52:	4b31      	ldr	r3, [pc, #196]	@ (8006e18 <xPortStartScheduler+0x138>)
 8006d54:	2207      	movs	r2, #7
 8006d56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d58:	e009      	b.n	8006d6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006e18 <xPortStartScheduler+0x138>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	4a2d      	ldr	r2, [pc, #180]	@ (8006e18 <xPortStartScheduler+0x138>)
 8006d62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d76:	2b80      	cmp	r3, #128	@ 0x80
 8006d78:	d0ef      	beq.n	8006d5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d7a:	4b27      	ldr	r3, [pc, #156]	@ (8006e18 <xPortStartScheduler+0x138>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f1c3 0307 	rsb	r3, r3, #7
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d00b      	beq.n	8006d9e <xPortStartScheduler+0xbe>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	60bb      	str	r3, [r7, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	e7fd      	b.n	8006d9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e18 <xPortStartScheduler+0x138>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e18 <xPortStartScheduler+0x138>)
 8006da6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006da8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e18 <xPortStartScheduler+0x138>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006db0:	4a19      	ldr	r2, [pc, #100]	@ (8006e18 <xPortStartScheduler+0x138>)
 8006db2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006dbc:	4b17      	ldr	r3, [pc, #92]	@ (8006e1c <xPortStartScheduler+0x13c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a16      	ldr	r2, [pc, #88]	@ (8006e1c <xPortStartScheduler+0x13c>)
 8006dc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006dc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006dc8:	4b14      	ldr	r3, [pc, #80]	@ (8006e1c <xPortStartScheduler+0x13c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a13      	ldr	r2, [pc, #76]	@ (8006e1c <xPortStartScheduler+0x13c>)
 8006dce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006dd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006dd4:	f000 f8da 	bl	8006f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006dd8:	4b11      	ldr	r3, [pc, #68]	@ (8006e20 <xPortStartScheduler+0x140>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006dde:	f000 f8f9 	bl	8006fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006de2:	4b10      	ldr	r3, [pc, #64]	@ (8006e24 <xPortStartScheduler+0x144>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a0f      	ldr	r2, [pc, #60]	@ (8006e24 <xPortStartScheduler+0x144>)
 8006de8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006dec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dee:	f7ff ff63 	bl	8006cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006df2:	f7ff f82d 	bl	8005e50 <vTaskSwitchContext>
	prvTaskExitError();
 8006df6:	f7ff ff19 	bl	8006c2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	e000ed00 	.word	0xe000ed00
 8006e08:	410fc271 	.word	0x410fc271
 8006e0c:	410fc270 	.word	0x410fc270
 8006e10:	e000e400 	.word	0xe000e400
 8006e14:	20000fe0 	.word	0x20000fe0
 8006e18:	20000fe4 	.word	0x20000fe4
 8006e1c:	e000ed20 	.word	0xe000ed20
 8006e20:	2000000c 	.word	0x2000000c
 8006e24:	e000ef34 	.word	0xe000ef34

08006e28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	607b      	str	r3, [r7, #4]
}
 8006e40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e42:	4b10      	ldr	r3, [pc, #64]	@ (8006e84 <vPortEnterCritical+0x5c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3301      	adds	r3, #1
 8006e48:	4a0e      	ldr	r2, [pc, #56]	@ (8006e84 <vPortEnterCritical+0x5c>)
 8006e4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e84 <vPortEnterCritical+0x5c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d110      	bne.n	8006e76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e54:	4b0c      	ldr	r3, [pc, #48]	@ (8006e88 <vPortEnterCritical+0x60>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <vPortEnterCritical+0x4e>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	603b      	str	r3, [r7, #0]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <vPortEnterCritical+0x4a>
	}
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	2000000c 	.word	0x2000000c
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e92:	4b12      	ldr	r3, [pc, #72]	@ (8006edc <vPortExitCritical+0x50>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10b      	bne.n	8006eb2 <vPortExitCritical+0x26>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	607b      	str	r3, [r7, #4]
}
 8006eac:	bf00      	nop
 8006eae:	bf00      	nop
 8006eb0:	e7fd      	b.n	8006eae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006edc <vPortExitCritical+0x50>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	4a08      	ldr	r2, [pc, #32]	@ (8006edc <vPortExitCritical+0x50>)
 8006eba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ebc:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <vPortExitCritical+0x50>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d105      	bne.n	8006ed0 <vPortExitCritical+0x44>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f383 8811 	msr	BASEPRI, r3
}
 8006ece:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	2000000c 	.word	0x2000000c

08006ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ee0:	f3ef 8009 	mrs	r0, PSP
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	4b15      	ldr	r3, [pc, #84]	@ (8006f40 <pxCurrentTCBConst>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	f01e 0f10 	tst.w	lr, #16
 8006ef0:	bf08      	it	eq
 8006ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efa:	6010      	str	r0, [r2, #0]
 8006efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006f04:	f380 8811 	msr	BASEPRI, r0
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f7fe ff9e 	bl	8005e50 <vTaskSwitchContext>
 8006f14:	f04f 0000 	mov.w	r0, #0
 8006f18:	f380 8811 	msr	BASEPRI, r0
 8006f1c:	bc09      	pop	{r0, r3}
 8006f1e:	6819      	ldr	r1, [r3, #0]
 8006f20:	6808      	ldr	r0, [r1, #0]
 8006f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f26:	f01e 0f10 	tst.w	lr, #16
 8006f2a:	bf08      	it	eq
 8006f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f30:	f380 8809 	msr	PSP, r0
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	f3af 8000 	nop.w

08006f40 <pxCurrentTCBConst>:
 8006f40:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop

08006f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	607b      	str	r3, [r7, #4]
}
 8006f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f62:	f7fe febb 	bl	8005cdc <xTaskIncrementTick>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f6c:	4b06      	ldr	r3, [pc, #24]	@ (8006f88 <xPortSysTickHandler+0x40>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	2300      	movs	r3, #0
 8006f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	f383 8811 	msr	BASEPRI, r3
}
 8006f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f90:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc0 <vPortSetupTimerInterrupt+0x34>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f96:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc4 <vPortSetupTimerInterrupt+0x38>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <vPortSetupTimerInterrupt+0x3c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8006fcc <vPortSetupTimerInterrupt+0x40>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	099b      	lsrs	r3, r3, #6
 8006fa8:	4a09      	ldr	r2, [pc, #36]	@ (8006fd0 <vPortSetupTimerInterrupt+0x44>)
 8006faa:	3b01      	subs	r3, #1
 8006fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fae:	4b04      	ldr	r3, [pc, #16]	@ (8006fc0 <vPortSetupTimerInterrupt+0x34>)
 8006fb0:	2207      	movs	r2, #7
 8006fb2:	601a      	str	r2, [r3, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	e000e010 	.word	0xe000e010
 8006fc4:	e000e018 	.word	0xe000e018
 8006fc8:	20000000 	.word	0x20000000
 8006fcc:	10624dd3 	.word	0x10624dd3
 8006fd0:	e000e014 	.word	0xe000e014

08006fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006fe4 <vPortEnableVFP+0x10>
 8006fd8:	6801      	ldr	r1, [r0, #0]
 8006fda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006fde:	6001      	str	r1, [r0, #0]
 8006fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fe2:	bf00      	nop
 8006fe4:	e000ed88 	.word	0xe000ed88

08006fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fee:	f3ef 8305 	mrs	r3, IPSR
 8006ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b0f      	cmp	r3, #15
 8006ff8:	d915      	bls.n	8007026 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ffa:	4a18      	ldr	r2, [pc, #96]	@ (800705c <vPortValidateInterruptPriority+0x74>)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007004:	4b16      	ldr	r3, [pc, #88]	@ (8007060 <vPortValidateInterruptPriority+0x78>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	7afa      	ldrb	r2, [r7, #11]
 800700a:	429a      	cmp	r2, r3
 800700c:	d20b      	bcs.n	8007026 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	607b      	str	r3, [r7, #4]
}
 8007020:	bf00      	nop
 8007022:	bf00      	nop
 8007024:	e7fd      	b.n	8007022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007026:	4b0f      	ldr	r3, [pc, #60]	@ (8007064 <vPortValidateInterruptPriority+0x7c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800702e:	4b0e      	ldr	r3, [pc, #56]	@ (8007068 <vPortValidateInterruptPriority+0x80>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d90b      	bls.n	800704e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	603b      	str	r3, [r7, #0]
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	e7fd      	b.n	800704a <vPortValidateInterruptPriority+0x62>
	}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	e000e3f0 	.word	0xe000e3f0
 8007060:	20000fe0 	.word	0x20000fe0
 8007064:	e000ed0c 	.word	0xe000ed0c
 8007068:	20000fe4 	.word	0x20000fe4

0800706c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08a      	sub	sp, #40	@ 0x28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007074:	2300      	movs	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007078:	f7fe fd74 	bl	8005b64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800707c:	4b5c      	ldr	r3, [pc, #368]	@ (80071f0 <pvPortMalloc+0x184>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007084:	f000 f924 	bl	80072d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007088:	4b5a      	ldr	r3, [pc, #360]	@ (80071f4 <pvPortMalloc+0x188>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4013      	ands	r3, r2
 8007090:	2b00      	cmp	r3, #0
 8007092:	f040 8095 	bne.w	80071c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01e      	beq.n	80070da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800709c:	2208      	movs	r2, #8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4413      	add	r3, r2
 80070a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d015      	beq.n	80070da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f023 0307 	bic.w	r3, r3, #7
 80070b4:	3308      	adds	r3, #8
 80070b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00b      	beq.n	80070da <pvPortMalloc+0x6e>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	617b      	str	r3, [r7, #20]
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	e7fd      	b.n	80070d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d06f      	beq.n	80071c0 <pvPortMalloc+0x154>
 80070e0:	4b45      	ldr	r3, [pc, #276]	@ (80071f8 <pvPortMalloc+0x18c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d86a      	bhi.n	80071c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070ea:	4b44      	ldr	r3, [pc, #272]	@ (80071fc <pvPortMalloc+0x190>)
 80070ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070ee:	4b43      	ldr	r3, [pc, #268]	@ (80071fc <pvPortMalloc+0x190>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070f4:	e004      	b.n	8007100 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	429a      	cmp	r2, r3
 8007108:	d903      	bls.n	8007112 <pvPortMalloc+0xa6>
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f1      	bne.n	80070f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007112:	4b37      	ldr	r3, [pc, #220]	@ (80071f0 <pvPortMalloc+0x184>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007118:	429a      	cmp	r2, r3
 800711a:	d051      	beq.n	80071c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2208      	movs	r2, #8
 8007122:	4413      	add	r3, r2
 8007124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	1ad2      	subs	r2, r2, r3
 8007136:	2308      	movs	r3, #8
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	429a      	cmp	r2, r3
 800713c:	d920      	bls.n	8007180 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800713e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4413      	add	r3, r2
 8007144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00b      	beq.n	8007168 <pvPortMalloc+0xfc>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	613b      	str	r3, [r7, #16]
}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	e7fd      	b.n	8007164 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	1ad2      	subs	r2, r2, r3
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800717a:	69b8      	ldr	r0, [r7, #24]
 800717c:	f000 f90a 	bl	8007394 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007180:	4b1d      	ldr	r3, [pc, #116]	@ (80071f8 <pvPortMalloc+0x18c>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	4a1b      	ldr	r2, [pc, #108]	@ (80071f8 <pvPortMalloc+0x18c>)
 800718c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800718e:	4b1a      	ldr	r3, [pc, #104]	@ (80071f8 <pvPortMalloc+0x18c>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b1b      	ldr	r3, [pc, #108]	@ (8007200 <pvPortMalloc+0x194>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d203      	bcs.n	80071a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800719a:	4b17      	ldr	r3, [pc, #92]	@ (80071f8 <pvPortMalloc+0x18c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a18      	ldr	r2, [pc, #96]	@ (8007200 <pvPortMalloc+0x194>)
 80071a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	4b13      	ldr	r3, [pc, #76]	@ (80071f4 <pvPortMalloc+0x188>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	431a      	orrs	r2, r3
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80071b6:	4b13      	ldr	r3, [pc, #76]	@ (8007204 <pvPortMalloc+0x198>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3301      	adds	r3, #1
 80071bc:	4a11      	ldr	r2, [pc, #68]	@ (8007204 <pvPortMalloc+0x198>)
 80071be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071c0:	f7fe fcde 	bl	8005b80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <pvPortMalloc+0x17a>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60fb      	str	r3, [r7, #12]
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <pvPortMalloc+0x176>
	return pvReturn;
 80071e6:	69fb      	ldr	r3, [r7, #28]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3728      	adds	r7, #40	@ 0x28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20004bf0 	.word	0x20004bf0
 80071f4:	20004c04 	.word	0x20004c04
 80071f8:	20004bf4 	.word	0x20004bf4
 80071fc:	20004be8 	.word	0x20004be8
 8007200:	20004bf8 	.word	0x20004bf8
 8007204:	20004bfc 	.word	0x20004bfc

08007208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d04f      	beq.n	80072ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800721a:	2308      	movs	r3, #8
 800721c:	425b      	negs	r3, r3
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4413      	add	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	4b25      	ldr	r3, [pc, #148]	@ (80072c4 <vPortFree+0xbc>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4013      	ands	r3, r2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10b      	bne.n	800724e <vPortFree+0x46>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	60fb      	str	r3, [r7, #12]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <vPortFree+0x66>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60bb      	str	r3, [r7, #8]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	4b14      	ldr	r3, [pc, #80]	@ (80072c4 <vPortFree+0xbc>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4013      	ands	r3, r2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01e      	beq.n	80072ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d11a      	bne.n	80072ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	4b0e      	ldr	r3, [pc, #56]	@ (80072c4 <vPortFree+0xbc>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	43db      	mvns	r3, r3
 800728e:	401a      	ands	r2, r3
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007294:	f7fe fc66 	bl	8005b64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	4b0a      	ldr	r3, [pc, #40]	@ (80072c8 <vPortFree+0xc0>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4413      	add	r3, r2
 80072a2:	4a09      	ldr	r2, [pc, #36]	@ (80072c8 <vPortFree+0xc0>)
 80072a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072a6:	6938      	ldr	r0, [r7, #16]
 80072a8:	f000 f874 	bl	8007394 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072ac:	4b07      	ldr	r3, [pc, #28]	@ (80072cc <vPortFree+0xc4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3301      	adds	r3, #1
 80072b2:	4a06      	ldr	r2, [pc, #24]	@ (80072cc <vPortFree+0xc4>)
 80072b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80072b6:	f7fe fc63 	bl	8005b80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072ba:	bf00      	nop
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20004c04 	.word	0x20004c04
 80072c8:	20004bf4 	.word	0x20004bf4
 80072cc:	20004c00 	.word	0x20004c00

080072d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80072da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072dc:	4b27      	ldr	r3, [pc, #156]	@ (800737c <prvHeapInit+0xac>)
 80072de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00c      	beq.n	8007304 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3307      	adds	r3, #7
 80072ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 0307 	bic.w	r3, r3, #7
 80072f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	4a1f      	ldr	r2, [pc, #124]	@ (800737c <prvHeapInit+0xac>)
 8007300:	4413      	add	r3, r2
 8007302:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007308:	4a1d      	ldr	r2, [pc, #116]	@ (8007380 <prvHeapInit+0xb0>)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800730e:	4b1c      	ldr	r3, [pc, #112]	@ (8007380 <prvHeapInit+0xb0>)
 8007310:	2200      	movs	r2, #0
 8007312:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	4413      	add	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800731c:	2208      	movs	r2, #8
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0307 	bic.w	r3, r3, #7
 800732a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4a15      	ldr	r2, [pc, #84]	@ (8007384 <prvHeapInit+0xb4>)
 8007330:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007332:	4b14      	ldr	r3, [pc, #80]	@ (8007384 <prvHeapInit+0xb4>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2200      	movs	r2, #0
 8007338:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800733a:	4b12      	ldr	r3, [pc, #72]	@ (8007384 <prvHeapInit+0xb4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007350:	4b0c      	ldr	r3, [pc, #48]	@ (8007384 <prvHeapInit+0xb4>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	4a0a      	ldr	r2, [pc, #40]	@ (8007388 <prvHeapInit+0xb8>)
 800735e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	4a09      	ldr	r2, [pc, #36]	@ (800738c <prvHeapInit+0xbc>)
 8007366:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007368:	4b09      	ldr	r3, [pc, #36]	@ (8007390 <prvHeapInit+0xc0>)
 800736a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800736e:	601a      	str	r2, [r3, #0]
}
 8007370:	bf00      	nop
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	20000fe8 	.word	0x20000fe8
 8007380:	20004be8 	.word	0x20004be8
 8007384:	20004bf0 	.word	0x20004bf0
 8007388:	20004bf8 	.word	0x20004bf8
 800738c:	20004bf4 	.word	0x20004bf4
 8007390:	20004c04 	.word	0x20004c04

08007394 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800739c:	4b28      	ldr	r3, [pc, #160]	@ (8007440 <prvInsertBlockIntoFreeList+0xac>)
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	e002      	b.n	80073a8 <prvInsertBlockIntoFreeList+0x14>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d8f7      	bhi.n	80073a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	4413      	add	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d108      	bne.n	80073d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	441a      	add	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	441a      	add	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d118      	bne.n	800741c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	4b15      	ldr	r3, [pc, #84]	@ (8007444 <prvInsertBlockIntoFreeList+0xb0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d00d      	beq.n	8007412 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	441a      	add	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	e008      	b.n	8007424 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007412:	4b0c      	ldr	r3, [pc, #48]	@ (8007444 <prvInsertBlockIntoFreeList+0xb0>)
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	e003      	b.n	8007424 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	429a      	cmp	r2, r3
 800742a:	d002      	beq.n	8007432 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007432:	bf00      	nop
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20004be8 	.word	0x20004be8
 8007444:	20004bf0 	.word	0x20004bf0

08007448 <memset>:
 8007448:	4402      	add	r2, r0
 800744a:	4603      	mov	r3, r0
 800744c:	4293      	cmp	r3, r2
 800744e:	d100      	bne.n	8007452 <memset+0xa>
 8007450:	4770      	bx	lr
 8007452:	f803 1b01 	strb.w	r1, [r3], #1
 8007456:	e7f9      	b.n	800744c <memset+0x4>

08007458 <_reclaim_reent>:
 8007458:	4b29      	ldr	r3, [pc, #164]	@ (8007500 <_reclaim_reent+0xa8>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4283      	cmp	r3, r0
 800745e:	b570      	push	{r4, r5, r6, lr}
 8007460:	4604      	mov	r4, r0
 8007462:	d04b      	beq.n	80074fc <_reclaim_reent+0xa4>
 8007464:	69c3      	ldr	r3, [r0, #28]
 8007466:	b1ab      	cbz	r3, 8007494 <_reclaim_reent+0x3c>
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	b16b      	cbz	r3, 8007488 <_reclaim_reent+0x30>
 800746c:	2500      	movs	r5, #0
 800746e:	69e3      	ldr	r3, [r4, #28]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	5959      	ldr	r1, [r3, r5]
 8007474:	2900      	cmp	r1, #0
 8007476:	d13b      	bne.n	80074f0 <_reclaim_reent+0x98>
 8007478:	3504      	adds	r5, #4
 800747a:	2d80      	cmp	r5, #128	@ 0x80
 800747c:	d1f7      	bne.n	800746e <_reclaim_reent+0x16>
 800747e:	69e3      	ldr	r3, [r4, #28]
 8007480:	4620      	mov	r0, r4
 8007482:	68d9      	ldr	r1, [r3, #12]
 8007484:	f000 f872 	bl	800756c <_free_r>
 8007488:	69e3      	ldr	r3, [r4, #28]
 800748a:	6819      	ldr	r1, [r3, #0]
 800748c:	b111      	cbz	r1, 8007494 <_reclaim_reent+0x3c>
 800748e:	4620      	mov	r0, r4
 8007490:	f000 f86c 	bl	800756c <_free_r>
 8007494:	6961      	ldr	r1, [r4, #20]
 8007496:	b111      	cbz	r1, 800749e <_reclaim_reent+0x46>
 8007498:	4620      	mov	r0, r4
 800749a:	f000 f867 	bl	800756c <_free_r>
 800749e:	69e1      	ldr	r1, [r4, #28]
 80074a0:	b111      	cbz	r1, 80074a8 <_reclaim_reent+0x50>
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 f862 	bl	800756c <_free_r>
 80074a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80074aa:	b111      	cbz	r1, 80074b2 <_reclaim_reent+0x5a>
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 f85d 	bl	800756c <_free_r>
 80074b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074b4:	b111      	cbz	r1, 80074bc <_reclaim_reent+0x64>
 80074b6:	4620      	mov	r0, r4
 80074b8:	f000 f858 	bl	800756c <_free_r>
 80074bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80074be:	b111      	cbz	r1, 80074c6 <_reclaim_reent+0x6e>
 80074c0:	4620      	mov	r0, r4
 80074c2:	f000 f853 	bl	800756c <_free_r>
 80074c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80074c8:	b111      	cbz	r1, 80074d0 <_reclaim_reent+0x78>
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 f84e 	bl	800756c <_free_r>
 80074d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80074d2:	b111      	cbz	r1, 80074da <_reclaim_reent+0x82>
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 f849 	bl	800756c <_free_r>
 80074da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80074dc:	b111      	cbz	r1, 80074e4 <_reclaim_reent+0x8c>
 80074de:	4620      	mov	r0, r4
 80074e0:	f000 f844 	bl	800756c <_free_r>
 80074e4:	6a23      	ldr	r3, [r4, #32]
 80074e6:	b14b      	cbz	r3, 80074fc <_reclaim_reent+0xa4>
 80074e8:	4620      	mov	r0, r4
 80074ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80074ee:	4718      	bx	r3
 80074f0:	680e      	ldr	r6, [r1, #0]
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 f83a 	bl	800756c <_free_r>
 80074f8:	4631      	mov	r1, r6
 80074fa:	e7bb      	b.n	8007474 <_reclaim_reent+0x1c>
 80074fc:	bd70      	pop	{r4, r5, r6, pc}
 80074fe:	bf00      	nop
 8007500:	20000010 	.word	0x20000010

08007504 <__libc_init_array>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	4d0d      	ldr	r5, [pc, #52]	@ (800753c <__libc_init_array+0x38>)
 8007508:	4c0d      	ldr	r4, [pc, #52]	@ (8007540 <__libc_init_array+0x3c>)
 800750a:	1b64      	subs	r4, r4, r5
 800750c:	10a4      	asrs	r4, r4, #2
 800750e:	2600      	movs	r6, #0
 8007510:	42a6      	cmp	r6, r4
 8007512:	d109      	bne.n	8007528 <__libc_init_array+0x24>
 8007514:	4d0b      	ldr	r5, [pc, #44]	@ (8007544 <__libc_init_array+0x40>)
 8007516:	4c0c      	ldr	r4, [pc, #48]	@ (8007548 <__libc_init_array+0x44>)
 8007518:	f000 f87e 	bl	8007618 <_init>
 800751c:	1b64      	subs	r4, r4, r5
 800751e:	10a4      	asrs	r4, r4, #2
 8007520:	2600      	movs	r6, #0
 8007522:	42a6      	cmp	r6, r4
 8007524:	d105      	bne.n	8007532 <__libc_init_array+0x2e>
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	f855 3b04 	ldr.w	r3, [r5], #4
 800752c:	4798      	blx	r3
 800752e:	3601      	adds	r6, #1
 8007530:	e7ee      	b.n	8007510 <__libc_init_array+0xc>
 8007532:	f855 3b04 	ldr.w	r3, [r5], #4
 8007536:	4798      	blx	r3
 8007538:	3601      	adds	r6, #1
 800753a:	e7f2      	b.n	8007522 <__libc_init_array+0x1e>
 800753c:	08007698 	.word	0x08007698
 8007540:	08007698 	.word	0x08007698
 8007544:	08007698 	.word	0x08007698
 8007548:	0800769c 	.word	0x0800769c

0800754c <__retarget_lock_acquire_recursive>:
 800754c:	4770      	bx	lr

0800754e <__retarget_lock_release_recursive>:
 800754e:	4770      	bx	lr

08007550 <memcpy>:
 8007550:	440a      	add	r2, r1
 8007552:	4291      	cmp	r1, r2
 8007554:	f100 33ff 	add.w	r3, r0, #4294967295
 8007558:	d100      	bne.n	800755c <memcpy+0xc>
 800755a:	4770      	bx	lr
 800755c:	b510      	push	{r4, lr}
 800755e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007566:	4291      	cmp	r1, r2
 8007568:	d1f9      	bne.n	800755e <memcpy+0xe>
 800756a:	bd10      	pop	{r4, pc}

0800756c <_free_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4605      	mov	r5, r0
 8007570:	2900      	cmp	r1, #0
 8007572:	d041      	beq.n	80075f8 <_free_r+0x8c>
 8007574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007578:	1f0c      	subs	r4, r1, #4
 800757a:	2b00      	cmp	r3, #0
 800757c:	bfb8      	it	lt
 800757e:	18e4      	addlt	r4, r4, r3
 8007580:	f000 f83e 	bl	8007600 <__malloc_lock>
 8007584:	4a1d      	ldr	r2, [pc, #116]	@ (80075fc <_free_r+0x90>)
 8007586:	6813      	ldr	r3, [r2, #0]
 8007588:	b933      	cbnz	r3, 8007598 <_free_r+0x2c>
 800758a:	6063      	str	r3, [r4, #4]
 800758c:	6014      	str	r4, [r2, #0]
 800758e:	4628      	mov	r0, r5
 8007590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007594:	f000 b83a 	b.w	800760c <__malloc_unlock>
 8007598:	42a3      	cmp	r3, r4
 800759a:	d908      	bls.n	80075ae <_free_r+0x42>
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	1821      	adds	r1, r4, r0
 80075a0:	428b      	cmp	r3, r1
 80075a2:	bf01      	itttt	eq
 80075a4:	6819      	ldreq	r1, [r3, #0]
 80075a6:	685b      	ldreq	r3, [r3, #4]
 80075a8:	1809      	addeq	r1, r1, r0
 80075aa:	6021      	streq	r1, [r4, #0]
 80075ac:	e7ed      	b.n	800758a <_free_r+0x1e>
 80075ae:	461a      	mov	r2, r3
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	b10b      	cbz	r3, 80075b8 <_free_r+0x4c>
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	d9fa      	bls.n	80075ae <_free_r+0x42>
 80075b8:	6811      	ldr	r1, [r2, #0]
 80075ba:	1850      	adds	r0, r2, r1
 80075bc:	42a0      	cmp	r0, r4
 80075be:	d10b      	bne.n	80075d8 <_free_r+0x6c>
 80075c0:	6820      	ldr	r0, [r4, #0]
 80075c2:	4401      	add	r1, r0
 80075c4:	1850      	adds	r0, r2, r1
 80075c6:	4283      	cmp	r3, r0
 80075c8:	6011      	str	r1, [r2, #0]
 80075ca:	d1e0      	bne.n	800758e <_free_r+0x22>
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	6053      	str	r3, [r2, #4]
 80075d2:	4408      	add	r0, r1
 80075d4:	6010      	str	r0, [r2, #0]
 80075d6:	e7da      	b.n	800758e <_free_r+0x22>
 80075d8:	d902      	bls.n	80075e0 <_free_r+0x74>
 80075da:	230c      	movs	r3, #12
 80075dc:	602b      	str	r3, [r5, #0]
 80075de:	e7d6      	b.n	800758e <_free_r+0x22>
 80075e0:	6820      	ldr	r0, [r4, #0]
 80075e2:	1821      	adds	r1, r4, r0
 80075e4:	428b      	cmp	r3, r1
 80075e6:	bf04      	itt	eq
 80075e8:	6819      	ldreq	r1, [r3, #0]
 80075ea:	685b      	ldreq	r3, [r3, #4]
 80075ec:	6063      	str	r3, [r4, #4]
 80075ee:	bf04      	itt	eq
 80075f0:	1809      	addeq	r1, r1, r0
 80075f2:	6021      	streq	r1, [r4, #0]
 80075f4:	6054      	str	r4, [r2, #4]
 80075f6:	e7ca      	b.n	800758e <_free_r+0x22>
 80075f8:	bd38      	pop	{r3, r4, r5, pc}
 80075fa:	bf00      	nop
 80075fc:	20004d44 	.word	0x20004d44

08007600 <__malloc_lock>:
 8007600:	4801      	ldr	r0, [pc, #4]	@ (8007608 <__malloc_lock+0x8>)
 8007602:	f7ff bfa3 	b.w	800754c <__retarget_lock_acquire_recursive>
 8007606:	bf00      	nop
 8007608:	20004d40 	.word	0x20004d40

0800760c <__malloc_unlock>:
 800760c:	4801      	ldr	r0, [pc, #4]	@ (8007614 <__malloc_unlock+0x8>)
 800760e:	f7ff bf9e 	b.w	800754e <__retarget_lock_release_recursive>
 8007612:	bf00      	nop
 8007614:	20004d40 	.word	0x20004d40

08007618 <_init>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr

08007624 <_fini>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr
