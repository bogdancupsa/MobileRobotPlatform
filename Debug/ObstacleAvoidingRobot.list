
ObstacleAvoidingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000710  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008d4  080008dc  000018dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008d4  080008d4  000018dc  2**0
                  CONTENTS
  4 .ARM          00000000  080008d4  080008d4  000018dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008d4  080008dc  000018dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008d4  080008d4  000018d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008d8  080008d8  000018d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000018dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080008dc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080008dc  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011d9  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000528  00000000  00000000  00002ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00003010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b8  00000000  00000000  00003120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e34  00000000  00000000  000031d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001901  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000060a1  00000000  00000000  0000590d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000b9ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002ec  00000000  00000000  0000b9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0000bce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080008bc 	.word	0x080008bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080008bc 	.word	0x080008bc

08000204 <GPIO_PeriClockControl>:
 * @return						- none
 *
 * @note						- none
 *************************************************************************************************************************************************/
void GPIO_PeriClockControl (GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d12b      	bne.n	800026e <GPIO_PeriClockControl+0x6a>
    {
        if (pGPIOx == GPIOA)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a2d      	ldr	r2, [pc, #180]	@ (80002d0 <GPIO_PeriClockControl+0xcc>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockControl+0x28>
        {
        	GPIOA_PCLK_EN();
 800021e:	4b2d      	ldr	r3, [pc, #180]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000222:	4a2c      	ldr	r2, [pc, #176]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_DI();
		}
    }
}
 800022a:	e04b      	b.n	80002c4 <GPIO_PeriClockControl+0xc0>
        else if (pGPIOx == GPIOB)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a2a      	ldr	r2, [pc, #168]	@ (80002d8 <GPIO_PeriClockControl+0xd4>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockControl+0x3e>
        	GPIOB_PCLK_EN();
 8000234:	4b27      	ldr	r3, [pc, #156]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000238:	4a26      	ldr	r2, [pc, #152]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000240:	e040      	b.n	80002c4 <GPIO_PeriClockControl+0xc0>
        else if (pGPIOx == GPIOC)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a25      	ldr	r2, [pc, #148]	@ (80002dc <GPIO_PeriClockControl+0xd8>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x54>
        	GPIOC_PCLK_EN();
 800024a:	4b22      	ldr	r3, [pc, #136]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024e:	4a21      	ldr	r2, [pc, #132]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000256:	e035      	b.n	80002c4 <GPIO_PeriClockControl+0xc0>
        else if (pGPIOx == GPIOD)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a21      	ldr	r2, [pc, #132]	@ (80002e0 <GPIO_PeriClockControl+0xdc>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d131      	bne.n	80002c4 <GPIO_PeriClockControl+0xc0>
        	GPIOD_PCLK_EN();
 8000260:	4b1c      	ldr	r3, [pc, #112]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000264:	4a1b      	ldr	r2, [pc, #108]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800026c:	e02a      	b.n	80002c4 <GPIO_PeriClockControl+0xc0>
		if (pGPIOx == GPIOA)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a17      	ldr	r2, [pc, #92]	@ (80002d0 <GPIO_PeriClockControl+0xcc>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClockControl+0x80>
			GPIOA_PCLK_DI();
 8000276:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027a:	4a16      	ldr	r2, [pc, #88]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 800027c:	f023 0301 	bic.w	r3, r3, #1
 8000280:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000282:	e01f      	b.n	80002c4 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOB)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a14      	ldr	r2, [pc, #80]	@ (80002d8 <GPIO_PeriClockControl+0xd4>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClockControl+0x96>
			GPIOB_PCLK_DI();
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000290:	4a10      	ldr	r2, [pc, #64]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 8000292:	f023 0302 	bic.w	r3, r3, #2
 8000296:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000298:	e014      	b.n	80002c4 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOC)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a0f      	ldr	r2, [pc, #60]	@ (80002dc <GPIO_PeriClockControl+0xd8>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClockControl+0xac>
			GPIOC_PCLK_DI();
 80002a2:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a6:	4a0b      	ldr	r2, [pc, #44]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 80002a8:	f023 0304 	bic.w	r3, r3, #4
 80002ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ae:	e009      	b.n	80002c4 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOD)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a0b      	ldr	r2, [pc, #44]	@ (80002e0 <GPIO_PeriClockControl+0xdc>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d105      	bne.n	80002c4 <GPIO_PeriClockControl+0xc0>
			GPIOD_PCLK_DI();
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002bc:	4a05      	ldr	r2, [pc, #20]	@ (80002d4 <GPIO_PeriClockControl+0xd0>)
 80002be:	f023 0308 	bic.w	r3, r3, #8
 80002c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40020000 	.word	0x40020000
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020400 	.word	0x40020400
 80002dc:	40020800 	.word	0x40020800
 80002e0:	40020c00 	.word	0x40020c00

080002e4 <GPIO_Init>:
 * @return						- none
 *
 * @note						- none
 *************************************************************************************************************************************************/
void GPIO_Init (GPIO_Handle_t *pGPIOHandle)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]
	uint8_t temp1 = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	74fb      	strb	r3, [r7, #19]
	uint8_t temp2 = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	74bb      	strb	r3, [r7, #18]
	uint8_t portcode = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	747b      	strb	r3, [r7, #17]

	/* Enable the peripheral clock */
	GPIO_PeriClockControl((pGPIOHandle->pGPIOx), ENABLE);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2101      	movs	r1, #1
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ff7e 	bl	8000204 <GPIO_PeriClockControl>

	/* configure the mode of gpio pin*/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	2b03      	cmp	r3, #3
 800030e:	d81f      	bhi.n	8000350 <GPIO_Init+0x6c>
    {
		/* The non interrupt mode */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	795b      	ldrb	r3, [r3, #5]
 8000314:	461a      	mov	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa02 f303 	lsl.w	r3, r2, r3
 8000320:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); /* clearing bits before setting it*/
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	791b      	ldrb	r3, [r3, #4]
 800032c:	4619      	mov	r1, r3
 800032e:	2303      	movs	r3, #3
 8000330:	408b      	lsls	r3, r1
 8000332:	43db      	mvns	r3, r3
 8000334:	4619      	mov	r1, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	400a      	ands	r2, r1
 800033c:	601a      	str	r2, [r3, #0]
      	pGPIOHandle->pGPIOx->MODER |= temp; /* setting the bit*/
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	6819      	ldr	r1, [r3, #0]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	697a      	ldr	r2, [r7, #20]
 800034a:	430a      	orrs	r2, r1
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	e0c2      	b.n	80004d6 <GPIO_Init+0x1f2>
    }
	else
    {

		/* The interrupt mode */
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	2b04      	cmp	r3, #4
 8000356:	d117      	bne.n	8000388 <GPIO_Init+0xa4>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000358:	4b47      	ldr	r3, [pc, #284]	@ (8000478 <GPIO_Init+0x194>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	7912      	ldrb	r2, [r2, #4]
 8000360:	4611      	mov	r1, r2
 8000362:	2201      	movs	r2, #1
 8000364:	408a      	lsls	r2, r1
 8000366:	4611      	mov	r1, r2
 8000368:	4a43      	ldr	r2, [pc, #268]	@ (8000478 <GPIO_Init+0x194>)
 800036a:	430b      	orrs	r3, r1
 800036c:	60d3      	str	r3, [r2, #12]
			/* Clear the coresponding RTSR bit*/
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800036e:	4b42      	ldr	r3, [pc, #264]	@ (8000478 <GPIO_Init+0x194>)
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	7912      	ldrb	r2, [r2, #4]
 8000376:	4611      	mov	r1, r2
 8000378:	2201      	movs	r2, #1
 800037a:	408a      	lsls	r2, r1
 800037c:	43d2      	mvns	r2, r2
 800037e:	4611      	mov	r1, r2
 8000380:	4a3d      	ldr	r2, [pc, #244]	@ (8000478 <GPIO_Init+0x194>)
 8000382:	400b      	ands	r3, r1
 8000384:	6093      	str	r3, [r2, #8]
 8000386:	e035      	b.n	80003f4 <GPIO_Init+0x110>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	795b      	ldrb	r3, [r3, #5]
 800038c:	2b05      	cmp	r3, #5
 800038e:	d117      	bne.n	80003c0 <GPIO_Init+0xdc>
		{
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000390:	4b39      	ldr	r3, [pc, #228]	@ (8000478 <GPIO_Init+0x194>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	7912      	ldrb	r2, [r2, #4]
 8000398:	4611      	mov	r1, r2
 800039a:	2201      	movs	r2, #1
 800039c:	408a      	lsls	r2, r1
 800039e:	4611      	mov	r1, r2
 80003a0:	4a35      	ldr	r2, [pc, #212]	@ (8000478 <GPIO_Init+0x194>)
 80003a2:	430b      	orrs	r3, r1
 80003a4:	6093      	str	r3, [r2, #8]
			/* Clear the coresponding RTSR bit*/
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003a6:	4b34      	ldr	r3, [pc, #208]	@ (8000478 <GPIO_Init+0x194>)
 80003a8:	68db      	ldr	r3, [r3, #12]
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	7912      	ldrb	r2, [r2, #4]
 80003ae:	4611      	mov	r1, r2
 80003b0:	2201      	movs	r2, #1
 80003b2:	408a      	lsls	r2, r1
 80003b4:	43d2      	mvns	r2, r2
 80003b6:	4611      	mov	r1, r2
 80003b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000478 <GPIO_Init+0x194>)
 80003ba:	400b      	ands	r3, r1
 80003bc:	60d3      	str	r3, [r2, #12]
 80003be:	e019      	b.n	80003f4 <GPIO_Init+0x110>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	795b      	ldrb	r3, [r3, #5]
 80003c4:	2b06      	cmp	r3, #6
 80003c6:	d115      	bne.n	80003f4 <GPIO_Init+0x110>
		{
			/* Configure both RFSR and RTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000478 <GPIO_Init+0x194>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	7912      	ldrb	r2, [r2, #4]
 80003d0:	4611      	mov	r1, r2
 80003d2:	2201      	movs	r2, #1
 80003d4:	408a      	lsls	r2, r1
 80003d6:	4611      	mov	r1, r2
 80003d8:	4a27      	ldr	r2, [pc, #156]	@ (8000478 <GPIO_Init+0x194>)
 80003da:	430b      	orrs	r3, r1
 80003dc:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003de:	4b26      	ldr	r3, [pc, #152]	@ (8000478 <GPIO_Init+0x194>)
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	7912      	ldrb	r2, [r2, #4]
 80003e6:	4611      	mov	r1, r2
 80003e8:	2201      	movs	r2, #1
 80003ea:	408a      	lsls	r2, r1
 80003ec:	4611      	mov	r1, r2
 80003ee:	4a22      	ldr	r2, [pc, #136]	@ (8000478 <GPIO_Init+0x194>)
 80003f0:	430b      	orrs	r3, r1
 80003f2:	6093      	str	r3, [r2, #8]
		}
		/* configure the GPIO port selection in SYSCFG_EXTICR */
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	791b      	ldrb	r3, [r3, #4]
 80003f8:	089b      	lsrs	r3, r3, #2
 80003fa:	74fb      	strb	r3, [r7, #19]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	791b      	ldrb	r3, [r3, #4]
 8000400:	f003 0303 	and.w	r3, r3, #3
 8000404:	74bb      	strb	r3, [r7, #18]
		portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a1c      	ldr	r2, [pc, #112]	@ (800047c <GPIO_Init+0x198>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d045      	beq.n	800049c <GPIO_Init+0x1b8>
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a1a      	ldr	r2, [pc, #104]	@ (8000480 <GPIO_Init+0x19c>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d02b      	beq.n	8000472 <GPIO_Init+0x18e>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a19      	ldr	r2, [pc, #100]	@ (8000484 <GPIO_Init+0x1a0>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d024      	beq.n	800046e <GPIO_Init+0x18a>
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a17      	ldr	r2, [pc, #92]	@ (8000488 <GPIO_Init+0x1a4>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d01d      	beq.n	800046a <GPIO_Init+0x186>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a16      	ldr	r2, [pc, #88]	@ (800048c <GPIO_Init+0x1a8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d016      	beq.n	8000466 <GPIO_Init+0x182>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a14      	ldr	r2, [pc, #80]	@ (8000490 <GPIO_Init+0x1ac>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d00f      	beq.n	8000462 <GPIO_Init+0x17e>
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a13      	ldr	r2, [pc, #76]	@ (8000494 <GPIO_Init+0x1b0>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d008      	beq.n	800045e <GPIO_Init+0x17a>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a11      	ldr	r2, [pc, #68]	@ (8000498 <GPIO_Init+0x1b4>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d101      	bne.n	800045a <GPIO_Init+0x176>
 8000456:	2307      	movs	r3, #7
 8000458:	e021      	b.n	800049e <GPIO_Init+0x1ba>
 800045a:	2300      	movs	r3, #0
 800045c:	e01f      	b.n	800049e <GPIO_Init+0x1ba>
 800045e:	2306      	movs	r3, #6
 8000460:	e01d      	b.n	800049e <GPIO_Init+0x1ba>
 8000462:	2305      	movs	r3, #5
 8000464:	e01b      	b.n	800049e <GPIO_Init+0x1ba>
 8000466:	2304      	movs	r3, #4
 8000468:	e019      	b.n	800049e <GPIO_Init+0x1ba>
 800046a:	2303      	movs	r3, #3
 800046c:	e017      	b.n	800049e <GPIO_Init+0x1ba>
 800046e:	2302      	movs	r3, #2
 8000470:	e015      	b.n	800049e <GPIO_Init+0x1ba>
 8000472:	2301      	movs	r3, #1
 8000474:	e013      	b.n	800049e <GPIO_Init+0x1ba>
 8000476:	bf00      	nop
 8000478:	40013c00 	.word	0x40013c00
 800047c:	40020000 	.word	0x40020000
 8000480:	40020400 	.word	0x40020400
 8000484:	40020800 	.word	0x40020800
 8000488:	40020c00 	.word	0x40020c00
 800048c:	40021000 	.word	0x40021000
 8000490:	40021400 	.word	0x40021400
 8000494:	40021800 	.word	0x40021800
 8000498:	40021c00 	.word	0x40021c00
 800049c:	2300      	movs	r3, #0
 800049e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80004a0:	4b5b      	ldr	r3, [pc, #364]	@ (8000610 <GPIO_Init+0x32c>)
 80004a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004a4:	4a5a      	ldr	r2, [pc, #360]	@ (8000610 <GPIO_Init+0x32c>)
 80004a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004aa:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << temp2 * 4;
 80004ac:	7c7a      	ldrb	r2, [r7, #17]
 80004ae:	7cbb      	ldrb	r3, [r7, #18]
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	fa02 f103 	lsl.w	r1, r2, r3
 80004b6:	4a57      	ldr	r2, [pc, #348]	@ (8000614 <GPIO_Init+0x330>)
 80004b8:	7cfb      	ldrb	r3, [r7, #19]
 80004ba:	3302      	adds	r3, #2
 80004bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/* enable the exti interrupt delivery using IMR */
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004c0:	4b55      	ldr	r3, [pc, #340]	@ (8000618 <GPIO_Init+0x334>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	7912      	ldrb	r2, [r2, #4]
 80004c8:	4611      	mov	r1, r2
 80004ca:	2201      	movs	r2, #1
 80004cc:	408a      	lsls	r2, r1
 80004ce:	4611      	mov	r1, r2
 80004d0:	4a51      	ldr	r2, [pc, #324]	@ (8000618 <GPIO_Init+0x334>)
 80004d2:	430b      	orrs	r3, r1
 80004d4:	6013      	str	r3, [r2, #0]
    }
	/* configure the speed*/
	temp = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	799b      	ldrb	r3, [r3, #6]
 80004de:	461a      	mov	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	791b      	ldrb	r3, [r3, #4]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ea:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	689a      	ldr	r2, [r3, #8]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	4619      	mov	r1, r3
 80004f8:	2303      	movs	r3, #3
 80004fa:	408b      	lsls	r3, r1
 80004fc:	43db      	mvns	r3, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	400a      	ands	r2, r1
 8000506:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6899      	ldr	r1, [r3, #8]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	697a      	ldr	r2, [r7, #20]
 8000514:	430a      	orrs	r2, r1
 8000516:	609a      	str	r2, [r3, #8]
	/* configure the pupd settings*/
	temp = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	79db      	ldrb	r3, [r3, #7]
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	68da      	ldr	r2, [r3, #12]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	4619      	mov	r1, r3
 800053a:	2303      	movs	r3, #3
 800053c:	408b      	lsls	r3, r1
 800053e:	43db      	mvns	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	400a      	ands	r2, r1
 8000548:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68d9      	ldr	r1, [r3, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	430a      	orrs	r2, r1
 8000558:	60da      	str	r2, [r3, #12]

	/* configure the optype*/ //TODO: configure only in output mode
	temp = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7a1b      	ldrb	r3, [r3, #8]
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	fa02 f303 	lsl.w	r3, r2, r3
 800056e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	4619      	mov	r1, r3
 800057c:	2303      	movs	r3, #3
 800057e:	408b      	lsls	r3, r1
 8000580:	43db      	mvns	r3, r3
 8000582:	4619      	mov	r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	400a      	ands	r2, r1
 800058a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6859      	ldr	r1, [r3, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	430a      	orrs	r2, r1
 800059a:	605a      	str	r2, [r3, #4]
	/* configure the alt functionality*/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d131      	bne.n	8000608 <GPIO_Init+0x324>
    {
		uint8_t temp1;
		uint8_t temp2;
		/* selecting the register AFR[0] (AFRL) or AFR[1] (AFRH) */
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	08db      	lsrs	r3, r3, #3
 80005aa:	743b      	strb	r3, [r7, #16]
		/* selecting the bit position*/
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	f003 0307 	and.w	r3, r3, #7
 80005b4:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	7c3a      	ldrb	r2, [r7, #16]
 80005bc:	3208      	adds	r2, #8
 80005be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	220f      	movs	r2, #15
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	43db      	mvns	r3, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	7c3a      	ldrb	r2, [r7, #16]
 80005d6:	4001      	ands	r1, r0
 80005d8:	3208      	adds	r2, #8
 80005da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	7c3a      	ldrb	r2, [r7, #16]
 80005e4:	3208      	adds	r2, #8
 80005e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7a5b      	ldrb	r3, [r3, #9]
 80005ee:	461a      	mov	r2, r3
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	4618      	mov	r0, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	7c3a      	ldrb	r2, [r7, #16]
 8000600:	4301      	orrs	r1, r0
 8000602:	3208      	adds	r2, #8
 8000604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 8000608:	bf00      	nop
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40013800 	.word	0x40013800
 8000618:	40013c00 	.word	0x40013c00

0800061c <GPIO_ToggleOutputPin>:
 * @return						- none
 *
 * @note						- none
 *************************************************************************************************************************************************/
void GPIO_ToggleOutputPin (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	78fa      	ldrb	r2, [r7, #3]
 800062e:	2101      	movs	r1, #1
 8000630:	fa01 f202 	lsl.w	r2, r1, r2
 8000634:	405a      	eors	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	615a      	str	r2, [r3, #20]
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <TIM1Config>:
 * Vout = Vmax * Duty Cycle
 */


void TIM1Config(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	/*!< Enable Timer clock*/
	RCC->APB2ENR |= (1<<0);
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <TIM1Config+0x44>)
 800064e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000650:	4a0e      	ldr	r2, [pc, #56]	@ (800068c <TIM1Config+0x44>)
 8000652:	f043 0301 	orr.w	r3, r3, #1
 8000656:	6453      	str	r3, [r2, #68]	@ 0x44
	/*!< Set the prescalar and the ARR*/
	TIM1->PSC = 90-1; // 90MHz/90 = 1MHz ~~ 1 uS delay
 8000658:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <TIM1Config+0x48>)
 800065a:	2259      	movs	r2, #89	@ 0x59
 800065c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 0xffff;	// Max ARR value
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <TIM1Config+0x48>)
 8000660:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	/*!< Enable the Timer, and wait for the update Flag to set*/
	TIM1->CR1 |= (1<<0);
 8000666:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <TIM1Config+0x48>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a09      	ldr	r2, [pc, #36]	@ (8000690 <TIM1Config+0x48>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6013      	str	r3, [r2, #0]
	while(!(TIM1->SR & (1<<0))); //UIF: Update interrupt flag. This bit is set by hardware when the registers are updated*/
 8000672:	bf00      	nop
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <TIM1Config+0x48>)
 8000676:	691b      	ldr	r3, [r3, #16]
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d0f9      	beq.n	8000674 <TIM1Config+0x2c>

}
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	40023800 	.word	0x40023800
 8000690:	40010000 	.word	0x40010000

08000694 <TIM_PWM_Start>:


void TIM_PWM_Start(void) //uint8_t timer, uint8_t channel
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0


	TIM1->CCMR1 = 0x68;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <TIM_PWM_Start+0x30>)
 800069a:	2268      	movs	r2, #104	@ 0x68
 800069c:	619a      	str	r2, [r3, #24]
	TIM1->CCER = 1;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <TIM_PWM_Start+0x30>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	621a      	str	r2, [r3, #32]
	TIM1->CCR1 = 65534;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <TIM_PWM_Start+0x30>)
 80006a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80006aa:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->DMAR = 0x81;
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <TIM_PWM_Start+0x30>)
 80006ae:	2281      	movs	r2, #129	@ 0x81
 80006b0:	64da      	str	r2, [r3, #76]	@ 0x4c
	TIM1->BDTR = 0x8000;
 80006b2:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <TIM_PWM_Start+0x30>)
 80006b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006b8:	645a      	str	r2, [r3, #68]	@ 0x44


}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40010000 	.word	0x40010000

080006c8 <SysClockConfig>:
#define PLL_N 	180
#define PLL_P	2


void SysClockConfig(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	/*!< 1. ENABLE HSE and wait for the HSE to become ready*/
	RCC->CR |= RCC_CR_HSEON;
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <SysClockConfig+0xa4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a26      	ldr	r2, [pc, #152]	@ (800076c <SysClockConfig+0xa4>)
 80006d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006d6:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 80006d8:	bf00      	nop
 80006da:	4b24      	ldr	r3, [pc, #144]	@ (800076c <SysClockConfig+0xa4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f9      	beq.n	80006da <SysClockConfig+0x12>

	/*!< 2. Set the POWER ENABLE CLOCK and VOLTAGE REGULATOR*/
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <SysClockConfig+0xa4>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ea:	4a20      	ldr	r2, [pc, #128]	@ (800076c <SysClockConfig+0xa4>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <SysClockConfig+0xa8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000770 <SysClockConfig+0xa8>)
 80006f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006fc:	6013      	str	r3, [r2, #0]

	/*!< 3. Configure the FLASH PREFETCH and the LATENCY related setiings*/
	FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SysClockConfig+0xac>)
 8000700:	f240 7205 	movw	r2, #1797	@ 0x705
 8000704:	601a      	str	r2, [r3, #0]

	/*!< 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2*/
	//AHB PR
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <SysClockConfig+0xa4>)
 8000708:	4a18      	ldr	r2, [pc, #96]	@ (800076c <SysClockConfig+0xa4>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	6093      	str	r3, [r2, #8]
	//APB1 PR
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <SysClockConfig+0xa4>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	4a16      	ldr	r2, [pc, #88]	@ (800076c <SysClockConfig+0xa4>)
 8000714:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000718:	6093      	str	r3, [r2, #8]
	//APB2 PR
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <SysClockConfig+0xa4>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	4a13      	ldr	r2, [pc, #76]	@ (800076c <SysClockConfig+0xa4>)
 8000720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000724:	6093      	str	r3, [r2, #8]

	/*!< 5. Configure the MAIN PLL*/
	RCC->PLLCFGR = ( PLL_M << 0 ) | ( PLL_N << 6 ) | ( PLL_P << 16) | (RCC_PLLCFGR_PLLSRC_HSE);
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <SysClockConfig+0xa4>)
 8000728:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <SysClockConfig+0xb0>)
 800072a:	605a      	str	r2, [r3, #4]

	/*!< 6. Enable the PLL and wait for it to become ready*/
	RCC->CR |= RCC_CR_PLLON;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <SysClockConfig+0xa4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0e      	ldr	r2, [pc, #56]	@ (800076c <SysClockConfig+0xa4>)
 8000732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000736:	6013      	str	r3, [r2, #0]
	while(!( RCC->CR & RCC_CR_PLLRDY ));
 8000738:	bf00      	nop
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <SysClockConfig+0xa4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0f9      	beq.n	800073a <SysClockConfig+0x72>

	/*!< 7. Select the Clock Source and wait for it to be set*/
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <SysClockConfig+0xa4>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <SysClockConfig+0xa4>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6093      	str	r3, [r2, #8]
	while(( RCC->CFGR & RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL );
 8000752:	bf00      	nop
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <SysClockConfig+0xa4>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 030c 	and.w	r3, r3, #12
 800075c:	2b08      	cmp	r3, #8
 800075e:	d1f9      	bne.n	8000754 <SysClockConfig+0x8c>
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000
 8000774:	40023c00 	.word	0x40023c00
 8000778:	00422d04 	.word	0x00422d04

0800077c <main>:
/*************************************************************************************************************************************************/



int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	SysClockConfig();
 8000780:	f7ff ffa2 	bl	80006c8 <SysClockConfig>
	/*TIM6Config();*/

	GPIO_config();
 8000784:	f000 f810 	bl	80007a8 <GPIO_config>
	TIM1Config();
 8000788:	f7ff ff5e 	bl	8000648 <TIM1Config>
	TIM_PWM_Start(); /*not working properly*/
 800078c:	f7ff ff82 	bl	8000694 <TIM_PWM_Start>

    /* Loop forever */
	while(1)
	{
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 8000790:	2105      	movs	r1, #5
 8000792:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <main+0x28>)
 8000794:	f7ff ff42 	bl	800061c <GPIO_ToggleOutputPin>
		delay_ms(1000);
 8000798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800079c:	f000 f81e 	bl	80007dc <delay_ms>
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 80007a0:	bf00      	nop
 80007a2:	e7f5      	b.n	8000790 <main+0x14>
 80007a4:	40020000 	.word	0x40020000

080007a8 <GPIO_config>:
/*************************************************************************************************************************************************/

/*************************************************************************************************************************************************/

void GPIO_config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

		/**led gpio configuration*/
		GpioLed.pGPIOx = GPIOA;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <GPIO_config+0x30>)
 80007b0:	607b      	str	r3, [r7, #4]
		GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80007b2:	2305      	movs	r3, #5
 80007b4:	723b      	strb	r3, [r7, #8]
		GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80007b6:	2301      	movs	r3, #1
 80007b8:	727b      	strb	r3, [r7, #9]
		GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80007ba:	2302      	movs	r3, #2
 80007bc:	72bb      	strb	r3, [r7, #10]
		GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80007be:	2300      	movs	r3, #0
 80007c0:	733b      	strb	r3, [r7, #12]
		GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80007c2:	2300      	movs	r3, #0
 80007c4:	72fb      	strb	r3, [r7, #11]

		GPIO_Init(&GpioLed);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd8b 	bl	80002e4 <GPIO_Init>

}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40020000 	.word	0x40020000

080007dc <delay_ms>:
}
*/


void delay_ms(uint16_t ms )
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
	uint16_t i;

	for(i=0; i<ms; i++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	81fb      	strh	r3, [r7, #14]
 80007ea:	e00b      	b.n	8000804 <delay_ms+0x28>
	{
		/*RESET the Counter*/
		TIM1->CNT = 0;
 80007ec:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <delay_ms+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	@ 0x24
		/*Wait for the Counter to reach the entered value*/
		while (TIM1->CNT < 1000);
 80007f2:	bf00      	nop
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <delay_ms+0x40>)
 80007f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007fc:	d3fa      	bcc.n	80007f4 <delay_ms+0x18>
	for(i=0; i<ms; i++)
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	3301      	adds	r3, #1
 8000802:	81fb      	strh	r3, [r7, #14]
 8000804:	89fa      	ldrh	r2, [r7, #14]
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	429a      	cmp	r2, r3
 800080a:	d3ef      	bcc.n	80007ec <delay_ms+0x10>
	}
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40010000 	.word	0x40010000

08000820 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000820:	480d      	ldr	r0, [pc, #52]	@ (8000858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000822:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000824:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <LoopForever+0x6>)
  ldr r1, =_edata
 800082a:	490d      	ldr	r1, [pc, #52]	@ (8000860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800082c:	4a0d      	ldr	r2, [pc, #52]	@ (8000864 <LoopForever+0xe>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000840:	4c0a      	ldr	r4, [pc, #40]	@ (800086c <LoopForever+0x16>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800084e:	f000 f811 	bl	8000874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000852:	f7ff ff93 	bl	800077c <main>

08000856 <LoopForever>:

LoopForever:
  b LoopForever
 8000856:	e7fe      	b.n	8000856 <LoopForever>
  ldr   r0, =_estack
 8000858:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000864:	080008dc 	.word	0x080008dc
  ldr r2, =_sbss
 8000868:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800086c:	2000001c 	.word	0x2000001c

08000870 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC_IRQHandler>
	...

08000874 <__libc_init_array>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	4d0d      	ldr	r5, [pc, #52]	@ (80008ac <__libc_init_array+0x38>)
 8000878:	4c0d      	ldr	r4, [pc, #52]	@ (80008b0 <__libc_init_array+0x3c>)
 800087a:	1b64      	subs	r4, r4, r5
 800087c:	10a4      	asrs	r4, r4, #2
 800087e:	2600      	movs	r6, #0
 8000880:	42a6      	cmp	r6, r4
 8000882:	d109      	bne.n	8000898 <__libc_init_array+0x24>
 8000884:	4d0b      	ldr	r5, [pc, #44]	@ (80008b4 <__libc_init_array+0x40>)
 8000886:	4c0c      	ldr	r4, [pc, #48]	@ (80008b8 <__libc_init_array+0x44>)
 8000888:	f000 f818 	bl	80008bc <_init>
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	10a4      	asrs	r4, r4, #2
 8000890:	2600      	movs	r6, #0
 8000892:	42a6      	cmp	r6, r4
 8000894:	d105      	bne.n	80008a2 <__libc_init_array+0x2e>
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f855 3b04 	ldr.w	r3, [r5], #4
 800089c:	4798      	blx	r3
 800089e:	3601      	adds	r6, #1
 80008a0:	e7ee      	b.n	8000880 <__libc_init_array+0xc>
 80008a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a6:	4798      	blx	r3
 80008a8:	3601      	adds	r6, #1
 80008aa:	e7f2      	b.n	8000892 <__libc_init_array+0x1e>
 80008ac:	080008d4 	.word	0x080008d4
 80008b0:	080008d4 	.word	0x080008d4
 80008b4:	080008d4 	.word	0x080008d4
 80008b8:	080008d8 	.word	0x080008d8

080008bc <_init>:
 80008bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008be:	bf00      	nop
 80008c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c2:	bc08      	pop	{r3}
 80008c4:	469e      	mov	lr, r3
 80008c6:	4770      	bx	lr

080008c8 <_fini>:
 80008c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ca:	bf00      	nop
 80008cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ce:	bc08      	pop	{r3}
 80008d0:	469e      	mov	lr, r3
 80008d2:	4770      	bx	lr
